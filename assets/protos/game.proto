// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pb;
option go_package = ".;pb";


import "common.proto";
import "quote.proto";


// 游戏类型
enum GameType {
	GameType_NULL = 0;
	
	ShuangMang = 3;		// 双盲训练
	DingXiang = 4;		// 定向训练
	ZhiBiao	 = 17;		// 指标训练
	TiaoJianDan = 11;	// 条件单训练
	QiHuo = 6;			// 期货训练

	JJ_PK = 1;			// PK大战
	JJ_DuoKong = 2;		// 多空大战
	JJ_ChuangGuan = 16;	// 闯关赛
	JJ_QiHuo = 15;		// 期货大战

	MoNiChaoGu = 10;	// 模拟炒股
	ChaoGuDaSai = 9;	// 炒股大赛
	GeGuJingChai = 7;	// 个股竞猜
	DaPanJingChai = 8;	// 大盘竞猜

	MaxGameType = 30;	// 最大游戏类型编号
}


// 玩家的游戏属性
enum GamePropertyId {
	Gold = 0;				// 金币
	Diamond = 1;			// 钻石
	VIP = 2;				// VIP天数
	Exp = 3;				// 经验
	Level = 4;				// 等级
	Fame = 5;				// 威望、名誉

	Max = 30;				// 最大属性
}


// 游戏操作Id
enum GameOperationId {
	GameOperationId_NULL = 0;	// 空

	Ask = 1;					// 买入
	Bid = 2;					// 卖出
	Wait = 3;					// 观望
	Hold = 4;					// 持有
	Ask_Force = 5;				// 强制卖出
	Long = 8;					// 买空
	Short = 9;					// 卖空

	END = 150;					// 结束
}


// 背包项
message BackbagGrid {
	string properties = 1;			// 物品内容：json字符串
	int64 ts = 2;					// 发放时间戳
	string memo = 3;				// 物品说明
}
message Backbag {
	repeated BackbagGrid grids = 1;	// 背包格子
}



// 游戏输赢计数器
message GameCounter {
	GameType game = 1;	// 游戏类型ID
	int32 win = 2;		// 总共赢的次数
	int32 lose = 3;		// 总共输的次数
}


// 双盲训练状态
message SmxlState {
	int64 reset_ts = 1;				// 当前最后一次重置时间戳
	int32 reset_counter = 2;		// 当前重置次数（跨月自动清零）
	int64 reset_ts_premonth = 3;	// 非当前月的最后一次重置时间戳
	int64 last_month_report_ts = 4;	// 最近一次生成月报的时间戳
	int64 gold_init = 5;			// 本月初始资金
	int64 gold = 6;					// 本月当前资金
}
// 闯关状态
message CgState {
}
// 炒股大赛状态
message CgdsState {
}
// 模拟炒股状态
message MncgState {
}


// 玩家的游戏数据
message GameData {
	int32 uid = 1;						// uid
	string nickname = 2;				// 昵称
	string icon = 3;					// 头像
	repeated int64 properties = 4;		// 玩家游戏属性
	repeated GameCounter counters = 5;	// 游戏输赢计数器
	SmxlState smlx_state = 6;			// 双盲训练状态
	CgState cg_state = 7;				// 闯关状态
	CgState cgds_state = 8;				// 炒股大赛状态
	CgState mncg_state = 9;				// 模拟炒股状态
	//int64 Today = 10;					// 今日时间戳（放客户端）
	//repeated int32 TodayGameCounter= 11;// 今日游戏计数器（放客户端）
}


// 玩家游戏属性
message GamePropertyItem {
	GamePropertyId id = 1;		// 属性ID
	int64 old_value = 2;		// 原属性值
	int64 new_value = 3;		// 现属性值
}
message GameProperties {
	repeated GamePropertyItem items = 1;
}


// 游戏操作步骤
message GameOperationItem {
	GameOperationId op_id = 1;	// 操作Id
	int32 code = 2;				// 行情代码：股票或期货
	KType k_type = 3;			// 行情类型：日K，分时
	int32 k_ts = 4;				// 行情时间：日K线的格式为YYYYMMDD，分时K线的格式为HHMMSS
	double price = 5;			// 操作参数：买入或卖出价格
	int64 volume = 6;			// 操作参数：买入或卖出量
	int64 op_ts = 7;			// 操作参数：操作时间戳
}
message GameOperations {
	repeated GameOperationItem items = 1;	// 操作集合
}


// 游戏结果
message GameResult {
	int32 uid = 1;				// uid
	GameType g_type = 2;		// 游戏类型
	int32 quotes_code = 3;		// 行情代码：股票代码或期货代码
	KType k_type = 4;			// 行情类型：日K，分时
	int64 k_from = 5;			// 行情起始日期YYYYMMDD或时间HHMMSS
	int64 k_to = 6;				// 行情结束日期YYYYMMDD或时间HHMMSS
	double stock_profit_rate = 7;//同期股票涨跌幅
	double user_profit_rate = 8;// 用户盈利率
	int64 user_capital = 9;		// 用户初始资本金
	int64 user_profit = 10;		// 用户盈利额
	int64 ts = 11;				// 游戏结果时间戳
	int32 rank = 12;			// 游戏结果：本场排行（若是单人或双人游戏，排名第2则为输）
	int64 ref_id = 13;			// 关联ID
}







// 登录游戏服
message CmdGameLogin {
	int32 uid    = 1; // 玩家ID
	string token = 2; // 登录服返回的token
}
// 登录游戏服应答
message CmdGameLoginReply {
	ErrorInfo result = 1;	// 登录结果
	GameData data = 2; 		// 玩家的游戏数据
}


// 上传头像
message CmdUploadIcon {
	int32 uid    = 1;	// 玩家ID
	bytes icon = 2;		// 玩家头像数据（不能大于500K，客户端先将原图处理再上传）
}
// 上传头像应答(修改成功后，ErrorInfo消息的err字段里面保存头像的URL)
// 应答消息：ErrorInfo


// 更改昵称
message CmdEditNick {
	int32 uid    = 1;	// 玩家ID
	string nick = 2;	// 新昵称
}
// 更改昵称应答(修改成功后，ErrorInfo消息的err字段里面保存新的昵称)
// 应答消息：ErrorInfo


// 更改头像
message CmdEditIcon {
	int32 uid    = 1;	// 玩家ID
	string icon = 2;	// 玩家头像URL
}
// 更改头像应答(修改成功后，ErrorInfo消息的err字段里面保存头像的URL)
// 应答消息：ErrorInfo


// 获取背包列表请求：空
// 获取背包列表应答：Backbag


// 领取背包物品请求
message CmdGetItem {
	int64 ts    = 1;	// 时间戳
}
// 领取背包物品应答：ErrorInfo


// 开始游戏
message CmdGameStart {
	GameType game    = 1;	// 游戏类型
}
// 开始游戏应答
// 应答消息：ErrorInfo


// 结束游戏
message CmdGameOver {
	GameResult result = 1;			// 游戏结果
	GameOperations operations = 2;	// 游戏操作步骤集合
}
// 结束游戏应答
// 应答消息：无消息体


// 查询游戏结果
message CmdQueryGameResult {
	GameType g_type = 1;	// 游戏类型
	int64 from = 2;			// 游戏起始时间戳
	int64 to = 3;			// 游戏结束时间戳
	int32 page_size = 4;	// 每页记录条数
}
// 查询游戏结果应答
message CmdQueryGameResultReply {
	repeated GameResult results = 1;// 游戏结果数组
}


// 查询游戏操作步骤
message CmdGetGameOperations {
	int32 uid = 1;	// 用户ID
	int64 ts = 2;	// 游戏结果的时间戳
}
// 查询游戏操作步骤应答
message CmdGetGameOperationsReply {
	ErrorInfo err = 1;				// 查询结果
	GameOperations operations = 2;	// 游戏操作步骤集合
}


// 查询双盲月报
// 请求类型：无消息体
// 查询双盲月报应答
message CmdGetSmxlReportReply {
	int64 capital_init = 1;		// 初始资本金
	int64 capital_final = 2;	// 当前资本金
	float profit_rate = 3;		// 总体盈利率
	int32 win_count = 4;		// 赢的次数
	int32 win_code = 5;			// 赢的股票代码
	float win_rate = 6;			// 赢的盈利率
	int32 lose_count = 7;		// 输的次数
	int32 lose_code = 8;		// 输的股票代码
	float lose_rate = 9;		// 输的盈利率
	int32 count = 10;			// 总共游戏次数
	float rank_captial = 11;	// 资本金击败百分比
	float rank_rate = 12;		// 盈利率击败百分比
}


// 重置双盲训练初始资本金
// 请求类型：无消息体
// 重置双盲训练初始资本金应答
// 应答类型：ErrorInfo



// 创建房间
message CmdRoomCreate {
	GameType game = 1;	// 游戏类型
	int32 uid = 2;		// 房主（第一个进入房间的，默认为房主）
  	int32 node = 3;		// 用户所在节点（客户端不需要该参数）
  	int32 capital = 4;	// 报名费
}
// 创建房间应答
message CmdRoomCreateReply {
	ErrorInfo err = 1;	// 结果
	int32 id = 2;		// 房间ID
}



// 进入房间
message CmdRoomEnter {
	int32 id = 1;		// 房间ID
	GameType game = 2;	// 游戏类型
	int32 uid = 3;		// 用户ID
  	int32 node = 4;		// 用户所在节点（客户端不需要该参数）
}
// 进入房间应答
message CmdRoomEnterReply {
	ErrorInfo err = 1;	// 结果
	int32 id = 2;		// 房间ID
  	int32 node = 3;		// 用户所在节点（客户端不需要该参数）
}



// 离开房间
message CmdRoomLeave {
	int32 id = 1;		// 房间ID
	int32 uid = 2;		// 用户ID
}
// 离开房间应答
message CmdRoomLeaveReply {
	ErrorInfo err = 1;	// 结果
}



// 同步玩家就绪：RoomPlayerStatus
// 应答：（无）



// 同步游戏状态：RoomGameStatus
// 应答：（无）



// 同步游戏操作：RoomGameOp
// 应答：（无）



// 同步玩家进入房间
message SyncRoomEnter {
	int32 id = 1;		// 房间ID
	GameType game = 2;	// 游戏类型
	GameData player=3;	// 玩家数据
}
// 同步玩家离开房间
message SyncRoomLeave {
	int32 id = 1;		// 房间ID
	GameType game = 2;	// 游戏类型
	int32 uid = 3;		// 玩家ID
}
// 同步房间玩家状态
message RoomPlayerStatus {
	int32 id = 1;		// 房间ID
	int32 uid = 2;		// 用户ID
	bool ready= 3;		// 是否就绪
}
// 同步房间游戏状态
message RoomGameStatus {
	int32 id = 1;		// 房间ID
	int32 status= 2;	// 游戏状态：准备、开始、结束等等
}
// 同步房间游戏操作
message RoomGameOp {
	int32 id = 1;		// 房间ID
	bytes ops = 2;		// 游戏操作
}
// 同步房间游戏结果
message RoomGameResult {
	int32 id = 1;		// 房间ID
	bytes result = 2;	// 游戏结果
}



// 房间数据
message RoomData {
	int32 id = 1;		// 房间ID
	GameType game = 2;	// 游戏类型
	bytes data = 3;		// 房间数据
}
// PK房间数据
message RoomPkPlayer {
	GameData gd = 1;		// 玩家数据
	bool ready = 2;			// 玩家是否就绪
	GameOperations ops = 3;	// 游戏操作
	GameResult result = 4;	// 游戏结果
}
message RoomDataPk {
	int32 status = 1;				// 游戏状态
	int32 capital = 2;				// 报名费
	int32 code = 3;					// 行情代码
	KType ktype = 4;				// 行情类型：日K，分时等等
	int64 tsQuoteFrom = 5;			// 行情开始时间
	int64 tsQuoteTo = 6;			// 行情结束时间
	int64 tsQuoteStart = 7;			// 行情起始位置（开始玩的位置）
	repeated RoomPkPlayer players = 8;	// 玩家数据
	int64 tsGameFrom = 9;			// 游戏开始时间戳（精确：秒）
	int64 tsGameCur = 10;			// 游戏当前时间戳（精确：秒）
}