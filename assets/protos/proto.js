/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = protobuf;

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.pb = (function () {

    /**
     * Namespace pb.
     * @exports pb
     * @namespace
     */
    var pb = {};

    /**
     * Constant enum.
     * @name pb.Constant
     * @enum {number}
     * @property {number} Constant_NULL=0 Constant_NULL value
     * @property {number} MsgHead_Len=10 MsgHead_Len value
     * @property {number} MsgMaxBody_Len=1024000 MsgMaxBody_Len value
     */
    pb.Constant = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Constant_NULL"] = 0;
        values[valuesById[10] = "MsgHead_Len"] = 10;
        values[valuesById[1024000] = "MsgMaxBody_Len"] = 1024000;
        return values;
    })();

    /**
     * ErrorCode enum.
     * @name pb.ErrorCode
     * @enum {number}
     * @property {number} CS_OK=0 CS_OK value
     * @property {number} CS_UNKNOW=1 CS_UNKNOW value
     * @property {number} CS_SERVER_ERROR=2 CS_SERVER_ERROR value
     * @property {number} CS_INVALID_PARAMETER=3 CS_INVALID_PARAMETER value
     * @property {number} CS_INVALID_ACCOUNT=4 CS_INVALID_ACCOUNT value
     * @property {number} CS_INVALID_PASSWORD=5 CS_INVALID_PASSWORD value
     * @property {number} CS_TIMEOUT=6 CS_TIMEOUT value
     * @property {number} CS_CHECK_FAILURE=7 CS_CHECK_FAILURE value
     * @property {number} CS_CHECK_FAILURE_CAPITAL=8 CS_CHECK_FAILURE_CAPITAL value
     * @property {number} CS_CHECK_FAILURE_STOCK=9 CS_CHECK_FAILURE_STOCK value
     * @property {number} CS_CHECK_FAILURE_ORDER=10 CS_CHECK_FAILURE_ORDER value
     * @property {number} CS_NO_TRADING_TIME=11 CS_NO_TRADING_TIME value
     * @property {number} CS_NO_REGISTRY_TIME=12 CS_NO_REGISTRY_TIME value
     * @property {number} CS_NO_REGISTRY=13 CS_NO_REGISTRY value
     * @property {number} CS_ALREADY_REGISTRY=14 CS_ALREADY_REGISTRY value
     * @property {number} CS_CHECK_FAILURE_CGDS_ID=15 CS_CHECK_FAILURE_CGDS_ID value
     * @property {number} CS_CHECK_FAILURE_TIME=16 CS_CHECK_FAILURE_TIME value
     * @property {number} CS_CHECK_FAILURE_PROPERTY=17 CS_CHECK_FAILURE_PROPERTY value
     * @property {number} CS_CHECK_FAILURE_TOKEN=18 CS_CHECK_FAILURE_TOKEN value
     * @property {number} CS_ALREADY_UNLOCK=19 CS_ALREADY_UNLOCK value
     * @property {number} CS_CHECK_PHONE_UNREGISTRY=20 CS_CHECK_PHONE_UNREGISTRY value
     * @property {number} CS_CHECK_PHONE_UNBOUND=21 CS_CHECK_PHONE_UNBOUND value
     * @property {number} CS_CHECK_ACCOUNT_FORBIDDEN=22 CS_CHECK_ACCOUNT_FORBIDDEN value
     * @property {number} CS_INVALID_SMSCODE=23 CS_INVALID_SMSCODE value
     * @property {number} CS_CHECK_FAILURE_ONCE=24 CS_CHECK_FAILURE_ONCE value
     * @property {number} CS_PAYMENT_FAILURE=25 CS_PAYMENT_FAILURE value
     * @property {number} CS_ROOM_INVALID=100 CS_ROOM_INVALID value
     * @property {number} CS_ROOM_FULL=101 CS_ROOM_FULL value
     * @property {number} CS_ROOM_FAIL_CHECKIN=102 CS_ROOM_FAIL_CHECKIN value
     * @property {number} CS_ROOM_NOT_READY=103 CS_ROOM_NOT_READY value
     */
    pb.ErrorCode = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CS_OK"] = 0;
        values[valuesById[1] = "CS_UNKNOW"] = 1;
        values[valuesById[2] = "CS_SERVER_ERROR"] = 2;
        values[valuesById[3] = "CS_INVALID_PARAMETER"] = 3;
        values[valuesById[4] = "CS_INVALID_ACCOUNT"] = 4;
        values[valuesById[5] = "CS_INVALID_PASSWORD"] = 5;
        values[valuesById[6] = "CS_TIMEOUT"] = 6;
        values[valuesById[7] = "CS_CHECK_FAILURE"] = 7;
        values[valuesById[8] = "CS_CHECK_FAILURE_CAPITAL"] = 8;
        values[valuesById[9] = "CS_CHECK_FAILURE_STOCK"] = 9;
        values[valuesById[10] = "CS_CHECK_FAILURE_ORDER"] = 10;
        values[valuesById[11] = "CS_NO_TRADING_TIME"] = 11;
        values[valuesById[12] = "CS_NO_REGISTRY_TIME"] = 12;
        values[valuesById[13] = "CS_NO_REGISTRY"] = 13;
        values[valuesById[14] = "CS_ALREADY_REGISTRY"] = 14;
        values[valuesById[15] = "CS_CHECK_FAILURE_CGDS_ID"] = 15;
        values[valuesById[16] = "CS_CHECK_FAILURE_TIME"] = 16;
        values[valuesById[17] = "CS_CHECK_FAILURE_PROPERTY"] = 17;
        values[valuesById[18] = "CS_CHECK_FAILURE_TOKEN"] = 18;
        values[valuesById[19] = "CS_ALREADY_UNLOCK"] = 19;
        values[valuesById[20] = "CS_CHECK_PHONE_UNREGISTRY"] = 20;
        values[valuesById[21] = "CS_CHECK_PHONE_UNBOUND"] = 21;
        values[valuesById[22] = "CS_CHECK_ACCOUNT_FORBIDDEN"] = 22;
        values[valuesById[23] = "CS_INVALID_SMSCODE"] = 23;
        values[valuesById[24] = "CS_CHECK_FAILURE_ONCE"] = 24;
        values[valuesById[25] = "CS_PAYMENT_FAILURE"] = 25;
        values[valuesById[100] = "CS_ROOM_INVALID"] = 100;
        values[valuesById[101] = "CS_ROOM_FULL"] = 101;
        values[valuesById[102] = "CS_ROOM_FAIL_CHECKIN"] = 102;
        values[valuesById[103] = "CS_ROOM_NOT_READY"] = 103;
        return values;
    })();

    /**
     * MessageId enum.
     * @name pb.MessageId
     * @enum {number}
     * @property {number} MessageId_NULL=0 MessageId_NULL value
     * @property {number} Cmd_Save_Stock2Db=101 Cmd_Save_Stock2Db value
     * @property {number} Cmd_Make_StockList=103 Cmd_Make_StockList value
     * @property {number} Sync_S2C_QuoteItem=1000 Sync_S2C_QuoteItem value
     * @property {number} Sync_S2C_GameProperty=1002 Sync_S2C_GameProperty value
     * @property {number} Sync_S2C_GameCounter=1004 Sync_S2C_GameCounter value
     * @property {number} Sync_S2C_GameSmxl=1006 Sync_S2C_GameSmxl value
     * @property {number} Sync_S2C_GameCg=1008 Sync_S2C_GameCg value
     * @property {number} Sync_S2C_GameMncg=1010 Sync_S2C_GameMncg value
     * @property {number} Sync_S2C_GameCgds=1012 Sync_S2C_GameCgds value
     * @property {number} Sync_S2C_FirstLoginToday=1014 Sync_S2C_FirstLoginToday value
     * @property {number} Sync_S2C_GameCg_GD=1016 Sync_S2C_GameCg_GD value
     * @property {number} Sync_S2C_GameTimes=1018 Sync_S2C_GameTimes value
     * @property {number} Sync_S2C_StockOrderResult=1020 Sync_S2C_StockOrderResult value
     * @property {number} Sync_S2C_MutipleLogin=1022 Sync_S2C_MutipleLogin value
     * @property {number} Sync_S2C_TaskProgress=1024 Sync_S2C_TaskProgress value
     * @property {number} Sync_S2C_ActivityConf=1026 Sync_S2C_ActivityConf value
     * @property {number} Sync_S2C_GameCgdsItem=1028 Sync_S2C_GameCgdsItem value
     * @property {number} Sync_S2C_GoldAwardPrompt=1030 Sync_S2C_GoldAwardPrompt value
     * @property {number} Sync_S2C_UnregistryAccount=1032 Sync_S2C_UnregistryAccount value
     * @property {number} Sync_S2C_CgdsConf=1034 Sync_S2C_CgdsConf value
     * @property {number} Sync_S2C_RecommendStock=1036 Sync_S2C_RecommendStock value
     * @property {number} Sync_S2C_InviterState=1037 Sync_S2C_InviterState value
     * @property {number} Sync_S2C_Broadcast=1100 Sync_S2C_Broadcast value
     * @property {number} Sync_S2C_Message=1102 Sync_S2C_Message value
     * @property {number} Sync_C2S_GameHeart=1200 Sync_C2S_GameHeart value
     * @property {number} Sync_C2S_Message=1202 Sync_C2S_Message value
     * @property {number} Sync_C2S_PaymentOk=1204 Sync_C2S_PaymentOk value
     * @property {number} Req_QuoteSubscribe=2001 Req_QuoteSubscribe value
     * @property {number} Rep_QuoteSubscribe=2002 Rep_QuoteSubscribe value
     * @property {number} Req_QuoteQuery=2003 Req_QuoteQuery value
     * @property {number} Rep_QuoteQuery=2004 Rep_QuoteQuery value
     * @property {number} Req_QuoteQueryFuture=2005 Req_QuoteQueryFuture value
     * @property {number} Rep_QuoteQueryFuture=2006 Rep_QuoteQueryFuture value
     * @property {number} Req_IsTradingDay=2007 Req_IsTradingDay value
     * @property {number} Rep_IsTradingDay=2008 Rep_IsTradingDay value
     * @property {number} Req_QueryTradingDay=2009 Req_QueryTradingDay value
     * @property {number} Rep_QueryTradingDay=2010 Rep_QueryTradingDay value
     * @property {number} Req_QueryAiStockList=2011 Req_QueryAiStockList value
     * @property {number} Rep_QueryAiStockList=2012 Rep_QueryAiStockList value
     * @property {number} Req_QueryAiSignal=2013 Req_QueryAiSignal value
     * @property {number} Rep_QueryAiSignal=2014 Rep_QueryAiSignal value
     * @property {number} Req_EditAiStockList=2015 Req_EditAiStockList value
     * @property {number} Rep_EditAiStockList=2016 Rep_EditAiStockList value
     * @property {number} Req_RecommendStock=2017 Req_RecommendStock value
     * @property {number} Rep_RecommendStock=2018 Rep_RecommendStock value
     * @property {number} Req_Hall_UploadIcon=3001 Req_Hall_UploadIcon value
     * @property {number} Rep_Hall_UploadIcon=3002 Rep_Hall_UploadIcon value
     * @property {number} Req_Hall_DownloadIcon=3003 Req_Hall_DownloadIcon value
     * @property {number} Rep_Hall_DownploadIcon=3004 Rep_Hall_DownploadIcon value
     * @property {number} Req_Hall_EditIcon=3005 Req_Hall_EditIcon value
     * @property {number} Rep_Hall_EditIcon=3006 Rep_Hall_EditIcon value
     * @property {number} Req_Hall_EditNick=3007 Req_Hall_EditNick value
     * @property {number} Rep_Hall_EditNick=3008 Rep_Hall_EditNick value
     * @property {number} Req_Hall_EditLocation=3009 Req_Hall_EditLocation value
     * @property {number} Rep_Hall_EditLocation=3010 Rep_Hall_EditLocation value
     * @property {number} Req_Hall_EditGender=3011 Req_Hall_EditGender value
     * @property {number} Rep_Hall_EditGender=3012 Rep_Hall_EditGender value
     * @property {number} Req_Hall_BackBag=3013 Req_Hall_BackBag value
     * @property {number} Rep_Hall_BackBag=3014 Rep_Hall_BackBag value
     * @property {number} Req_Hall_GetItem=3015 Req_Hall_GetItem value
     * @property {number} Rep_Hall_GetItem=3016 Rep_Hall_GetItem value
     * @property {number} Req_Hall_EditFavorList=3017 Req_Hall_EditFavorList value
     * @property {number} Rep_Hall_EditFavorList=3018 Rep_Hall_EditFavorList value
     * @property {number} Req_Hall_QueryPlayer=3019 Req_Hall_QueryPlayer value
     * @property {number} Rep_Hall_QueryPlayer=3020 Rep_Hall_QueryPlayer value
     * @property {number} Req_Hall_SaveStudyProgress=3021 Req_Hall_SaveStudyProgress value
     * @property {number} Rep_Hall_SaveStudyProgress=3022 Rep_Hall_SaveStudyProgress value
     * @property {number} Req_Hall_GetDailyTaskAward=3023 Req_Hall_GetDailyTaskAward value
     * @property {number} Rep_Hall_GetDailyTaskAward=3024 Rep_Hall_GetDailyTaskAward value
     * @property {number} Req_Hall_UnlockGame=3025 Req_Hall_UnlockGame value
     * @property {number} Rep_Hall_UnlockGame=3026 Rep_Hall_UnlockGame value
     * @property {number} Req_Hall_GetWeeklyAward=3027 Req_Hall_GetWeeklyAward value
     * @property {number} Rep_Hall_GetWeeklyAward=3028 Rep_Hall_GetWeeklyAward value
     * @property {number} Req_Hall_QueryEventLog=3029 Req_Hall_QueryEventLog value
     * @property {number} Rep_Hall_QueryEventLog=3030 Rep_Hall_QueryEventLog value
     * @property {number} Req_Hall_ShopOrder=3031 Req_Hall_ShopOrder value
     * @property {number} Rep_Hall_ShopOrder=3032 Rep_Hall_ShopOrder value
     * @property {number} Req_Hall_ShopOrderQuery=3033 Req_Hall_ShopOrderQuery value
     * @property {number} Rep_Hall_ShopOrderQuery=3034 Rep_Hall_ShopOrderQuery value
     * @property {number} Req_Hall_MobileBind=3035 Req_Hall_MobileBind value
     * @property {number} Rep_Hall_MobileBind=3036 Rep_Hall_MobileBind value
     * @property {number} Req_Hall_ResetGameCounter=3037 Req_Hall_ResetGameCounter value
     * @property {number} Rep_Hall_ResetGameCounter=3038 Rep_Hall_ResetGameCounter value
     * @property {number} Req_Hall_GetLevelRanking=3039 Req_Hall_GetLevelRanking value
     * @property {number} Rep_Hall_GetLevelRanking=3040 Rep_Hall_GetLevelRanking value
     * @property {number} Req_Hall_GetFameRanking=3041 Req_Hall_GetFameRanking value
     * @property {number} Rep_Hall_GetFameRanking=3042 Rep_Hall_GetFameRanking value
     * @property {number} Req_Hall_GetFameRankingWeekly=3043 Req_Hall_GetFameRankingWeekly value
     * @property {number} Rep_Hall_GetFameRankingWeekly=3044 Rep_Hall_GetFameRankingWeekly value
     * @property {number} Req_Hall_GetActivityLogs=3045 Req_Hall_GetActivityLogs value
     * @property {number} Rep_Hall_GetActivityLogs=3046 Rep_Hall_GetActivityLogs value
     * @property {number} Req_Hall_GetDailyAdAward=3047 Req_Hall_GetDailyAdAward value
     * @property {number} Rep_Hall_GetDailyAdAward=3048 Rep_Hall_GetDailyAdAward value
     * @property {number} Req_Hall_Get7Award=3049 Req_Hall_Get7Award value
     * @property {number} Rep_Hall_Get7Award=3050 Rep_Hall_Get7Award value
     * @property {number} Req_Hall_GetBrokenAward=3051 Req_Hall_GetBrokenAward value
     * @property {number} Rep_Hall_GetBrokenAward=3052 Rep_Hall_GetBrokenAward value
     * @property {number} Req_Hall_Exchange=3053 Req_Hall_Exchange value
     * @property {number} Rep_Hall_Exchange=3054 Rep_Hall_Exchange value
     * @property {number} Req_Hall_GetInviterAward=3055 Req_Hall_GetInviterAward value
     * @property {number} Rep_Hall_GetInviterAward=3056 Rep_Hall_GetInviterAward value
     * @property {number} Req_Hall_Unregistry=3997 Req_Hall_Unregistry value
     * @property {number} Rep_Hall_Unregistry=3998 Rep_Hall_Unregistry value
     * @property {number} Req_Hall_Logout=3999 Req_Hall_Logout value
     * @property {number} Rep_Hall_Logout=4000 Rep_Hall_Logout value
     * @property {number} Req_Game_Login=4001 Req_Game_Login value
     * @property {number} Rep_Game_Login=4002 Rep_Game_Login value
     * @property {number} Req_Game_Start=4003 Req_Game_Start value
     * @property {number} Rep_Game_Start=4004 Rep_Game_Start value
     * @property {number} Req_Game_Over=4005 Req_Game_Over value
     * @property {number} Rep_Game_Over=4006 Rep_Game_Over value
     * @property {number} Req_Game_QueryGameResult=4007 Req_Game_QueryGameResult value
     * @property {number} Rep_Game_QueryGameResult=4008 Rep_Game_QueryGameResult value
     * @property {number} Req_Game_GetGameOperation=4009 Req_Game_GetGameOperation value
     * @property {number} Rep_Game_GetGameOperation=4010 Rep_Game_GetGameOperation value
     * @property {number} Req_Game_SmxlReport=4011 Req_Game_SmxlReport value
     * @property {number} Rep_Game_SmxlReport=4012 Rep_Game_SmxlReport value
     * @property {number} Req_Game_SmxlReset=4013 Req_Game_SmxlReset value
     * @property {number} Rep_Game_SmxlReset=4014 Rep_Game_SmxlReset value
     * @property {number} Req_Game_CgsGetConf=4015 Req_Game_CgsGetConf value
     * @property {number} Rep_Game_CgsGetConf=4016 Rep_Game_CgsGetConf value
     * @property {number} Req_Game_CgsGetClearanceRank=4017 Req_Game_CgsGetClearanceRank value
     * @property {number} Rep_Game_CgsGetClearanceRank=4018 Rep_Game_CgsGetClearanceRank value
     * @property {number} Req_Game_CgsGetStageRank=4019 Req_Game_CgsGetStageRank value
     * @property {number} Rep_Game_CgsGetStageRank=4020 Rep_Game_CgsGetStageRank value
     * @property {number} Req_Game_CgsGetSeasonRank=4021 Req_Game_CgsGetSeasonRank value
     * @property {number} Rep_Game_CgsGetSeasonRank=4022 Rep_Game_CgsGetSeasonRank value
     * @property {number} Req_Game_CgsGetStageAward=4023 Req_Game_CgsGetStageAward value
     * @property {number} Rep_Game_CgsGetStageAward=4024 Rep_Game_CgsGetStageAward value
     * @property {number} Req_Game_OrderQuery=4025 Req_Game_OrderQuery value
     * @property {number} Rep_Game_OrderQuery=4026 Rep_Game_OrderQuery value
     * @property {number} Req_Game_Order=4027 Req_Game_Order value
     * @property {number} Rep_Game_Order=4028 Rep_Game_Order value
     * @property {number} Req_Game_OrderCancel=4029 Req_Game_OrderCancel value
     * @property {number} Rep_Game_OrderCancel=4030 Rep_Game_OrderCancel value
     * @property {number} Req_Game_MncgExchange=4031 Req_Game_MncgExchange value
     * @property {number} Rep_Game_MncgExchange=4032 Rep_Game_MncgExchange value
     * @property {number} Req_Game_MncgEditStockList=4033 Req_Game_MncgEditStockList value
     * @property {number} Rep_Game_MncgEditStockList=4034 Rep_Game_MncgEditStockList value
     * @property {number} Req_Game_CgdsList=4035 Req_Game_CgdsList value
     * @property {number} Rep_Game_CgdsList=4036 Rep_Game_CgdsList value
     * @property {number} Req_Game_CgdsReg=4037 Req_Game_CgdsReg value
     * @property {number} Rep_Game_CgdsReg=4038 Rep_Game_CgdsReg value
     * @property {number} Req_Game_CgdsRanking=4039 Req_Game_CgdsRanking value
     * @property {number} Rep_Game_CgdsRanking=4040 Rep_Game_CgdsRanking value
     * @property {number} Req_Game_ZsjcBettingList=4041 Req_Game_ZsjcBettingList value
     * @property {number} Rep_Game_ZsjcBettingList=4042 Rep_Game_ZsjcBettingList value
     * @property {number} Req_Game_ZsjcBet=4043 Req_Game_ZsjcBet value
     * @property {number} Rep_Game_ZsjcBet=4044 Rep_Game_ZsjcBet value
     * @property {number} Req_Game_ZsjcRanking=4045 Req_Game_ZsjcRanking value
     * @property {number} Rep_Game_ZsjcRanking=4046 Rep_Game_ZsjcRanking value
     * @property {number} Req_Game_ZsjcPlayerBettingList=4047 Req_Game_ZsjcPlayerBettingList value
     * @property {number} Rep_Game_ZsjcPlayerBettingList=4048 Rep_Game_ZsjcPlayerBettingList value
     * @property {number} Req_Game_ZsjcBettingResultList=4049 Req_Game_ZsjcBettingResultList value
     * @property {number} Rep_Game_ZsjcBettingResultList=4050 Rep_Game_ZsjcBettingResultList value
     * @property {number} Req_Room_Create=5003 Req_Room_Create value
     * @property {number} Rep_Room_Create=5004 Rep_Room_Create value
     * @property {number} Req_Room_Enter=5005 Req_Room_Enter value
     * @property {number} Rep_Room_Enter=5006 Rep_Room_Enter value
     * @property {number} Req_Room_Leave=5007 Req_Room_Leave value
     * @property {number} Rep_Room_Leave=5008 Rep_Room_Leave value
     * @property {number} Req_Room_Ready=5009 Req_Room_Ready value
     * @property {number} Rep_Room_Ready=5010 Rep_Room_Ready value
     * @property {number} Sync_Room_Enter=5200 Sync_Room_Enter value
     * @property {number} Sync_Room_Leave=5202 Sync_Room_Leave value
     * @property {number} Sync_Room_Enter_Self=5204 Sync_Room_Enter_Self value
     * @property {number} Sync_Room_Leave_Self=5206 Sync_Room_Leave_Self value
     * @property {number} Sync_Room_LostConn=5208 Sync_Room_LostConn value
     * @property {number} Sync_Room_ReConn=5210 Sync_Room_ReConn value
     * @property {number} Sync_Room_Ready=5212 Sync_Room_Ready value
     * @property {number} Sync_Room_GameStatus=5214 Sync_Room_GameStatus value
     * @property {number} Sync_Room_GameOp=5216 Sync_Room_GameOp value
     * @property {number} Sync_Room_GameResult=5218 Sync_Room_GameResult value
     * @property {number} S2S_HeartBeat=10001 S2S_HeartBeat value
     * @property {number} S2S_Update_PlayerProperty=10003 S2S_Update_PlayerProperty value
     * @property {number} S2S_Update_PlayerGameCounter=10005 S2S_Update_PlayerGameCounter value
     * @property {number} S2S_OrderCancel=10007 S2S_OrderCancel value
     * @property {number} S2S_Sync_Cgds=10009 S2S_Sync_Cgds value
     * @property {number} S2S_Set_CgdsTitle=10011 S2S_Set_CgdsTitle value
     * @property {number} S2S_Set_CgdsLogo=10013 S2S_Set_CgdsLogo value
     * @property {number} S2S_Set_CgdsUrl=10015 S2S_Set_CgdsUrl value
     * @property {number} S2S_Set_CgdsConf=10017 S2S_Set_CgdsConf value
     * @property {number} S2S_Set_CgdsAward=10019 S2S_Set_CgdsAward value
     * @property {number} S2S_Open_Cgds=10021 S2S_Open_Cgds value
     * @property {number} S2S_Close_Cgds=10023 S2S_Close_Cgds value
     * @property {number} S2S_Reload_Cgds=10025 S2S_Reload_Cgds value
     * @property {number} S2S_Reload_GameConf=10027 S2S_Reload_GameConf value
     * @property {number} S2S_Sync_ZsjcBetting=10028 S2S_Sync_ZsjcBetting value
     * @property {number} S2S_Sync_ZsjcState=10030 S2S_Sync_ZsjcState value
     * @property {number} S2S_Update_DailyTaskProgress=10032 S2S_Update_DailyTaskProgress value
     * @property {number} S2S_Sync_Pay=10034 S2S_Sync_Pay value
     * @property {number} S2S_Sync_PaymentQuery=10036 S2S_Sync_PaymentQuery value
     */
    pb.MessageId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MessageId_NULL"] = 0;
        values[valuesById[101] = "Cmd_Save_Stock2Db"] = 101;
        values[valuesById[103] = "Cmd_Make_StockList"] = 103;
        values[valuesById[1000] = "Sync_S2C_QuoteItem"] = 1000;
        values[valuesById[1002] = "Sync_S2C_GameProperty"] = 1002;
        values[valuesById[1004] = "Sync_S2C_GameCounter"] = 1004;
        values[valuesById[1006] = "Sync_S2C_GameSmxl"] = 1006;
        values[valuesById[1008] = "Sync_S2C_GameCg"] = 1008;
        values[valuesById[1010] = "Sync_S2C_GameMncg"] = 1010;
        values[valuesById[1012] = "Sync_S2C_GameCgds"] = 1012;
        values[valuesById[1014] = "Sync_S2C_FirstLoginToday"] = 1014;
        values[valuesById[1016] = "Sync_S2C_GameCg_GD"] = 1016;
        values[valuesById[1018] = "Sync_S2C_GameTimes"] = 1018;
        values[valuesById[1020] = "Sync_S2C_StockOrderResult"] = 1020;
        values[valuesById[1022] = "Sync_S2C_MutipleLogin"] = 1022;
        values[valuesById[1024] = "Sync_S2C_TaskProgress"] = 1024;
        values[valuesById[1026] = "Sync_S2C_ActivityConf"] = 1026;
        values[valuesById[1028] = "Sync_S2C_GameCgdsItem"] = 1028;
        values[valuesById[1030] = "Sync_S2C_GoldAwardPrompt"] = 1030;
        values[valuesById[1032] = "Sync_S2C_UnregistryAccount"] = 1032;
        values[valuesById[1034] = "Sync_S2C_CgdsConf"] = 1034;
        values[valuesById[1036] = "Sync_S2C_RecommendStock"] = 1036;
        values[valuesById[1037] = "Sync_S2C_InviterState"] = 1037;
        values[valuesById[1100] = "Sync_S2C_Broadcast"] = 1100;
        values[valuesById[1102] = "Sync_S2C_Message"] = 1102;
        values[valuesById[1200] = "Sync_C2S_GameHeart"] = 1200;
        values[valuesById[1202] = "Sync_C2S_Message"] = 1202;
        values[valuesById[1204] = "Sync_C2S_PaymentOk"] = 1204;
        values[valuesById[2001] = "Req_QuoteSubscribe"] = 2001;
        values[valuesById[2002] = "Rep_QuoteSubscribe"] = 2002;
        values[valuesById[2003] = "Req_QuoteQuery"] = 2003;
        values[valuesById[2004] = "Rep_QuoteQuery"] = 2004;
        values[valuesById[2005] = "Req_QuoteQueryFuture"] = 2005;
        values[valuesById[2006] = "Rep_QuoteQueryFuture"] = 2006;
        values[valuesById[2007] = "Req_IsTradingDay"] = 2007;
        values[valuesById[2008] = "Rep_IsTradingDay"] = 2008;
        values[valuesById[2009] = "Req_QueryTradingDay"] = 2009;
        values[valuesById[2010] = "Rep_QueryTradingDay"] = 2010;
        values[valuesById[2011] = "Req_QueryAiStockList"] = 2011;
        values[valuesById[2012] = "Rep_QueryAiStockList"] = 2012;
        values[valuesById[2013] = "Req_QueryAiSignal"] = 2013;
        values[valuesById[2014] = "Rep_QueryAiSignal"] = 2014;
        values[valuesById[2015] = "Req_EditAiStockList"] = 2015;
        values[valuesById[2016] = "Rep_EditAiStockList"] = 2016;
        values[valuesById[2017] = "Req_RecommendStock"] = 2017;
        values[valuesById[2018] = "Rep_RecommendStock"] = 2018;
        values[valuesById[3001] = "Req_Hall_UploadIcon"] = 3001;
        values[valuesById[3002] = "Rep_Hall_UploadIcon"] = 3002;
        values[valuesById[3003] = "Req_Hall_DownloadIcon"] = 3003;
        values[valuesById[3004] = "Rep_Hall_DownploadIcon"] = 3004;
        values[valuesById[3005] = "Req_Hall_EditIcon"] = 3005;
        values[valuesById[3006] = "Rep_Hall_EditIcon"] = 3006;
        values[valuesById[3007] = "Req_Hall_EditNick"] = 3007;
        values[valuesById[3008] = "Rep_Hall_EditNick"] = 3008;
        values[valuesById[3009] = "Req_Hall_EditLocation"] = 3009;
        values[valuesById[3010] = "Rep_Hall_EditLocation"] = 3010;
        values[valuesById[3011] = "Req_Hall_EditGender"] = 3011;
        values[valuesById[3012] = "Rep_Hall_EditGender"] = 3012;
        values[valuesById[3013] = "Req_Hall_BackBag"] = 3013;
        values[valuesById[3014] = "Rep_Hall_BackBag"] = 3014;
        values[valuesById[3015] = "Req_Hall_GetItem"] = 3015;
        values[valuesById[3016] = "Rep_Hall_GetItem"] = 3016;
        values[valuesById[3017] = "Req_Hall_EditFavorList"] = 3017;
        values[valuesById[3018] = "Rep_Hall_EditFavorList"] = 3018;
        values[valuesById[3019] = "Req_Hall_QueryPlayer"] = 3019;
        values[valuesById[3020] = "Rep_Hall_QueryPlayer"] = 3020;
        values[valuesById[3021] = "Req_Hall_SaveStudyProgress"] = 3021;
        values[valuesById[3022] = "Rep_Hall_SaveStudyProgress"] = 3022;
        values[valuesById[3023] = "Req_Hall_GetDailyTaskAward"] = 3023;
        values[valuesById[3024] = "Rep_Hall_GetDailyTaskAward"] = 3024;
        values[valuesById[3025] = "Req_Hall_UnlockGame"] = 3025;
        values[valuesById[3026] = "Rep_Hall_UnlockGame"] = 3026;
        values[valuesById[3027] = "Req_Hall_GetWeeklyAward"] = 3027;
        values[valuesById[3028] = "Rep_Hall_GetWeeklyAward"] = 3028;
        values[valuesById[3029] = "Req_Hall_QueryEventLog"] = 3029;
        values[valuesById[3030] = "Rep_Hall_QueryEventLog"] = 3030;
        values[valuesById[3031] = "Req_Hall_ShopOrder"] = 3031;
        values[valuesById[3032] = "Rep_Hall_ShopOrder"] = 3032;
        values[valuesById[3033] = "Req_Hall_ShopOrderQuery"] = 3033;
        values[valuesById[3034] = "Rep_Hall_ShopOrderQuery"] = 3034;
        values[valuesById[3035] = "Req_Hall_MobileBind"] = 3035;
        values[valuesById[3036] = "Rep_Hall_MobileBind"] = 3036;
        values[valuesById[3037] = "Req_Hall_ResetGameCounter"] = 3037;
        values[valuesById[3038] = "Rep_Hall_ResetGameCounter"] = 3038;
        values[valuesById[3039] = "Req_Hall_GetLevelRanking"] = 3039;
        values[valuesById[3040] = "Rep_Hall_GetLevelRanking"] = 3040;
        values[valuesById[3041] = "Req_Hall_GetFameRanking"] = 3041;
        values[valuesById[3042] = "Rep_Hall_GetFameRanking"] = 3042;
        values[valuesById[3043] = "Req_Hall_GetFameRankingWeekly"] = 3043;
        values[valuesById[3044] = "Rep_Hall_GetFameRankingWeekly"] = 3044;
        values[valuesById[3045] = "Req_Hall_GetActivityLogs"] = 3045;
        values[valuesById[3046] = "Rep_Hall_GetActivityLogs"] = 3046;
        values[valuesById[3047] = "Req_Hall_GetDailyAdAward"] = 3047;
        values[valuesById[3048] = "Rep_Hall_GetDailyAdAward"] = 3048;
        values[valuesById[3049] = "Req_Hall_Get7Award"] = 3049;
        values[valuesById[3050] = "Rep_Hall_Get7Award"] = 3050;
        values[valuesById[3051] = "Req_Hall_GetBrokenAward"] = 3051;
        values[valuesById[3052] = "Rep_Hall_GetBrokenAward"] = 3052;
        values[valuesById[3053] = "Req_Hall_Exchange"] = 3053;
        values[valuesById[3054] = "Rep_Hall_Exchange"] = 3054;
        values[valuesById[3055] = "Req_Hall_GetInviterAward"] = 3055;
        values[valuesById[3056] = "Rep_Hall_GetInviterAward"] = 3056;
        values[valuesById[3997] = "Req_Hall_Unregistry"] = 3997;
        values[valuesById[3998] = "Rep_Hall_Unregistry"] = 3998;
        values[valuesById[3999] = "Req_Hall_Logout"] = 3999;
        values[valuesById[4000] = "Rep_Hall_Logout"] = 4000;
        values[valuesById[4001] = "Req_Game_Login"] = 4001;
        values[valuesById[4002] = "Rep_Game_Login"] = 4002;
        values[valuesById[4003] = "Req_Game_Start"] = 4003;
        values[valuesById[4004] = "Rep_Game_Start"] = 4004;
        values[valuesById[4005] = "Req_Game_Over"] = 4005;
        values[valuesById[4006] = "Rep_Game_Over"] = 4006;
        values[valuesById[4007] = "Req_Game_QueryGameResult"] = 4007;
        values[valuesById[4008] = "Rep_Game_QueryGameResult"] = 4008;
        values[valuesById[4009] = "Req_Game_GetGameOperation"] = 4009;
        values[valuesById[4010] = "Rep_Game_GetGameOperation"] = 4010;
        values[valuesById[4011] = "Req_Game_SmxlReport"] = 4011;
        values[valuesById[4012] = "Rep_Game_SmxlReport"] = 4012;
        values[valuesById[4013] = "Req_Game_SmxlReset"] = 4013;
        values[valuesById[4014] = "Rep_Game_SmxlReset"] = 4014;
        values[valuesById[4015] = "Req_Game_CgsGetConf"] = 4015;
        values[valuesById[4016] = "Rep_Game_CgsGetConf"] = 4016;
        values[valuesById[4017] = "Req_Game_CgsGetClearanceRank"] = 4017;
        values[valuesById[4018] = "Rep_Game_CgsGetClearanceRank"] = 4018;
        values[valuesById[4019] = "Req_Game_CgsGetStageRank"] = 4019;
        values[valuesById[4020] = "Rep_Game_CgsGetStageRank"] = 4020;
        values[valuesById[4021] = "Req_Game_CgsGetSeasonRank"] = 4021;
        values[valuesById[4022] = "Rep_Game_CgsGetSeasonRank"] = 4022;
        values[valuesById[4023] = "Req_Game_CgsGetStageAward"] = 4023;
        values[valuesById[4024] = "Rep_Game_CgsGetStageAward"] = 4024;
        values[valuesById[4025] = "Req_Game_OrderQuery"] = 4025;
        values[valuesById[4026] = "Rep_Game_OrderQuery"] = 4026;
        values[valuesById[4027] = "Req_Game_Order"] = 4027;
        values[valuesById[4028] = "Rep_Game_Order"] = 4028;
        values[valuesById[4029] = "Req_Game_OrderCancel"] = 4029;
        values[valuesById[4030] = "Rep_Game_OrderCancel"] = 4030;
        values[valuesById[4031] = "Req_Game_MncgExchange"] = 4031;
        values[valuesById[4032] = "Rep_Game_MncgExchange"] = 4032;
        values[valuesById[4033] = "Req_Game_MncgEditStockList"] = 4033;
        values[valuesById[4034] = "Rep_Game_MncgEditStockList"] = 4034;
        values[valuesById[4035] = "Req_Game_CgdsList"] = 4035;
        values[valuesById[4036] = "Rep_Game_CgdsList"] = 4036;
        values[valuesById[4037] = "Req_Game_CgdsReg"] = 4037;
        values[valuesById[4038] = "Rep_Game_CgdsReg"] = 4038;
        values[valuesById[4039] = "Req_Game_CgdsRanking"] = 4039;
        values[valuesById[4040] = "Rep_Game_CgdsRanking"] = 4040;
        values[valuesById[4041] = "Req_Game_ZsjcBettingList"] = 4041;
        values[valuesById[4042] = "Rep_Game_ZsjcBettingList"] = 4042;
        values[valuesById[4043] = "Req_Game_ZsjcBet"] = 4043;
        values[valuesById[4044] = "Rep_Game_ZsjcBet"] = 4044;
        values[valuesById[4045] = "Req_Game_ZsjcRanking"] = 4045;
        values[valuesById[4046] = "Rep_Game_ZsjcRanking"] = 4046;
        values[valuesById[4047] = "Req_Game_ZsjcPlayerBettingList"] = 4047;
        values[valuesById[4048] = "Rep_Game_ZsjcPlayerBettingList"] = 4048;
        values[valuesById[4049] = "Req_Game_ZsjcBettingResultList"] = 4049;
        values[valuesById[4050] = "Rep_Game_ZsjcBettingResultList"] = 4050;
        values[valuesById[5003] = "Req_Room_Create"] = 5003;
        values[valuesById[5004] = "Rep_Room_Create"] = 5004;
        values[valuesById[5005] = "Req_Room_Enter"] = 5005;
        values[valuesById[5006] = "Rep_Room_Enter"] = 5006;
        values[valuesById[5007] = "Req_Room_Leave"] = 5007;
        values[valuesById[5008] = "Rep_Room_Leave"] = 5008;
        values[valuesById[5009] = "Req_Room_Ready"] = 5009;
        values[valuesById[5010] = "Rep_Room_Ready"] = 5010;
        values[valuesById[5200] = "Sync_Room_Enter"] = 5200;
        values[valuesById[5202] = "Sync_Room_Leave"] = 5202;
        values[valuesById[5204] = "Sync_Room_Enter_Self"] = 5204;
        values[valuesById[5206] = "Sync_Room_Leave_Self"] = 5206;
        values[valuesById[5208] = "Sync_Room_LostConn"] = 5208;
        values[valuesById[5210] = "Sync_Room_ReConn"] = 5210;
        values[valuesById[5212] = "Sync_Room_Ready"] = 5212;
        values[valuesById[5214] = "Sync_Room_GameStatus"] = 5214;
        values[valuesById[5216] = "Sync_Room_GameOp"] = 5216;
        values[valuesById[5218] = "Sync_Room_GameResult"] = 5218;
        values[valuesById[10001] = "S2S_HeartBeat"] = 10001;
        values[valuesById[10003] = "S2S_Update_PlayerProperty"] = 10003;
        values[valuesById[10005] = "S2S_Update_PlayerGameCounter"] = 10005;
        values[valuesById[10007] = "S2S_OrderCancel"] = 10007;
        values[valuesById[10009] = "S2S_Sync_Cgds"] = 10009;
        values[valuesById[10011] = "S2S_Set_CgdsTitle"] = 10011;
        values[valuesById[10013] = "S2S_Set_CgdsLogo"] = 10013;
        values[valuesById[10015] = "S2S_Set_CgdsUrl"] = 10015;
        values[valuesById[10017] = "S2S_Set_CgdsConf"] = 10017;
        values[valuesById[10019] = "S2S_Set_CgdsAward"] = 10019;
        values[valuesById[10021] = "S2S_Open_Cgds"] = 10021;
        values[valuesById[10023] = "S2S_Close_Cgds"] = 10023;
        values[valuesById[10025] = "S2S_Reload_Cgds"] = 10025;
        values[valuesById[10027] = "S2S_Reload_GameConf"] = 10027;
        values[valuesById[10028] = "S2S_Sync_ZsjcBetting"] = 10028;
        values[valuesById[10030] = "S2S_Sync_ZsjcState"] = 10030;
        values[valuesById[10032] = "S2S_Update_DailyTaskProgress"] = 10032;
        values[valuesById[10034] = "S2S_Sync_Pay"] = 10034;
        values[valuesById[10036] = "S2S_Sync_PaymentQuery"] = 10036;
        return values;
    })();

    pb.MessageHead = (function () {

        /**
         * Properties of a MessageHead.
         * @memberof pb
         * @interface IMessageHead
         * @property {number|null} [messageId] MessageHead messageId
         * @property {number|null} [messageLen] MessageHead messageLen
         */

        /**
         * Constructs a new MessageHead.
         * @memberof pb
         * @classdesc Represents a MessageHead.
         * @implements IMessageHead
         * @constructor
         * @param {pb.IMessageHead=} [properties] Properties to set
         */
        function MessageHead(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageHead messageId.
         * @member {number} messageId
         * @memberof pb.MessageHead
         * @instance
         */
        MessageHead.prototype.messageId = 0;

        /**
         * MessageHead messageLen.
         * @member {number} messageLen
         * @memberof pb.MessageHead
         * @instance
         */
        MessageHead.prototype.messageLen = 0;

        /**
         * Creates a new MessageHead instance using the specified properties.
         * @function create
         * @memberof pb.MessageHead
         * @static
         * @param {pb.IMessageHead=} [properties] Properties to set
         * @returns {pb.MessageHead} MessageHead instance
         */
        MessageHead.create = function create(properties) {
            return new MessageHead(properties);
        };

        /**
         * Encodes the specified MessageHead message. Does not implicitly {@link pb.MessageHead.verify|verify} messages.
         * @function encode
         * @memberof pb.MessageHead
         * @static
         * @param {pb.IMessageHead} message MessageHead message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageHead.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 5 =*/13).sfixed32(message.messageId);
            if (message.messageLen != null && Object.hasOwnProperty.call(message, "messageLen"))
                writer.uint32(/* id 2, wireType 5 =*/21).sfixed32(message.messageLen);
            return writer;
        };

        /**
         * Encodes the specified MessageHead message, length delimited. Does not implicitly {@link pb.MessageHead.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.MessageHead
         * @static
         * @param {pb.IMessageHead} message MessageHead message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageHead.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageHead message from the specified reader or buffer.
         * @function decode
         * @memberof pb.MessageHead
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.MessageHead} MessageHead
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageHead.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.MessageHead();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.messageId = reader.sfixed32();
                        break;
                    case 2:
                        message.messageLen = reader.sfixed32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageHead message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.MessageHead
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.MessageHead} MessageHead
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageHead.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageHead message.
         * @function verify
         * @memberof pb.MessageHead
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageHead.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.messageLen != null && message.hasOwnProperty("messageLen"))
                if (!$util.isInteger(message.messageLen))
                    return "messageLen: integer expected";
            return null;
        };

        /**
         * Creates a MessageHead message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.MessageHead
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.MessageHead} MessageHead
         */
        MessageHead.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.MessageHead)
                return object;
            var message = new $root.pb.MessageHead();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.messageLen != null)
                message.messageLen = object.messageLen | 0;
            return message;
        };

        /**
         * Creates a plain object from a MessageHead message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.MessageHead
         * @static
         * @param {pb.MessageHead} message MessageHead
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageHead.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.messageId = 0;
                object.messageLen = 0;
            }
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            if (message.messageLen != null && message.hasOwnProperty("messageLen"))
                object.messageLen = message.messageLen;
            return object;
        };

        /**
         * Converts this MessageHead to JSON.
         * @function toJSON
         * @memberof pb.MessageHead
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageHead.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MessageHead;
    })();

    pb.ErrorInfo = (function () {

        /**
         * Properties of an ErrorInfo.
         * @memberof pb
         * @interface IErrorInfo
         * @property {number|null} [code] ErrorInfo code
         * @property {string|null} [err] ErrorInfo err
         */

        /**
         * Constructs a new ErrorInfo.
         * @memberof pb
         * @classdesc Represents an ErrorInfo.
         * @implements IErrorInfo
         * @constructor
         * @param {pb.IErrorInfo=} [properties] Properties to set
         */
        function ErrorInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ErrorInfo code.
         * @member {number} code
         * @memberof pb.ErrorInfo
         * @instance
         */
        ErrorInfo.prototype.code = 0;

        /**
         * ErrorInfo err.
         * @member {string} err
         * @memberof pb.ErrorInfo
         * @instance
         */
        ErrorInfo.prototype.err = "";

        /**
         * Creates a new ErrorInfo instance using the specified properties.
         * @function create
         * @memberof pb.ErrorInfo
         * @static
         * @param {pb.IErrorInfo=} [properties] Properties to set
         * @returns {pb.ErrorInfo} ErrorInfo instance
         */
        ErrorInfo.create = function create(properties) {
            return new ErrorInfo(properties);
        };

        /**
         * Encodes the specified ErrorInfo message. Does not implicitly {@link pb.ErrorInfo.verify|verify} messages.
         * @function encode
         * @memberof pb.ErrorInfo
         * @static
         * @param {pb.IErrorInfo} message ErrorInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ErrorInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.err);
            return writer;
        };

        /**
         * Encodes the specified ErrorInfo message, length delimited. Does not implicitly {@link pb.ErrorInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ErrorInfo
         * @static
         * @param {pb.IErrorInfo} message ErrorInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ErrorInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ErrorInfo message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ErrorInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ErrorInfo} ErrorInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ErrorInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ErrorInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.err = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an ErrorInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ErrorInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ErrorInfo} ErrorInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ErrorInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ErrorInfo message.
         * @function verify
         * @memberof pb.ErrorInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ErrorInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.err != null && message.hasOwnProperty("err"))
                if (!$util.isString(message.err))
                    return "err: string expected";
            return null;
        };

        /**
         * Creates an ErrorInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ErrorInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ErrorInfo} ErrorInfo
         */
        ErrorInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ErrorInfo)
                return object;
            var message = new $root.pb.ErrorInfo();
            if (object.code != null)
                message.code = object.code | 0;
            if (object.err != null)
                message.err = String(object.err);
            return message;
        };

        /**
         * Creates a plain object from an ErrorInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ErrorInfo
         * @static
         * @param {pb.ErrorInfo} message ErrorInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ErrorInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.err = "";
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = message.err;
            return object;
        };

        /**
         * Converts this ErrorInfo to JSON.
         * @function toJSON
         * @memberof pb.ErrorInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ErrorInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ErrorInfo;
    })();

    pb.VoidRequest = (function () {

        /**
         * Properties of a VoidRequest.
         * @memberof pb
         * @interface IVoidRequest
         */

        /**
         * Constructs a new VoidRequest.
         * @memberof pb
         * @classdesc Represents a VoidRequest.
         * @implements IVoidRequest
         * @constructor
         * @param {pb.IVoidRequest=} [properties] Properties to set
         */
        function VoidRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new VoidRequest instance using the specified properties.
         * @function create
         * @memberof pb.VoidRequest
         * @static
         * @param {pb.IVoidRequest=} [properties] Properties to set
         * @returns {pb.VoidRequest} VoidRequest instance
         */
        VoidRequest.create = function create(properties) {
            return new VoidRequest(properties);
        };

        /**
         * Encodes the specified VoidRequest message. Does not implicitly {@link pb.VoidRequest.verify|verify} messages.
         * @function encode
         * @memberof pb.VoidRequest
         * @static
         * @param {pb.IVoidRequest} message VoidRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoidRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified VoidRequest message, length delimited. Does not implicitly {@link pb.VoidRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.VoidRequest
         * @static
         * @param {pb.IVoidRequest} message VoidRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoidRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VoidRequest message from the specified reader or buffer.
         * @function decode
         * @memberof pb.VoidRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.VoidRequest} VoidRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoidRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.VoidRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a VoidRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.VoidRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.VoidRequest} VoidRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoidRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VoidRequest message.
         * @function verify
         * @memberof pb.VoidRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VoidRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a VoidRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.VoidRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.VoidRequest} VoidRequest
         */
        VoidRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.VoidRequest)
                return object;
            return new $root.pb.VoidRequest();
        };

        /**
         * Creates a plain object from a VoidRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.VoidRequest
         * @static
         * @param {pb.VoidRequest} message VoidRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VoidRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this VoidRequest to JSON.
         * @function toJSON
         * @memberof pb.VoidRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VoidRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VoidRequest;
    })();

    pb.VoidReply = (function () {

        /**
         * Properties of a VoidReply.
         * @memberof pb
         * @interface IVoidReply
         */

        /**
         * Constructs a new VoidReply.
         * @memberof pb
         * @classdesc Represents a VoidReply.
         * @implements IVoidReply
         * @constructor
         * @param {pb.IVoidReply=} [properties] Properties to set
         */
        function VoidReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new VoidReply instance using the specified properties.
         * @function create
         * @memberof pb.VoidReply
         * @static
         * @param {pb.IVoidReply=} [properties] Properties to set
         * @returns {pb.VoidReply} VoidReply instance
         */
        VoidReply.create = function create(properties) {
            return new VoidReply(properties);
        };

        /**
         * Encodes the specified VoidReply message. Does not implicitly {@link pb.VoidReply.verify|verify} messages.
         * @function encode
         * @memberof pb.VoidReply
         * @static
         * @param {pb.IVoidReply} message VoidReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoidReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified VoidReply message, length delimited. Does not implicitly {@link pb.VoidReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.VoidReply
         * @static
         * @param {pb.IVoidReply} message VoidReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoidReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VoidReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.VoidReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.VoidReply} VoidReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoidReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.VoidReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a VoidReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.VoidReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.VoidReply} VoidReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoidReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VoidReply message.
         * @function verify
         * @memberof pb.VoidReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VoidReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a VoidReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.VoidReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.VoidReply} VoidReply
         */
        VoidReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.VoidReply)
                return object;
            return new $root.pb.VoidReply();
        };

        /**
         * Creates a plain object from a VoidReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.VoidReply
         * @static
         * @param {pb.VoidReply} message VoidReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VoidReply.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this VoidReply to JSON.
         * @function toJSON
         * @memberof pb.VoidReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VoidReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VoidReply;
    })();

    /**
     * FeeType enum.
     * @name pb.FeeType
     * @enum {number}
     * @property {number} FeeType_NULL=0 FeeType_NULL value
     * @property {number} FeeType_RMB=1 FeeType_RMB value
     * @property {number} FeeType_Diamond=2 FeeType_Diamond value
     * @property {number} FeeType_Coupon=3 FeeType_Coupon value
     */
    pb.FeeType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FeeType_NULL"] = 0;
        values[valuesById[1] = "FeeType_RMB"] = 1;
        values[valuesById[2] = "FeeType_Diamond"] = 2;
        values[valuesById[3] = "FeeType_Coupon"] = 3;
        return values;
    })();

    /**
     * PaymentType enum.
     * @name pb.PaymentType
     * @enum {number}
     * @property {number} PaymentType_NULL=0 PaymentType_NULL value
     * @property {number} WechatPay=1 WechatPay value
     * @property {number} ApplePay=2 ApplePay value
     * @property {number} WechatMiniPay=3 WechatMiniPay value
     */
    pb.PaymentType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PaymentType_NULL"] = 0;
        values[valuesById[1] = "WechatPay"] = 1;
        values[valuesById[2] = "ApplePay"] = 2;
        values[valuesById[3] = "WechatMiniPay"] = 3;
        return values;
    })();

    /**
     * ItemOrderState enum.
     * @name pb.ItemOrderState
     * @enum {number}
     * @property {number} ItemOrderState_Init=0 ItemOrderState_Init value
     * @property {number} Pay=1 Pay value
     * @property {number} EMS=2 EMS value
     */
    pb.ItemOrderState = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ItemOrderState_Init"] = 0;
        values[valuesById[1] = "Pay"] = 1;
        values[valuesById[2] = "EMS"] = 2;
        return values;
    })();

    /**
     * MessageType enum.
     * @name pb.MessageType
     * @enum {number}
     * @property {number} MessageType_NULL=0 MessageType_NULL value
     * @property {number} SystemNotice=1 SystemNotice value
     * @property {number} Popup_Adv=2 Popup_Adv value
     * @property {number} Chat=9 Chat value
     * @property {number} RoomChat=10 RoomChat value
     * @property {number} RoomInvite=11 RoomInvite value
     */
    pb.MessageType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MessageType_NULL"] = 0;
        values[valuesById[1] = "SystemNotice"] = 1;
        values[valuesById[2] = "Popup_Adv"] = 2;
        values[valuesById[9] = "Chat"] = 9;
        values[valuesById[10] = "RoomChat"] = 10;
        values[valuesById[11] = "RoomInvite"] = 11;
        return values;
    })();

    /**
     * GameType enum.
     * @name pb.GameType
     * @enum {number}
     * @property {number} GameType_NULL=0 GameType_NULL value
     * @property {number} ShuangMang=3 ShuangMang value
     * @property {number} DingXiang=4 DingXiang value
     * @property {number} FenShi=5 FenShi value
     * @property {number} ZhiBiao=10 ZhiBiao value
     * @property {number} TiaoJianDan=11 TiaoJianDan value
     * @property {number} QiHuo=6 QiHuo value
     * @property {number} TiaoZhan=16 TiaoZhan value
     * @property {number} JJ_PK=1 JJ_PK value
     * @property {number} JJ_DuoKong=2 JJ_DuoKong value
     * @property {number} JJ_ChuangGuan=9 JJ_ChuangGuan value
     * @property {number} JJ_QiHuo=15 JJ_QiHuo value
     * @property {number} MoNiChaoGu=12 MoNiChaoGu value
     * @property {number} ChaoGuDaSai=13 ChaoGuDaSai value
     * @property {number} GeGuJingChai=7 GeGuJingChai value
     * @property {number} DaPanJingChai=8 DaPanJingChai value
     * @property {number} MaxGameType=30 MaxGameType value
     */
    pb.GameType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GameType_NULL"] = 0;
        values[valuesById[3] = "ShuangMang"] = 3;
        values[valuesById[4] = "DingXiang"] = 4;
        values[valuesById[5] = "FenShi"] = 5;
        values[valuesById[10] = "ZhiBiao"] = 10;
        values[valuesById[11] = "TiaoJianDan"] = 11;
        values[valuesById[6] = "QiHuo"] = 6;
        values[valuesById[16] = "TiaoZhan"] = 16;
        values[valuesById[1] = "JJ_PK"] = 1;
        values[valuesById[2] = "JJ_DuoKong"] = 2;
        values[valuesById[9] = "JJ_ChuangGuan"] = 9;
        values[valuesById[15] = "JJ_QiHuo"] = 15;
        values[valuesById[12] = "MoNiChaoGu"] = 12;
        values[valuesById[13] = "ChaoGuDaSai"] = 13;
        values[valuesById[7] = "GeGuJingChai"] = 7;
        values[valuesById[8] = "DaPanJingChai"] = 8;
        values[valuesById[30] = "MaxGameType"] = 30;
        return values;
    })();

    /**
     * GamePropertyId enum.
     * @name pb.GamePropertyId
     * @enum {number}
     * @property {number} Gold=0 Gold value
     * @property {number} Diamond=1 Diamond value
     * @property {number} Vip=2 Vip value
     * @property {number} Exp=3 Exp value
     * @property {number} Level=4 Level value
     * @property {number} Fame=5 Fame value
     * @property {number} Coupon=6 Coupon value
     * @property {number} SVip=7 SVip value
     * @property {number} UnlockDxxl=20 UnlockDxxl value
     * @property {number} UnlockQhxl=21 UnlockQhxl value
     * @property {number} UnlockTjdxl=22 UnlockTjdxl value
     * @property {number} UnlockZbxl=23 UnlockZbxl value
     * @property {number} SVipExpiration=25 SVipExpiration value
     * @property {number} K=26 K value
     * @property {number} Tester=27 Tester value
     * @property {number} VipExpiration=28 VipExpiration value
     * @property {number} RMB=29 RMB value
     * @property {number} Max=30 Max value
     */
    pb.GamePropertyId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Gold"] = 0;
        values[valuesById[1] = "Diamond"] = 1;
        values[valuesById[2] = "Vip"] = 2;
        values[valuesById[3] = "Exp"] = 3;
        values[valuesById[4] = "Level"] = 4;
        values[valuesById[5] = "Fame"] = 5;
        values[valuesById[6] = "Coupon"] = 6;
        values[valuesById[7] = "SVip"] = 7;
        values[valuesById[20] = "UnlockDxxl"] = 20;
        values[valuesById[21] = "UnlockQhxl"] = 21;
        values[valuesById[22] = "UnlockTjdxl"] = 22;
        values[valuesById[23] = "UnlockZbxl"] = 23;
        values[valuesById[25] = "SVipExpiration"] = 25;
        values[valuesById[26] = "K"] = 26;
        values[valuesById[27] = "Tester"] = 27;
        values[valuesById[28] = "VipExpiration"] = 28;
        values[valuesById[29] = "RMB"] = 29;
        values[valuesById[30] = "Max"] = 30;
        return values;
    })();

    /**
     * EventId enum.
     * @name pb.EventId
     * @enum {number}
     * @property {number} EventId_NULL=0 EventId_NULL value
     * @property {number} EventId_WeeklyAward=1 EventId_WeeklyAward value
     * @property {number} EventId_Zsjc=2 EventId_Zsjc value
     */
    pb.EventId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "EventId_NULL"] = 0;
        values[valuesById[1] = "EventId_WeeklyAward"] = 1;
        values[valuesById[2] = "EventId_Zsjc"] = 2;
        return values;
    })();

    /**
     * TaskId enum.
     * @name pb.TaskId
     * @enum {number}
     * @property {number} Pk=0 Pk value
     * @property {number} Dk=1 Dk value
     * @property {number} Zsjc=2 Zsjc value
     * @property {number} Ggjc=3 Ggjc value
     * @property {number} Cg=4 Cg value
     * @property {number} MaxDailyTaskId=5 MaxDailyTaskId value
     * @property {number} MaxStudyTaskId=8 MaxStudyTaskId value
     */
    pb.TaskId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Pk"] = 0;
        values[valuesById[1] = "Dk"] = 1;
        values[valuesById[2] = "Zsjc"] = 2;
        values[valuesById[3] = "Ggjc"] = 3;
        values[valuesById[4] = "Cg"] = 4;
        values[valuesById[5] = "MaxDailyTaskId"] = 5;
        values[valuesById[8] = "MaxStudyTaskId"] = 8;
        return values;
    })();

    /**
     * GameOperationId enum.
     * @name pb.GameOperationId
     * @enum {number}
     * @property {number} GameOperationId_NULL=0 GameOperationId_NULL value
     * @property {number} Ask=1 Ask value
     * @property {number} Bid=2 Bid value
     * @property {number} Wait=3 Wait value
     * @property {number} Hold=4 Hold value
     * @property {number} Bid_Force=5 Bid_Force value
     * @property {number} Ask_Force=6 Ask_Force value
     * @property {number} Short=8 Short value
     * @property {number} Long=9 Long value
     * @property {number} END=150 END value
     */
    pb.GameOperationId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GameOperationId_NULL"] = 0;
        values[valuesById[1] = "Ask"] = 1;
        values[valuesById[2] = "Bid"] = 2;
        values[valuesById[3] = "Wait"] = 3;
        values[valuesById[4] = "Hold"] = 4;
        values[valuesById[5] = "Bid_Force"] = 5;
        values[valuesById[6] = "Ask_Force"] = 6;
        values[valuesById[8] = "Short"] = 8;
        values[valuesById[9] = "Long"] = 9;
        values[valuesById[150] = "END"] = 150;
        return values;
    })();

    /**
     * GamePkResult enum.
     * @name pb.GamePkResult
     * @enum {number}
     * @property {number} Draw=0 Draw value
     * @property {number} Win=1 Win value
     * @property {number} Lost=2 Lost value
     * @property {number} Giveup=-1 Giveup value
     */
    pb.GamePkResult = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Draw"] = 0;
        values[valuesById[1] = "Win"] = 1;
        values[valuesById[2] = "Lost"] = 2;
        values[valuesById[-1] = "Giveup"] = -1;
        return values;
    })();

    /**
     * ExchangeType enum.
     * @name pb.ExchangeType
     * @enum {number}
     * @property {number} ExchangeType_NULL=0 ExchangeType_NULL value
     * @property {number} ExchangeType_K2Coupon=1 ExchangeType_K2Coupon value
     * @property {number} ExchangeType_K2Capital=2 ExchangeType_K2Capital value
     */
    pb.ExchangeType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ExchangeType_NULL"] = 0;
        values[valuesById[1] = "ExchangeType_K2Coupon"] = 1;
        values[valuesById[2] = "ExchangeType_K2Capital"] = 2;
        return values;
    })();

    /**
     * ExchangeDirection enum.
     * @name pb.ExchangeDirection
     * @enum {number}
     * @property {number} ExchangeDirection_NULL=0 ExchangeDirection_NULL value
     * @property {number} Forward=1 Forward value
     * @property {number} Reverse=2 Reverse value
     */
    pb.ExchangeDirection = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ExchangeDirection_NULL"] = 0;
        values[valuesById[1] = "Forward"] = 1;
        values[valuesById[2] = "Reverse"] = 2;
        return values;
    })();

    /**
     * OrderType enum.
     * @name pb.OrderType
     * @enum {number}
     * @property {number} OrderType_NULL=0 OrderType_NULL value
     * @property {number} AskMarket=1 AskMarket value
     * @property {number} BidMarket=2 BidMarket value
     * @property {number} AskLimit=3 AskLimit value
     * @property {number} BidLimit=4 BidLimit value
     * @property {number} AskLimit_Cancel=5 AskLimit_Cancel value
     * @property {number} BidLimit_Cancel=6 BidLimit_Cancel value
     * @property {number} BidMarket_Auto=7 BidMarket_Auto value
     */
    pb.OrderType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "OrderType_NULL"] = 0;
        values[valuesById[1] = "AskMarket"] = 1;
        values[valuesById[2] = "BidMarket"] = 2;
        values[valuesById[3] = "AskLimit"] = 3;
        values[valuesById[4] = "BidLimit"] = 4;
        values[valuesById[5] = "AskLimit_Cancel"] = 5;
        values[valuesById[6] = "BidLimit_Cancel"] = 6;
        values[valuesById[7] = "BidMarket_Auto"] = 7;
        return values;
    })();

    /**
     * OrderState enum.
     * @name pb.OrderState
     * @enum {number}
     * @property {number} Init=0 Init value
     * @property {number} Partial=1 Partial value
     * @property {number} Done=2 Done value
     * @property {number} ManulCancel=3 ManulCancel value
     * @property {number} AutoCancel=4 AutoCancel value
     */
    pb.OrderState = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Init"] = 0;
        values[valuesById[1] = "Partial"] = 1;
        values[valuesById[2] = "Done"] = 2;
        values[valuesById[3] = "ManulCancel"] = 3;
        values[valuesById[4] = "AutoCancel"] = 4;
        return values;
    })();

    pb.BackbagGrid = (function () {

        /**
         * Properties of a BackbagGrid.
         * @memberof pb
         * @interface IBackbagGrid
         * @property {string|null} [properties] BackbagGrid properties
         * @property {number|Long|null} [ts] BackbagGrid ts
         * @property {string|null} [memo] BackbagGrid memo
         */

        /**
         * Constructs a new BackbagGrid.
         * @memberof pb
         * @classdesc Represents a BackbagGrid.
         * @implements IBackbagGrid
         * @constructor
         * @param {pb.IBackbagGrid=} [properties] Properties to set
         */
        function BackbagGrid(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BackbagGrid properties.
         * @member {string} properties
         * @memberof pb.BackbagGrid
         * @instance
         */
        BackbagGrid.prototype.properties = "";

        /**
         * BackbagGrid ts.
         * @member {number|Long} ts
         * @memberof pb.BackbagGrid
         * @instance
         */
        BackbagGrid.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * BackbagGrid memo.
         * @member {string} memo
         * @memberof pb.BackbagGrid
         * @instance
         */
        BackbagGrid.prototype.memo = "";

        /**
         * Creates a new BackbagGrid instance using the specified properties.
         * @function create
         * @memberof pb.BackbagGrid
         * @static
         * @param {pb.IBackbagGrid=} [properties] Properties to set
         * @returns {pb.BackbagGrid} BackbagGrid instance
         */
        BackbagGrid.create = function create(properties) {
            return new BackbagGrid(properties);
        };

        /**
         * Encodes the specified BackbagGrid message. Does not implicitly {@link pb.BackbagGrid.verify|verify} messages.
         * @function encode
         * @memberof pb.BackbagGrid
         * @static
         * @param {pb.IBackbagGrid} message BackbagGrid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BackbagGrid.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.properties);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ts);
            if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.memo);
            return writer;
        };

        /**
         * Encodes the specified BackbagGrid message, length delimited. Does not implicitly {@link pb.BackbagGrid.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.BackbagGrid
         * @static
         * @param {pb.IBackbagGrid} message BackbagGrid message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BackbagGrid.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BackbagGrid message from the specified reader or buffer.
         * @function decode
         * @memberof pb.BackbagGrid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.BackbagGrid} BackbagGrid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BackbagGrid.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.BackbagGrid();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.properties = reader.string();
                        break;
                    case 2:
                        message.ts = reader.int64();
                        break;
                    case 3:
                        message.memo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a BackbagGrid message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.BackbagGrid
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.BackbagGrid} BackbagGrid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BackbagGrid.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BackbagGrid message.
         * @function verify
         * @memberof pb.BackbagGrid
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BackbagGrid.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.properties != null && message.hasOwnProperty("properties"))
                if (!$util.isString(message.properties))
                    return "properties: string expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.memo != null && message.hasOwnProperty("memo"))
                if (!$util.isString(message.memo))
                    return "memo: string expected";
            return null;
        };

        /**
         * Creates a BackbagGrid message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.BackbagGrid
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.BackbagGrid} BackbagGrid
         */
        BackbagGrid.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.BackbagGrid)
                return object;
            var message = new $root.pb.BackbagGrid();
            if (object.properties != null)
                message.properties = String(object.properties);
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.memo != null)
                message.memo = String(object.memo);
            return message;
        };

        /**
         * Creates a plain object from a BackbagGrid message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.BackbagGrid
         * @static
         * @param {pb.BackbagGrid} message BackbagGrid
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BackbagGrid.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.properties = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.memo = "";
            }
            if (message.properties != null && message.hasOwnProperty("properties"))
                object.properties = message.properties;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.memo != null && message.hasOwnProperty("memo"))
                object.memo = message.memo;
            return object;
        };

        /**
         * Converts this BackbagGrid to JSON.
         * @function toJSON
         * @memberof pb.BackbagGrid
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BackbagGrid.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BackbagGrid;
    })();

    pb.Backbag = (function () {

        /**
         * Properties of a Backbag.
         * @memberof pb
         * @interface IBackbag
         * @property {Array.<pb.IBackbagGrid>|null} [grids] Backbag grids
         */

        /**
         * Constructs a new Backbag.
         * @memberof pb
         * @classdesc Represents a Backbag.
         * @implements IBackbag
         * @constructor
         * @param {pb.IBackbag=} [properties] Properties to set
         */
        function Backbag(properties) {
            this.grids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Backbag grids.
         * @member {Array.<pb.IBackbagGrid>} grids
         * @memberof pb.Backbag
         * @instance
         */
        Backbag.prototype.grids = $util.emptyArray;

        /**
         * Creates a new Backbag instance using the specified properties.
         * @function create
         * @memberof pb.Backbag
         * @static
         * @param {pb.IBackbag=} [properties] Properties to set
         * @returns {pb.Backbag} Backbag instance
         */
        Backbag.create = function create(properties) {
            return new Backbag(properties);
        };

        /**
         * Encodes the specified Backbag message. Does not implicitly {@link pb.Backbag.verify|verify} messages.
         * @function encode
         * @memberof pb.Backbag
         * @static
         * @param {pb.IBackbag} message Backbag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Backbag.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.grids != null && message.grids.length)
                for (var i = 0; i < message.grids.length; ++i)
                    $root.pb.BackbagGrid.encode(message.grids[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Backbag message, length delimited. Does not implicitly {@link pb.Backbag.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Backbag
         * @static
         * @param {pb.IBackbag} message Backbag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Backbag.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Backbag message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Backbag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Backbag} Backbag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Backbag.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Backbag();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.grids && message.grids.length))
                            message.grids = [];
                        message.grids.push($root.pb.BackbagGrid.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Backbag message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Backbag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Backbag} Backbag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Backbag.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Backbag message.
         * @function verify
         * @memberof pb.Backbag
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Backbag.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.grids != null && message.hasOwnProperty("grids")) {
                if (!Array.isArray(message.grids))
                    return "grids: array expected";
                for (var i = 0; i < message.grids.length; ++i) {
                    var error = $root.pb.BackbagGrid.verify(message.grids[i]);
                    if (error)
                        return "grids." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Backbag message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Backbag
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Backbag} Backbag
         */
        Backbag.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Backbag)
                return object;
            var message = new $root.pb.Backbag();
            if (object.grids) {
                if (!Array.isArray(object.grids))
                    throw TypeError(".pb.Backbag.grids: array expected");
                message.grids = [];
                for (var i = 0; i < object.grids.length; ++i) {
                    if (typeof object.grids[i] !== "object")
                        throw TypeError(".pb.Backbag.grids: object expected");
                    message.grids[i] = $root.pb.BackbagGrid.fromObject(object.grids[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Backbag message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Backbag
         * @static
         * @param {pb.Backbag} message Backbag
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Backbag.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.grids = [];
            if (message.grids && message.grids.length) {
                object.grids = [];
                for (var j = 0; j < message.grids.length; ++j)
                    object.grids[j] = $root.pb.BackbagGrid.toObject(message.grids[j], options);
            }
            return object;
        };

        /**
         * Converts this Backbag to JSON.
         * @function toJSON
         * @memberof pb.Backbag
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Backbag.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Backbag;
    })();

    pb.GameCounter = (function () {

        /**
         * Properties of a GameCounter.
         * @memberof pb
         * @interface IGameCounter
         * @property {pb.GameType|null} [game] GameCounter game
         * @property {number|null} [win] GameCounter win
         * @property {number|null} [lose] GameCounter lose
         */

        /**
         * Constructs a new GameCounter.
         * @memberof pb
         * @classdesc Represents a GameCounter.
         * @implements IGameCounter
         * @constructor
         * @param {pb.IGameCounter=} [properties] Properties to set
         */
        function GameCounter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameCounter game.
         * @member {pb.GameType} game
         * @memberof pb.GameCounter
         * @instance
         */
        GameCounter.prototype.game = 0;

        /**
         * GameCounter win.
         * @member {number} win
         * @memberof pb.GameCounter
         * @instance
         */
        GameCounter.prototype.win = 0;

        /**
         * GameCounter lose.
         * @member {number} lose
         * @memberof pb.GameCounter
         * @instance
         */
        GameCounter.prototype.lose = 0;

        /**
         * Creates a new GameCounter instance using the specified properties.
         * @function create
         * @memberof pb.GameCounter
         * @static
         * @param {pb.IGameCounter=} [properties] Properties to set
         * @returns {pb.GameCounter} GameCounter instance
         */
        GameCounter.create = function create(properties) {
            return new GameCounter(properties);
        };

        /**
         * Encodes the specified GameCounter message. Does not implicitly {@link pb.GameCounter.verify|verify} messages.
         * @function encode
         * @memberof pb.GameCounter
         * @static
         * @param {pb.IGameCounter} message GameCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCounter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.game);
            if (message.win != null && Object.hasOwnProperty.call(message, "win"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.win);
            if (message.lose != null && Object.hasOwnProperty.call(message, "lose"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lose);
            return writer;
        };

        /**
         * Encodes the specified GameCounter message, length delimited. Does not implicitly {@link pb.GameCounter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameCounter
         * @static
         * @param {pb.IGameCounter} message GameCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCounter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameCounter message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameCounter} GameCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCounter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameCounter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.game = reader.int32();
                        break;
                    case 2:
                        message.win = reader.int32();
                        break;
                    case 3:
                        message.lose = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameCounter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameCounter} GameCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCounter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameCounter message.
         * @function verify
         * @memberof pb.GameCounter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameCounter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.win != null && message.hasOwnProperty("win"))
                if (!$util.isInteger(message.win))
                    return "win: integer expected";
            if (message.lose != null && message.hasOwnProperty("lose"))
                if (!$util.isInteger(message.lose))
                    return "lose: integer expected";
            return null;
        };

        /**
         * Creates a GameCounter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameCounter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameCounter} GameCounter
         */
        GameCounter.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameCounter)
                return object;
            var message = new $root.pb.GameCounter();
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.win != null)
                message.win = object.win | 0;
            if (object.lose != null)
                message.lose = object.lose | 0;
            return message;
        };

        /**
         * Creates a plain object from a GameCounter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameCounter
         * @static
         * @param {pb.GameCounter} message GameCounter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameCounter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.win = 0;
                object.lose = 0;
            }
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.win != null && message.hasOwnProperty("win"))
                object.win = message.win;
            if (message.lose != null && message.hasOwnProperty("lose"))
                object.lose = message.lose;
            return object;
        };

        /**
         * Converts this GameCounter to JSON.
         * @function toJSON
         * @memberof pb.GameCounter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameCounter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameCounter;
    })();

    pb.GameCounters = (function () {

        /**
         * Properties of a GameCounters.
         * @memberof pb
         * @interface IGameCounters
         * @property {Array.<pb.IGameCounter>|null} [items] GameCounters items
         */

        /**
         * Constructs a new GameCounters.
         * @memberof pb
         * @classdesc Represents a GameCounters.
         * @implements IGameCounters
         * @constructor
         * @param {pb.IGameCounters=} [properties] Properties to set
         */
        function GameCounters(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameCounters items.
         * @member {Array.<pb.IGameCounter>} items
         * @memberof pb.GameCounters
         * @instance
         */
        GameCounters.prototype.items = $util.emptyArray;

        /**
         * Creates a new GameCounters instance using the specified properties.
         * @function create
         * @memberof pb.GameCounters
         * @static
         * @param {pb.IGameCounters=} [properties] Properties to set
         * @returns {pb.GameCounters} GameCounters instance
         */
        GameCounters.create = function create(properties) {
            return new GameCounters(properties);
        };

        /**
         * Encodes the specified GameCounters message. Does not implicitly {@link pb.GameCounters.verify|verify} messages.
         * @function encode
         * @memberof pb.GameCounters
         * @static
         * @param {pb.IGameCounters} message GameCounters message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCounters.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.GameCounter.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GameCounters message, length delimited. Does not implicitly {@link pb.GameCounters.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameCounters
         * @static
         * @param {pb.IGameCounters} message GameCounters message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCounters.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameCounters message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameCounters
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameCounters} GameCounters
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCounters.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameCounters();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.GameCounter.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameCounters message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameCounters
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameCounters} GameCounters
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCounters.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameCounters message.
         * @function verify
         * @memberof pb.GameCounters
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameCounters.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.GameCounter.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GameCounters message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameCounters
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameCounters} GameCounters
         */
        GameCounters.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameCounters)
                return object;
            var message = new $root.pb.GameCounters();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.GameCounters.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.GameCounters.items: object expected");
                    message.items[i] = $root.pb.GameCounter.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GameCounters message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameCounters
         * @static
         * @param {pb.GameCounters} message GameCounters
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameCounters.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.GameCounter.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GameCounters to JSON.
         * @function toJSON
         * @memberof pb.GameCounters
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameCounters.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameCounters;
    })();

    pb.TodayGameTimes = (function () {

        /**
         * Properties of a TodayGameTimes.
         * @memberof pb
         * @interface ITodayGameTimes
         * @property {Array.<number>|null} [counter] TodayGameTimes counter
         */

        /**
         * Constructs a new TodayGameTimes.
         * @memberof pb
         * @classdesc Represents a TodayGameTimes.
         * @implements ITodayGameTimes
         * @constructor
         * @param {pb.ITodayGameTimes=} [properties] Properties to set
         */
        function TodayGameTimes(properties) {
            this.counter = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TodayGameTimes counter.
         * @member {Array.<number>} counter
         * @memberof pb.TodayGameTimes
         * @instance
         */
        TodayGameTimes.prototype.counter = $util.emptyArray;

        /**
         * Creates a new TodayGameTimes instance using the specified properties.
         * @function create
         * @memberof pb.TodayGameTimes
         * @static
         * @param {pb.ITodayGameTimes=} [properties] Properties to set
         * @returns {pb.TodayGameTimes} TodayGameTimes instance
         */
        TodayGameTimes.create = function create(properties) {
            return new TodayGameTimes(properties);
        };

        /**
         * Encodes the specified TodayGameTimes message. Does not implicitly {@link pb.TodayGameTimes.verify|verify} messages.
         * @function encode
         * @memberof pb.TodayGameTimes
         * @static
         * @param {pb.ITodayGameTimes} message TodayGameTimes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TodayGameTimes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.counter != null && message.counter.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.counter.length; ++i)
                    writer.int32(message.counter[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified TodayGameTimes message, length delimited. Does not implicitly {@link pb.TodayGameTimes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.TodayGameTimes
         * @static
         * @param {pb.ITodayGameTimes} message TodayGameTimes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TodayGameTimes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TodayGameTimes message from the specified reader or buffer.
         * @function decode
         * @memberof pb.TodayGameTimes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.TodayGameTimes} TodayGameTimes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TodayGameTimes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.TodayGameTimes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.counter && message.counter.length))
                            message.counter = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.counter.push(reader.int32());
                        } else
                            message.counter.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a TodayGameTimes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.TodayGameTimes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.TodayGameTimes} TodayGameTimes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TodayGameTimes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TodayGameTimes message.
         * @function verify
         * @memberof pb.TodayGameTimes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TodayGameTimes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.counter != null && message.hasOwnProperty("counter")) {
                if (!Array.isArray(message.counter))
                    return "counter: array expected";
                for (var i = 0; i < message.counter.length; ++i)
                    if (!$util.isInteger(message.counter[i]))
                        return "counter: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a TodayGameTimes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.TodayGameTimes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.TodayGameTimes} TodayGameTimes
         */
        TodayGameTimes.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.TodayGameTimes)
                return object;
            var message = new $root.pb.TodayGameTimes();
            if (object.counter) {
                if (!Array.isArray(object.counter))
                    throw TypeError(".pb.TodayGameTimes.counter: array expected");
                message.counter = [];
                for (var i = 0; i < object.counter.length; ++i)
                    message.counter[i] = object.counter[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a TodayGameTimes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.TodayGameTimes
         * @static
         * @param {pb.TodayGameTimes} message TodayGameTimes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TodayGameTimes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.counter = [];
            if (message.counter && message.counter.length) {
                object.counter = [];
                for (var j = 0; j < message.counter.length; ++j)
                    object.counter[j] = message.counter[j];
            }
            return object;
        };

        /**
         * Converts this TodayGameTimes to JSON.
         * @function toJSON
         * @memberof pb.TodayGameTimes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TodayGameTimes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TodayGameTimes;
    })();

    pb.SmxlState = (function () {

        /**
         * Properties of a SmxlState.
         * @memberof pb
         * @interface ISmxlState
         * @property {number|Long|null} [resetTs] SmxlState resetTs
         * @property {number|null} [resetCounter] SmxlState resetCounter
         * @property {number|Long|null} [resetTsPremonth] SmxlState resetTsPremonth
         * @property {number|Long|null} [lastMonthReportTs] SmxlState lastMonthReportTs
         * @property {number|Long|null} [goldInit] SmxlState goldInit
         * @property {number|Long|null} [gold] SmxlState gold
         * @property {number|Long|null} [todayTs] SmxlState todayTs
         * @property {number|null} [todayTimes] SmxlState todayTimes
         */

        /**
         * Constructs a new SmxlState.
         * @memberof pb
         * @classdesc Represents a SmxlState.
         * @implements ISmxlState
         * @constructor
         * @param {pb.ISmxlState=} [properties] Properties to set
         */
        function SmxlState(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SmxlState resetTs.
         * @member {number|Long} resetTs
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.resetTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState resetCounter.
         * @member {number} resetCounter
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.resetCounter = 0;

        /**
         * SmxlState resetTsPremonth.
         * @member {number|Long} resetTsPremonth
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.resetTsPremonth = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState lastMonthReportTs.
         * @member {number|Long} lastMonthReportTs
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.lastMonthReportTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState goldInit.
         * @member {number|Long} goldInit
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.goldInit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState gold.
         * @member {number|Long} gold
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.gold = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState todayTs.
         * @member {number|Long} todayTs
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.todayTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * SmxlState todayTimes.
         * @member {number} todayTimes
         * @memberof pb.SmxlState
         * @instance
         */
        SmxlState.prototype.todayTimes = 0;

        /**
         * Creates a new SmxlState instance using the specified properties.
         * @function create
         * @memberof pb.SmxlState
         * @static
         * @param {pb.ISmxlState=} [properties] Properties to set
         * @returns {pb.SmxlState} SmxlState instance
         */
        SmxlState.create = function create(properties) {
            return new SmxlState(properties);
        };

        /**
         * Encodes the specified SmxlState message. Does not implicitly {@link pb.SmxlState.verify|verify} messages.
         * @function encode
         * @memberof pb.SmxlState
         * @static
         * @param {pb.ISmxlState} message SmxlState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SmxlState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.resetTs != null && Object.hasOwnProperty.call(message, "resetTs"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.resetTs);
            if (message.resetCounter != null && Object.hasOwnProperty.call(message, "resetCounter"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.resetCounter);
            if (message.resetTsPremonth != null && Object.hasOwnProperty.call(message, "resetTsPremonth"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.resetTsPremonth);
            if (message.lastMonthReportTs != null && Object.hasOwnProperty.call(message, "lastMonthReportTs"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.lastMonthReportTs);
            if (message.goldInit != null && Object.hasOwnProperty.call(message, "goldInit"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.goldInit);
            if (message.gold != null && Object.hasOwnProperty.call(message, "gold"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gold);
            if (message.todayTs != null && Object.hasOwnProperty.call(message, "todayTs"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.todayTs);
            if (message.todayTimes != null && Object.hasOwnProperty.call(message, "todayTimes"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.todayTimes);
            return writer;
        };

        /**
         * Encodes the specified SmxlState message, length delimited. Does not implicitly {@link pb.SmxlState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.SmxlState
         * @static
         * @param {pb.ISmxlState} message SmxlState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SmxlState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SmxlState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.SmxlState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.SmxlState} SmxlState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SmxlState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.SmxlState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.resetTs = reader.int64();
                        break;
                    case 2:
                        message.resetCounter = reader.int32();
                        break;
                    case 3:
                        message.resetTsPremonth = reader.int64();
                        break;
                    case 4:
                        message.lastMonthReportTs = reader.int64();
                        break;
                    case 5:
                        message.goldInit = reader.int64();
                        break;
                    case 6:
                        message.gold = reader.int64();
                        break;
                    case 7:
                        message.todayTs = reader.int64();
                        break;
                    case 8:
                        message.todayTimes = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a SmxlState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.SmxlState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.SmxlState} SmxlState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SmxlState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SmxlState message.
         * @function verify
         * @memberof pb.SmxlState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SmxlState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.resetTs != null && message.hasOwnProperty("resetTs"))
                if (!$util.isInteger(message.resetTs) && !(message.resetTs && $util.isInteger(message.resetTs.low) && $util.isInteger(message.resetTs.high)))
                    return "resetTs: integer|Long expected";
            if (message.resetCounter != null && message.hasOwnProperty("resetCounter"))
                if (!$util.isInteger(message.resetCounter))
                    return "resetCounter: integer expected";
            if (message.resetTsPremonth != null && message.hasOwnProperty("resetTsPremonth"))
                if (!$util.isInteger(message.resetTsPremonth) && !(message.resetTsPremonth && $util.isInteger(message.resetTsPremonth.low) && $util.isInteger(message.resetTsPremonth.high)))
                    return "resetTsPremonth: integer|Long expected";
            if (message.lastMonthReportTs != null && message.hasOwnProperty("lastMonthReportTs"))
                if (!$util.isInteger(message.lastMonthReportTs) && !(message.lastMonthReportTs && $util.isInteger(message.lastMonthReportTs.low) && $util.isInteger(message.lastMonthReportTs.high)))
                    return "lastMonthReportTs: integer|Long expected";
            if (message.goldInit != null && message.hasOwnProperty("goldInit"))
                if (!$util.isInteger(message.goldInit) && !(message.goldInit && $util.isInteger(message.goldInit.low) && $util.isInteger(message.goldInit.high)))
                    return "goldInit: integer|Long expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                    return "gold: integer|Long expected";
            if (message.todayTs != null && message.hasOwnProperty("todayTs"))
                if (!$util.isInteger(message.todayTs) && !(message.todayTs && $util.isInteger(message.todayTs.low) && $util.isInteger(message.todayTs.high)))
                    return "todayTs: integer|Long expected";
            if (message.todayTimes != null && message.hasOwnProperty("todayTimes"))
                if (!$util.isInteger(message.todayTimes))
                    return "todayTimes: integer expected";
            return null;
        };

        /**
         * Creates a SmxlState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.SmxlState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.SmxlState} SmxlState
         */
        SmxlState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.SmxlState)
                return object;
            var message = new $root.pb.SmxlState();
            if (object.resetTs != null)
                if ($util.Long)
                    (message.resetTs = $util.Long.fromValue(object.resetTs)).unsigned = false;
                else if (typeof object.resetTs === "string")
                    message.resetTs = parseInt(object.resetTs, 10);
                else if (typeof object.resetTs === "number")
                    message.resetTs = object.resetTs;
                else if (typeof object.resetTs === "object")
                    message.resetTs = new $util.LongBits(object.resetTs.low >>> 0, object.resetTs.high >>> 0).toNumber();
            if (object.resetCounter != null)
                message.resetCounter = object.resetCounter | 0;
            if (object.resetTsPremonth != null)
                if ($util.Long)
                    (message.resetTsPremonth = $util.Long.fromValue(object.resetTsPremonth)).unsigned = false;
                else if (typeof object.resetTsPremonth === "string")
                    message.resetTsPremonth = parseInt(object.resetTsPremonth, 10);
                else if (typeof object.resetTsPremonth === "number")
                    message.resetTsPremonth = object.resetTsPremonth;
                else if (typeof object.resetTsPremonth === "object")
                    message.resetTsPremonth = new $util.LongBits(object.resetTsPremonth.low >>> 0, object.resetTsPremonth.high >>> 0).toNumber();
            if (object.lastMonthReportTs != null)
                if ($util.Long)
                    (message.lastMonthReportTs = $util.Long.fromValue(object.lastMonthReportTs)).unsigned = false;
                else if (typeof object.lastMonthReportTs === "string")
                    message.lastMonthReportTs = parseInt(object.lastMonthReportTs, 10);
                else if (typeof object.lastMonthReportTs === "number")
                    message.lastMonthReportTs = object.lastMonthReportTs;
                else if (typeof object.lastMonthReportTs === "object")
                    message.lastMonthReportTs = new $util.LongBits(object.lastMonthReportTs.low >>> 0, object.lastMonthReportTs.high >>> 0).toNumber();
            if (object.goldInit != null)
                if ($util.Long)
                    (message.goldInit = $util.Long.fromValue(object.goldInit)).unsigned = false;
                else if (typeof object.goldInit === "string")
                    message.goldInit = parseInt(object.goldInit, 10);
                else if (typeof object.goldInit === "number")
                    message.goldInit = object.goldInit;
                else if (typeof object.goldInit === "object")
                    message.goldInit = new $util.LongBits(object.goldInit.low >>> 0, object.goldInit.high >>> 0).toNumber();
            if (object.gold != null)
                if ($util.Long)
                    (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                else if (typeof object.gold === "string")
                    message.gold = parseInt(object.gold, 10);
                else if (typeof object.gold === "number")
                    message.gold = object.gold;
                else if (typeof object.gold === "object")
                    message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
            if (object.todayTs != null)
                if ($util.Long)
                    (message.todayTs = $util.Long.fromValue(object.todayTs)).unsigned = false;
                else if (typeof object.todayTs === "string")
                    message.todayTs = parseInt(object.todayTs, 10);
                else if (typeof object.todayTs === "number")
                    message.todayTs = object.todayTs;
                else if (typeof object.todayTs === "object")
                    message.todayTs = new $util.LongBits(object.todayTs.low >>> 0, object.todayTs.high >>> 0).toNumber();
            if (object.todayTimes != null)
                message.todayTimes = object.todayTimes | 0;
            return message;
        };

        /**
         * Creates a plain object from a SmxlState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.SmxlState
         * @static
         * @param {pb.SmxlState} message SmxlState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SmxlState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.resetTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.resetTs = options.longs === String ? "0" : 0;
                object.resetCounter = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.resetTsPremonth = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.resetTsPremonth = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastMonthReportTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastMonthReportTs = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.goldInit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.goldInit = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gold = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.todayTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.todayTs = options.longs === String ? "0" : 0;
                object.todayTimes = 0;
            }
            if (message.resetTs != null && message.hasOwnProperty("resetTs"))
                if (typeof message.resetTs === "number")
                    object.resetTs = options.longs === String ? String(message.resetTs) : message.resetTs;
                else
                    object.resetTs = options.longs === String ? $util.Long.prototype.toString.call(message.resetTs) : options.longs === Number ? new $util.LongBits(message.resetTs.low >>> 0, message.resetTs.high >>> 0).toNumber() : message.resetTs;
            if (message.resetCounter != null && message.hasOwnProperty("resetCounter"))
                object.resetCounter = message.resetCounter;
            if (message.resetTsPremonth != null && message.hasOwnProperty("resetTsPremonth"))
                if (typeof message.resetTsPremonth === "number")
                    object.resetTsPremonth = options.longs === String ? String(message.resetTsPremonth) : message.resetTsPremonth;
                else
                    object.resetTsPremonth = options.longs === String ? $util.Long.prototype.toString.call(message.resetTsPremonth) : options.longs === Number ? new $util.LongBits(message.resetTsPremonth.low >>> 0, message.resetTsPremonth.high >>> 0).toNumber() : message.resetTsPremonth;
            if (message.lastMonthReportTs != null && message.hasOwnProperty("lastMonthReportTs"))
                if (typeof message.lastMonthReportTs === "number")
                    object.lastMonthReportTs = options.longs === String ? String(message.lastMonthReportTs) : message.lastMonthReportTs;
                else
                    object.lastMonthReportTs = options.longs === String ? $util.Long.prototype.toString.call(message.lastMonthReportTs) : options.longs === Number ? new $util.LongBits(message.lastMonthReportTs.low >>> 0, message.lastMonthReportTs.high >>> 0).toNumber() : message.lastMonthReportTs;
            if (message.goldInit != null && message.hasOwnProperty("goldInit"))
                if (typeof message.goldInit === "number")
                    object.goldInit = options.longs === String ? String(message.goldInit) : message.goldInit;
                else
                    object.goldInit = options.longs === String ? $util.Long.prototype.toString.call(message.goldInit) : options.longs === Number ? new $util.LongBits(message.goldInit.low >>> 0, message.goldInit.high >>> 0).toNumber() : message.goldInit;
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (typeof message.gold === "number")
                    object.gold = options.longs === String ? String(message.gold) : message.gold;
                else
                    object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
            if (message.todayTs != null && message.hasOwnProperty("todayTs"))
                if (typeof message.todayTs === "number")
                    object.todayTs = options.longs === String ? String(message.todayTs) : message.todayTs;
                else
                    object.todayTs = options.longs === String ? $util.Long.prototype.toString.call(message.todayTs) : options.longs === Number ? new $util.LongBits(message.todayTs.low >>> 0, message.todayTs.high >>> 0).toNumber() : message.todayTs;
            if (message.todayTimes != null && message.hasOwnProperty("todayTimes"))
                object.todayTimes = message.todayTimes;
            return object;
        };

        /**
         * Converts this SmxlState to JSON.
         * @function toJSON
         * @memberof pb.SmxlState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SmxlState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SmxlState;
    })();

    pb.CgLogAward = (function () {

        /**
         * Properties of a CgLogAward.
         * @memberof pb
         * @interface ICgLogAward
         * @property {number|null} [stage] CgLogAward stage
         * @property {boolean|null} [awarded] CgLogAward awarded
         * @property {boolean|null} [gotten] CgLogAward gotten
         */

        /**
         * Constructs a new CgLogAward.
         * @memberof pb
         * @classdesc Represents a CgLogAward.
         * @implements ICgLogAward
         * @constructor
         * @param {pb.ICgLogAward=} [properties] Properties to set
         */
        function CgLogAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgLogAward stage.
         * @member {number} stage
         * @memberof pb.CgLogAward
         * @instance
         */
        CgLogAward.prototype.stage = 0;

        /**
         * CgLogAward awarded.
         * @member {boolean} awarded
         * @memberof pb.CgLogAward
         * @instance
         */
        CgLogAward.prototype.awarded = false;

        /**
         * CgLogAward gotten.
         * @member {boolean} gotten
         * @memberof pb.CgLogAward
         * @instance
         */
        CgLogAward.prototype.gotten = false;

        /**
         * Creates a new CgLogAward instance using the specified properties.
         * @function create
         * @memberof pb.CgLogAward
         * @static
         * @param {pb.ICgLogAward=} [properties] Properties to set
         * @returns {pb.CgLogAward} CgLogAward instance
         */
        CgLogAward.create = function create(properties) {
            return new CgLogAward(properties);
        };

        /**
         * Encodes the specified CgLogAward message. Does not implicitly {@link pb.CgLogAward.verify|verify} messages.
         * @function encode
         * @memberof pb.CgLogAward
         * @static
         * @param {pb.ICgLogAward} message CgLogAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgLogAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stage != null && Object.hasOwnProperty.call(message, "stage"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stage);
            if (message.awarded != null && Object.hasOwnProperty.call(message, "awarded"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.awarded);
            if (message.gotten != null && Object.hasOwnProperty.call(message, "gotten"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.gotten);
            return writer;
        };

        /**
         * Encodes the specified CgLogAward message, length delimited. Does not implicitly {@link pb.CgLogAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgLogAward
         * @static
         * @param {pb.ICgLogAward} message CgLogAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgLogAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgLogAward message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgLogAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgLogAward} CgLogAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgLogAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgLogAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.stage = reader.int32();
                        break;
                    case 2:
                        message.awarded = reader.bool();
                        break;
                    case 3:
                        message.gotten = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgLogAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgLogAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgLogAward} CgLogAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgLogAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgLogAward message.
         * @function verify
         * @memberof pb.CgLogAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgLogAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            if (message.awarded != null && message.hasOwnProperty("awarded"))
                if (typeof message.awarded !== "boolean")
                    return "awarded: boolean expected";
            if (message.gotten != null && message.hasOwnProperty("gotten"))
                if (typeof message.gotten !== "boolean")
                    return "gotten: boolean expected";
            return null;
        };

        /**
         * Creates a CgLogAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgLogAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgLogAward} CgLogAward
         */
        CgLogAward.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgLogAward)
                return object;
            var message = new $root.pb.CgLogAward();
            if (object.stage != null)
                message.stage = object.stage | 0;
            if (object.awarded != null)
                message.awarded = Boolean(object.awarded);
            if (object.gotten != null)
                message.gotten = Boolean(object.gotten);
            return message;
        };

        /**
         * Creates a plain object from a CgLogAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgLogAward
         * @static
         * @param {pb.CgLogAward} message CgLogAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgLogAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stage = 0;
                object.awarded = false;
                object.gotten = false;
            }
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            if (message.awarded != null && message.hasOwnProperty("awarded"))
                object.awarded = message.awarded;
            if (message.gotten != null && message.hasOwnProperty("gotten"))
                object.gotten = message.gotten;
            return object;
        };

        /**
         * Converts this CgLogAward to JSON.
         * @function toJSON
         * @memberof pb.CgLogAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgLogAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgLogAward;
    })();

    pb.CgState = (function () {

        /**
         * Properties of a CgState.
         * @memberof pb
         * @interface ICgState
         * @property {number|Long|null} [seasonId] CgState seasonId
         * @property {number|null} [stage] CgState stage
         * @property {number|null} [progress] CgState progress
         * @property {number|null} [lifes] CgState lifes
         * @property {number|null} [win] CgState win
         * @property {number|null} [lose] CgState lose
         * @property {boolean|null} [clearance] CgState clearance
         * @property {Array.<pb.ICgLogAward>|null} [awards] CgState awards
         */

        /**
         * Constructs a new CgState.
         * @memberof pb
         * @classdesc Represents a CgState.
         * @implements ICgState
         * @constructor
         * @param {pb.ICgState=} [properties] Properties to set
         */
        function CgState(properties) {
            this.awards = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgState seasonId.
         * @member {number|Long} seasonId
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.seasonId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgState stage.
         * @member {number} stage
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.stage = 0;

        /**
         * CgState progress.
         * @member {number} progress
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.progress = 0;

        /**
         * CgState lifes.
         * @member {number} lifes
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.lifes = 0;

        /**
         * CgState win.
         * @member {number} win
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.win = 0;

        /**
         * CgState lose.
         * @member {number} lose
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.lose = 0;

        /**
         * CgState clearance.
         * @member {boolean} clearance
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.clearance = false;

        /**
         * CgState awards.
         * @member {Array.<pb.ICgLogAward>} awards
         * @memberof pb.CgState
         * @instance
         */
        CgState.prototype.awards = $util.emptyArray;

        /**
         * Creates a new CgState instance using the specified properties.
         * @function create
         * @memberof pb.CgState
         * @static
         * @param {pb.ICgState=} [properties] Properties to set
         * @returns {pb.CgState} CgState instance
         */
        CgState.create = function create(properties) {
            return new CgState(properties);
        };

        /**
         * Encodes the specified CgState message. Does not implicitly {@link pb.CgState.verify|verify} messages.
         * @function encode
         * @memberof pb.CgState
         * @static
         * @param {pb.ICgState} message CgState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.seasonId != null && Object.hasOwnProperty.call(message, "seasonId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seasonId);
            if (message.stage != null && Object.hasOwnProperty.call(message, "stage"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stage);
            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.progress);
            if (message.lifes != null && Object.hasOwnProperty.call(message, "lifes"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lifes);
            if (message.win != null && Object.hasOwnProperty.call(message, "win"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.win);
            if (message.lose != null && Object.hasOwnProperty.call(message, "lose"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.lose);
            if (message.clearance != null && Object.hasOwnProperty.call(message, "clearance"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.clearance);
            if (message.awards != null && message.awards.length)
                for (var i = 0; i < message.awards.length; ++i)
                    $root.pb.CgLogAward.encode(message.awards[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CgState message, length delimited. Does not implicitly {@link pb.CgState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgState
         * @static
         * @param {pb.ICgState} message CgState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgState} CgState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.seasonId = reader.int64();
                        break;
                    case 2:
                        message.stage = reader.int32();
                        break;
                    case 3:
                        message.progress = reader.int32();
                        break;
                    case 4:
                        message.lifes = reader.int32();
                        break;
                    case 5:
                        message.win = reader.int32();
                        break;
                    case 6:
                        message.lose = reader.int32();
                        break;
                    case 7:
                        message.clearance = reader.bool();
                        break;
                    case 8:
                        if (!(message.awards && message.awards.length))
                            message.awards = [];
                        message.awards.push($root.pb.CgLogAward.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgState} CgState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgState message.
         * @function verify
         * @memberof pb.CgState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.seasonId != null && message.hasOwnProperty("seasonId"))
                if (!$util.isInteger(message.seasonId) && !(message.seasonId && $util.isInteger(message.seasonId.low) && $util.isInteger(message.seasonId.high)))
                    return "seasonId: integer|Long expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.lifes != null && message.hasOwnProperty("lifes"))
                if (!$util.isInteger(message.lifes))
                    return "lifes: integer expected";
            if (message.win != null && message.hasOwnProperty("win"))
                if (!$util.isInteger(message.win))
                    return "win: integer expected";
            if (message.lose != null && message.hasOwnProperty("lose"))
                if (!$util.isInteger(message.lose))
                    return "lose: integer expected";
            if (message.clearance != null && message.hasOwnProperty("clearance"))
                if (typeof message.clearance !== "boolean")
                    return "clearance: boolean expected";
            if (message.awards != null && message.hasOwnProperty("awards")) {
                if (!Array.isArray(message.awards))
                    return "awards: array expected";
                for (var i = 0; i < message.awards.length; ++i) {
                    var error = $root.pb.CgLogAward.verify(message.awards[i]);
                    if (error)
                        return "awards." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CgState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgState} CgState
         */
        CgState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgState)
                return object;
            var message = new $root.pb.CgState();
            if (object.seasonId != null)
                if ($util.Long)
                    (message.seasonId = $util.Long.fromValue(object.seasonId)).unsigned = false;
                else if (typeof object.seasonId === "string")
                    message.seasonId = parseInt(object.seasonId, 10);
                else if (typeof object.seasonId === "number")
                    message.seasonId = object.seasonId;
                else if (typeof object.seasonId === "object")
                    message.seasonId = new $util.LongBits(object.seasonId.low >>> 0, object.seasonId.high >>> 0).toNumber();
            if (object.stage != null)
                message.stage = object.stage | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.lifes != null)
                message.lifes = object.lifes | 0;
            if (object.win != null)
                message.win = object.win | 0;
            if (object.lose != null)
                message.lose = object.lose | 0;
            if (object.clearance != null)
                message.clearance = Boolean(object.clearance);
            if (object.awards) {
                if (!Array.isArray(object.awards))
                    throw TypeError(".pb.CgState.awards: array expected");
                message.awards = [];
                for (var i = 0; i < object.awards.length; ++i) {
                    if (typeof object.awards[i] !== "object")
                        throw TypeError(".pb.CgState.awards: object expected");
                    message.awards[i] = $root.pb.CgLogAward.fromObject(object.awards[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CgState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgState
         * @static
         * @param {pb.CgState} message CgState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.awards = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.seasonId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.seasonId = options.longs === String ? "0" : 0;
                object.stage = 0;
                object.progress = 0;
                object.lifes = 0;
                object.win = 0;
                object.lose = 0;
                object.clearance = false;
            }
            if (message.seasonId != null && message.hasOwnProperty("seasonId"))
                if (typeof message.seasonId === "number")
                    object.seasonId = options.longs === String ? String(message.seasonId) : message.seasonId;
                else
                    object.seasonId = options.longs === String ? $util.Long.prototype.toString.call(message.seasonId) : options.longs === Number ? new $util.LongBits(message.seasonId.low >>> 0, message.seasonId.high >>> 0).toNumber() : message.seasonId;
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.lifes != null && message.hasOwnProperty("lifes"))
                object.lifes = message.lifes;
            if (message.win != null && message.hasOwnProperty("win"))
                object.win = message.win;
            if (message.lose != null && message.hasOwnProperty("lose"))
                object.lose = message.lose;
            if (message.clearance != null && message.hasOwnProperty("clearance"))
                object.clearance = message.clearance;
            if (message.awards && message.awards.length) {
                object.awards = [];
                for (var j = 0; j < message.awards.length; ++j)
                    object.awards[j] = $root.pb.CgLogAward.toObject(message.awards[j], options);
            }
            return object;
        };

        /**
         * Converts this CgState to JSON.
         * @function toJSON
         * @memberof pb.CgState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgState;
    })();

    pb.MncgState = (function () {

        /**
         * Properties of a MncgState.
         * @memberof pb
         * @interface IMncgState
         * @property {number|null} [account] MncgState account
         * @property {pb.IStockOrderList|null} [orderList] MncgState orderList
         * @property {pb.IStockPositionList|null} [positionList] MncgState positionList
         * @property {Array.<number>|null} [stockList] MncgState stockList
         */

        /**
         * Constructs a new MncgState.
         * @memberof pb
         * @classdesc Represents a MncgState.
         * @implements IMncgState
         * @constructor
         * @param {pb.IMncgState=} [properties] Properties to set
         */
        function MncgState(properties) {
            this.stockList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MncgState account.
         * @member {number} account
         * @memberof pb.MncgState
         * @instance
         */
        MncgState.prototype.account = 0;

        /**
         * MncgState orderList.
         * @member {pb.IStockOrderList|null|undefined} orderList
         * @memberof pb.MncgState
         * @instance
         */
        MncgState.prototype.orderList = null;

        /**
         * MncgState positionList.
         * @member {pb.IStockPositionList|null|undefined} positionList
         * @memberof pb.MncgState
         * @instance
         */
        MncgState.prototype.positionList = null;

        /**
         * MncgState stockList.
         * @member {Array.<number>} stockList
         * @memberof pb.MncgState
         * @instance
         */
        MncgState.prototype.stockList = $util.emptyArray;

        /**
         * Creates a new MncgState instance using the specified properties.
         * @function create
         * @memberof pb.MncgState
         * @static
         * @param {pb.IMncgState=} [properties] Properties to set
         * @returns {pb.MncgState} MncgState instance
         */
        MncgState.create = function create(properties) {
            return new MncgState(properties);
        };

        /**
         * Encodes the specified MncgState message. Does not implicitly {@link pb.MncgState.verify|verify} messages.
         * @function encode
         * @memberof pb.MncgState
         * @static
         * @param {pb.IMncgState} message MncgState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MncgState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.account);
            if (message.orderList != null && Object.hasOwnProperty.call(message, "orderList"))
                $root.pb.StockOrderList.encode(message.orderList, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.positionList != null && Object.hasOwnProperty.call(message, "positionList"))
                $root.pb.StockPositionList.encode(message.positionList, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.stockList != null && message.stockList.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.stockList.length; ++i)
                    writer.int32(message.stockList[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified MncgState message, length delimited. Does not implicitly {@link pb.MncgState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.MncgState
         * @static
         * @param {pb.IMncgState} message MncgState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MncgState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MncgState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.MncgState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.MncgState} MncgState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MncgState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.MncgState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.double();
                        break;
                    case 2:
                        message.orderList = $root.pb.StockOrderList.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.positionList = $root.pb.StockPositionList.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.stockList && message.stockList.length))
                            message.stockList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stockList.push(reader.int32());
                        } else
                            message.stockList.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a MncgState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.MncgState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.MncgState} MncgState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MncgState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MncgState message.
         * @function verify
         * @memberof pb.MncgState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MncgState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (typeof message.account !== "number")
                    return "account: number expected";
            if (message.orderList != null && message.hasOwnProperty("orderList")) {
                var error = $root.pb.StockOrderList.verify(message.orderList);
                if (error)
                    return "orderList." + error;
            }
            if (message.positionList != null && message.hasOwnProperty("positionList")) {
                var error = $root.pb.StockPositionList.verify(message.positionList);
                if (error)
                    return "positionList." + error;
            }
            if (message.stockList != null && message.hasOwnProperty("stockList")) {
                if (!Array.isArray(message.stockList))
                    return "stockList: array expected";
                for (var i = 0; i < message.stockList.length; ++i)
                    if (!$util.isInteger(message.stockList[i]))
                        return "stockList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a MncgState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.MncgState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.MncgState} MncgState
         */
        MncgState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.MncgState)
                return object;
            var message = new $root.pb.MncgState();
            if (object.account != null)
                message.account = Number(object.account);
            if (object.orderList != null) {
                if (typeof object.orderList !== "object")
                    throw TypeError(".pb.MncgState.orderList: object expected");
                message.orderList = $root.pb.StockOrderList.fromObject(object.orderList);
            }
            if (object.positionList != null) {
                if (typeof object.positionList !== "object")
                    throw TypeError(".pb.MncgState.positionList: object expected");
                message.positionList = $root.pb.StockPositionList.fromObject(object.positionList);
            }
            if (object.stockList) {
                if (!Array.isArray(object.stockList))
                    throw TypeError(".pb.MncgState.stockList: array expected");
                message.stockList = [];
                for (var i = 0; i < object.stockList.length; ++i)
                    message.stockList[i] = object.stockList[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a MncgState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.MncgState
         * @static
         * @param {pb.MncgState} message MncgState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MncgState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.stockList = [];
            if (options.defaults) {
                object.account = 0;
                object.orderList = null;
                object.positionList = null;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = options.json && !isFinite(message.account) ? String(message.account) : message.account;
            if (message.orderList != null && message.hasOwnProperty("orderList"))
                object.orderList = $root.pb.StockOrderList.toObject(message.orderList, options);
            if (message.positionList != null && message.hasOwnProperty("positionList"))
                object.positionList = $root.pb.StockPositionList.toObject(message.positionList, options);
            if (message.stockList && message.stockList.length) {
                object.stockList = [];
                for (var j = 0; j < message.stockList.length; ++j)
                    object.stockList[j] = message.stockList[j];
            }
            return object;
        };

        /**
         * Converts this MncgState to JSON.
         * @function toJSON
         * @memberof pb.MncgState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MncgState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MncgState;
    })();

    pb.CgdsStateItem = (function () {

        /**
         * Properties of a CgdsStateItem.
         * @memberof pb
         * @interface ICgdsStateItem
         * @property {number|null} [id] CgdsStateItem id
         * @property {pb.IMncgState|null} [state] CgdsStateItem state
         */

        /**
         * Constructs a new CgdsStateItem.
         * @memberof pb
         * @classdesc Represents a CgdsStateItem.
         * @implements ICgdsStateItem
         * @constructor
         * @param {pb.ICgdsStateItem=} [properties] Properties to set
         */
        function CgdsStateItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgdsStateItem id.
         * @member {number} id
         * @memberof pb.CgdsStateItem
         * @instance
         */
        CgdsStateItem.prototype.id = 0;

        /**
         * CgdsStateItem state.
         * @member {pb.IMncgState|null|undefined} state
         * @memberof pb.CgdsStateItem
         * @instance
         */
        CgdsStateItem.prototype.state = null;

        /**
         * Creates a new CgdsStateItem instance using the specified properties.
         * @function create
         * @memberof pb.CgdsStateItem
         * @static
         * @param {pb.ICgdsStateItem=} [properties] Properties to set
         * @returns {pb.CgdsStateItem} CgdsStateItem instance
         */
        CgdsStateItem.create = function create(properties) {
            return new CgdsStateItem(properties);
        };

        /**
         * Encodes the specified CgdsStateItem message. Does not implicitly {@link pb.CgdsStateItem.verify|verify} messages.
         * @function encode
         * @memberof pb.CgdsStateItem
         * @static
         * @param {pb.ICgdsStateItem} message CgdsStateItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsStateItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.pb.MncgState.encode(message.state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CgdsStateItem message, length delimited. Does not implicitly {@link pb.CgdsStateItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgdsStateItem
         * @static
         * @param {pb.ICgdsStateItem} message CgdsStateItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsStateItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgdsStateItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgdsStateItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgdsStateItem} CgdsStateItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsStateItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgdsStateItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.state = $root.pb.MncgState.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgdsStateItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgdsStateItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgdsStateItem} CgdsStateItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsStateItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgdsStateItem message.
         * @function verify
         * @memberof pb.CgdsStateItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgdsStateItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.pb.MncgState.verify(message.state);
                if (error)
                    return "state." + error;
            }
            return null;
        };

        /**
         * Creates a CgdsStateItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgdsStateItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgdsStateItem} CgdsStateItem
         */
        CgdsStateItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgdsStateItem)
                return object;
            var message = new $root.pb.CgdsStateItem();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".pb.CgdsStateItem.state: object expected");
                message.state = $root.pb.MncgState.fromObject(object.state);
            }
            return message;
        };

        /**
         * Creates a plain object from a CgdsStateItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgdsStateItem
         * @static
         * @param {pb.CgdsStateItem} message CgdsStateItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgdsStateItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.state = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.pb.MncgState.toObject(message.state, options);
            return object;
        };

        /**
         * Converts this CgdsStateItem to JSON.
         * @function toJSON
         * @memberof pb.CgdsStateItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgdsStateItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgdsStateItem;
    })();

    pb.CgdsState = (function () {

        /**
         * Properties of a CgdsState.
         * @memberof pb
         * @interface ICgdsState
         * @property {Array.<pb.ICgdsStateItem>|null} [items] CgdsState items
         */

        /**
         * Constructs a new CgdsState.
         * @memberof pb
         * @classdesc Represents a CgdsState.
         * @implements ICgdsState
         * @constructor
         * @param {pb.ICgdsState=} [properties] Properties to set
         */
        function CgdsState(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgdsState items.
         * @member {Array.<pb.ICgdsStateItem>} items
         * @memberof pb.CgdsState
         * @instance
         */
        CgdsState.prototype.items = $util.emptyArray;

        /**
         * Creates a new CgdsState instance using the specified properties.
         * @function create
         * @memberof pb.CgdsState
         * @static
         * @param {pb.ICgdsState=} [properties] Properties to set
         * @returns {pb.CgdsState} CgdsState instance
         */
        CgdsState.create = function create(properties) {
            return new CgdsState(properties);
        };

        /**
         * Encodes the specified CgdsState message. Does not implicitly {@link pb.CgdsState.verify|verify} messages.
         * @function encode
         * @memberof pb.CgdsState
         * @static
         * @param {pb.ICgdsState} message CgdsState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.CgdsStateItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CgdsState message, length delimited. Does not implicitly {@link pb.CgdsState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgdsState
         * @static
         * @param {pb.ICgdsState} message CgdsState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgdsState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgdsState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgdsState} CgdsState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgdsState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.CgdsStateItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgdsState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgdsState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgdsState} CgdsState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgdsState message.
         * @function verify
         * @memberof pb.CgdsState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgdsState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.CgdsStateItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CgdsState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgdsState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgdsState} CgdsState
         */
        CgdsState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgdsState)
                return object;
            var message = new $root.pb.CgdsState();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.CgdsState.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.CgdsState.items: object expected");
                    message.items[i] = $root.pb.CgdsStateItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CgdsState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgdsState
         * @static
         * @param {pb.CgdsState} message CgdsState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgdsState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.CgdsStateItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CgdsState to JSON.
         * @function toJSON
         * @memberof pb.CgdsState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgdsState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgdsState;
    })();

    pb.CgdsStockListItem = (function () {

        /**
         * Properties of a CgdsStockListItem.
         * @memberof pb
         * @interface ICgdsStockListItem
         * @property {number|null} [id] CgdsStockListItem id
         * @property {Array.<number>|null} [stockList] CgdsStockListItem stockList
         */

        /**
         * Constructs a new CgdsStockListItem.
         * @memberof pb
         * @classdesc Represents a CgdsStockListItem.
         * @implements ICgdsStockListItem
         * @constructor
         * @param {pb.ICgdsStockListItem=} [properties] Properties to set
         */
        function CgdsStockListItem(properties) {
            this.stockList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgdsStockListItem id.
         * @member {number} id
         * @memberof pb.CgdsStockListItem
         * @instance
         */
        CgdsStockListItem.prototype.id = 0;

        /**
         * CgdsStockListItem stockList.
         * @member {Array.<number>} stockList
         * @memberof pb.CgdsStockListItem
         * @instance
         */
        CgdsStockListItem.prototype.stockList = $util.emptyArray;

        /**
         * Creates a new CgdsStockListItem instance using the specified properties.
         * @function create
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {pb.ICgdsStockListItem=} [properties] Properties to set
         * @returns {pb.CgdsStockListItem} CgdsStockListItem instance
         */
        CgdsStockListItem.create = function create(properties) {
            return new CgdsStockListItem(properties);
        };

        /**
         * Encodes the specified CgdsStockListItem message. Does not implicitly {@link pb.CgdsStockListItem.verify|verify} messages.
         * @function encode
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {pb.ICgdsStockListItem} message CgdsStockListItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsStockListItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.stockList != null && message.stockList.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.stockList.length; ++i)
                    writer.int32(message.stockList[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CgdsStockListItem message, length delimited. Does not implicitly {@link pb.CgdsStockListItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {pb.ICgdsStockListItem} message CgdsStockListItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsStockListItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgdsStockListItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgdsStockListItem} CgdsStockListItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsStockListItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgdsStockListItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        if (!(message.stockList && message.stockList.length))
                            message.stockList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stockList.push(reader.int32());
                        } else
                            message.stockList.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgdsStockListItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgdsStockListItem} CgdsStockListItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsStockListItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgdsStockListItem message.
         * @function verify
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgdsStockListItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.stockList != null && message.hasOwnProperty("stockList")) {
                if (!Array.isArray(message.stockList))
                    return "stockList: array expected";
                for (var i = 0; i < message.stockList.length; ++i)
                    if (!$util.isInteger(message.stockList[i]))
                        return "stockList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CgdsStockListItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgdsStockListItem} CgdsStockListItem
         */
        CgdsStockListItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgdsStockListItem)
                return object;
            var message = new $root.pb.CgdsStockListItem();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.stockList) {
                if (!Array.isArray(object.stockList))
                    throw TypeError(".pb.CgdsStockListItem.stockList: array expected");
                message.stockList = [];
                for (var i = 0; i < object.stockList.length; ++i)
                    message.stockList[i] = object.stockList[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CgdsStockListItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgdsStockListItem
         * @static
         * @param {pb.CgdsStockListItem} message CgdsStockListItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgdsStockListItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.stockList = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.stockList && message.stockList.length) {
                object.stockList = [];
                for (var j = 0; j < message.stockList.length; ++j)
                    object.stockList[j] = message.stockList[j];
            }
            return object;
        };

        /**
         * Converts this CgdsStockListItem to JSON.
         * @function toJSON
         * @memberof pb.CgdsStockListItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgdsStockListItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgdsStockListItem;
    })();

    pb.ZsjcState = (function () {

        /**
         * Properties of a ZsjcState.
         * @memberof pb
         * @interface IZsjcState
         * @property {Array.<pb.IZsjcGameData>|null} [items] ZsjcState items
         */

        /**
         * Constructs a new ZsjcState.
         * @memberof pb
         * @classdesc Represents a ZsjcState.
         * @implements IZsjcState
         * @constructor
         * @param {pb.IZsjcState=} [properties] Properties to set
         */
        function ZsjcState(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcState items.
         * @member {Array.<pb.IZsjcGameData>} items
         * @memberof pb.ZsjcState
         * @instance
         */
        ZsjcState.prototype.items = $util.emptyArray;

        /**
         * Creates a new ZsjcState instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcState
         * @static
         * @param {pb.IZsjcState=} [properties] Properties to set
         * @returns {pb.ZsjcState} ZsjcState instance
         */
        ZsjcState.create = function create(properties) {
            return new ZsjcState(properties);
        };

        /**
         * Encodes the specified ZsjcState message. Does not implicitly {@link pb.ZsjcState.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcState
         * @static
         * @param {pb.IZsjcState} message ZsjcState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.ZsjcGameData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ZsjcState message, length delimited. Does not implicitly {@link pb.ZsjcState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcState
         * @static
         * @param {pb.IZsjcState} message ZsjcState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcState} ZsjcState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.ZsjcGameData.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcState} ZsjcState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcState message.
         * @function verify
         * @memberof pb.ZsjcState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.ZsjcGameData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ZsjcState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcState} ZsjcState
         */
        ZsjcState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcState)
                return object;
            var message = new $root.pb.ZsjcState();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.ZsjcState.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.ZsjcState.items: object expected");
                    message.items[i] = $root.pb.ZsjcGameData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ZsjcState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcState
         * @static
         * @param {pb.ZsjcState} message ZsjcState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.ZsjcGameData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ZsjcState to JSON.
         * @function toJSON
         * @memberof pb.ZsjcState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcState;
    })();

    pb.Tasks = (function () {

        /**
         * Properties of a Tasks.
         * @memberof pb
         * @interface ITasks
         * @property {Array.<pb.ITaskItem>|null} [study] Tasks study
         * @property {Array.<pb.ITaskItem>|null} [daily] Tasks daily
         */

        /**
         * Constructs a new Tasks.
         * @memberof pb
         * @classdesc Represents a Tasks.
         * @implements ITasks
         * @constructor
         * @param {pb.ITasks=} [properties] Properties to set
         */
        function Tasks(properties) {
            this.study = [];
            this.daily = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Tasks study.
         * @member {Array.<pb.ITaskItem>} study
         * @memberof pb.Tasks
         * @instance
         */
        Tasks.prototype.study = $util.emptyArray;

        /**
         * Tasks daily.
         * @member {Array.<pb.ITaskItem>} daily
         * @memberof pb.Tasks
         * @instance
         */
        Tasks.prototype.daily = $util.emptyArray;

        /**
         * Creates a new Tasks instance using the specified properties.
         * @function create
         * @memberof pb.Tasks
         * @static
         * @param {pb.ITasks=} [properties] Properties to set
         * @returns {pb.Tasks} Tasks instance
         */
        Tasks.create = function create(properties) {
            return new Tasks(properties);
        };

        /**
         * Encodes the specified Tasks message. Does not implicitly {@link pb.Tasks.verify|verify} messages.
         * @function encode
         * @memberof pb.Tasks
         * @static
         * @param {pb.ITasks} message Tasks message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Tasks.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.study != null && message.study.length)
                for (var i = 0; i < message.study.length; ++i)
                    $root.pb.TaskItem.encode(message.study[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.daily != null && message.daily.length)
                for (var i = 0; i < message.daily.length; ++i)
                    $root.pb.TaskItem.encode(message.daily[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Tasks message, length delimited. Does not implicitly {@link pb.Tasks.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Tasks
         * @static
         * @param {pb.ITasks} message Tasks message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Tasks.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Tasks message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Tasks
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Tasks} Tasks
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Tasks.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Tasks();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.study && message.study.length))
                            message.study = [];
                        message.study.push($root.pb.TaskItem.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.daily && message.daily.length))
                            message.daily = [];
                        message.daily.push($root.pb.TaskItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Tasks message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Tasks
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Tasks} Tasks
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Tasks.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Tasks message.
         * @function verify
         * @memberof pb.Tasks
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Tasks.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.study != null && message.hasOwnProperty("study")) {
                if (!Array.isArray(message.study))
                    return "study: array expected";
                for (var i = 0; i < message.study.length; ++i) {
                    var error = $root.pb.TaskItem.verify(message.study[i]);
                    if (error)
                        return "study." + error;
                }
            }
            if (message.daily != null && message.hasOwnProperty("daily")) {
                if (!Array.isArray(message.daily))
                    return "daily: array expected";
                for (var i = 0; i < message.daily.length; ++i) {
                    var error = $root.pb.TaskItem.verify(message.daily[i]);
                    if (error)
                        return "daily." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Tasks message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Tasks
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Tasks} Tasks
         */
        Tasks.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Tasks)
                return object;
            var message = new $root.pb.Tasks();
            if (object.study) {
                if (!Array.isArray(object.study))
                    throw TypeError(".pb.Tasks.study: array expected");
                message.study = [];
                for (var i = 0; i < object.study.length; ++i) {
                    if (typeof object.study[i] !== "object")
                        throw TypeError(".pb.Tasks.study: object expected");
                    message.study[i] = $root.pb.TaskItem.fromObject(object.study[i]);
                }
            }
            if (object.daily) {
                if (!Array.isArray(object.daily))
                    throw TypeError(".pb.Tasks.daily: array expected");
                message.daily = [];
                for (var i = 0; i < object.daily.length; ++i) {
                    if (typeof object.daily[i] !== "object")
                        throw TypeError(".pb.Tasks.daily: object expected");
                    message.daily[i] = $root.pb.TaskItem.fromObject(object.daily[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Tasks message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Tasks
         * @static
         * @param {pb.Tasks} message Tasks
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Tasks.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.study = [];
                object.daily = [];
            }
            if (message.study && message.study.length) {
                object.study = [];
                for (var j = 0; j < message.study.length; ++j)
                    object.study[j] = $root.pb.TaskItem.toObject(message.study[j], options);
            }
            if (message.daily && message.daily.length) {
                object.daily = [];
                for (var j = 0; j < message.daily.length; ++j)
                    object.daily[j] = $root.pb.TaskItem.toObject(message.daily[j], options);
            }
            return object;
        };

        /**
         * Converts this Tasks to JSON.
         * @function toJSON
         * @memberof pb.Tasks
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Tasks.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Tasks;
    })();

    pb.InviterState = (function () {

        /**
         * Properties of an InviterState.
         * @memberof pb
         * @interface IInviterState
         * @property {number|null} [Total] InviterState Total
         * @property {Array.<number>|null} [Awarded] InviterState Awarded
         */

        /**
         * Constructs a new InviterState.
         * @memberof pb
         * @classdesc Represents an InviterState.
         * @implements IInviterState
         * @constructor
         * @param {pb.IInviterState=} [properties] Properties to set
         */
        function InviterState(properties) {
            this.Awarded = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InviterState Total.
         * @member {number} Total
         * @memberof pb.InviterState
         * @instance
         */
        InviterState.prototype.Total = 0;

        /**
         * InviterState Awarded.
         * @member {Array.<number>} Awarded
         * @memberof pb.InviterState
         * @instance
         */
        InviterState.prototype.Awarded = $util.emptyArray;

        /**
         * Creates a new InviterState instance using the specified properties.
         * @function create
         * @memberof pb.InviterState
         * @static
         * @param {pb.IInviterState=} [properties] Properties to set
         * @returns {pb.InviterState} InviterState instance
         */
        InviterState.create = function create(properties) {
            return new InviterState(properties);
        };

        /**
         * Encodes the specified InviterState message. Does not implicitly {@link pb.InviterState.verify|verify} messages.
         * @function encode
         * @memberof pb.InviterState
         * @static
         * @param {pb.IInviterState} message InviterState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InviterState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Total != null && Object.hasOwnProperty.call(message, "Total"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Total);
            if (message.Awarded != null && message.Awarded.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.Awarded.length; ++i)
                    writer.int32(message.Awarded[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified InviterState message, length delimited. Does not implicitly {@link pb.InviterState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.InviterState
         * @static
         * @param {pb.IInviterState} message InviterState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InviterState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InviterState message from the specified reader or buffer.
         * @function decode
         * @memberof pb.InviterState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.InviterState} InviterState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InviterState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.InviterState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.Total = reader.int32();
                        break;
                    case 2:
                        if (!(message.Awarded && message.Awarded.length))
                            message.Awarded = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.Awarded.push(reader.int32());
                        } else
                            message.Awarded.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an InviterState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.InviterState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.InviterState} InviterState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InviterState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InviterState message.
         * @function verify
         * @memberof pb.InviterState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InviterState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Total != null && message.hasOwnProperty("Total"))
                if (!$util.isInteger(message.Total))
                    return "Total: integer expected";
            if (message.Awarded != null && message.hasOwnProperty("Awarded")) {
                if (!Array.isArray(message.Awarded))
                    return "Awarded: array expected";
                for (var i = 0; i < message.Awarded.length; ++i)
                    if (!$util.isInteger(message.Awarded[i]))
                        return "Awarded: integer[] expected";
            }
            return null;
        };

        /**
         * Creates an InviterState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.InviterState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.InviterState} InviterState
         */
        InviterState.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.InviterState)
                return object;
            var message = new $root.pb.InviterState();
            if (object.Total != null)
                message.Total = object.Total | 0;
            if (object.Awarded) {
                if (!Array.isArray(object.Awarded))
                    throw TypeError(".pb.InviterState.Awarded: array expected");
                message.Awarded = [];
                for (var i = 0; i < object.Awarded.length; ++i)
                    message.Awarded[i] = object.Awarded[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from an InviterState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.InviterState
         * @static
         * @param {pb.InviterState} message InviterState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InviterState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Awarded = [];
            if (options.defaults)
                object.Total = 0;
            if (message.Total != null && message.hasOwnProperty("Total"))
                object.Total = message.Total;
            if (message.Awarded && message.Awarded.length) {
                object.Awarded = [];
                for (var j = 0; j < message.Awarded.length; ++j)
                    object.Awarded[j] = message.Awarded[j];
            }
            return object;
        };

        /**
         * Converts this InviterState to JSON.
         * @function toJSON
         * @memberof pb.InviterState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InviterState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InviterState;
    })();

    pb.GameData = (function () {

        /**
         * Properties of a GameData.
         * @memberof pb
         * @interface IGameData
         * @property {number|null} [uid] GameData uid
         * @property {string|null} [nickname] GameData nickname
         * @property {string|null} [icon] GameData icon
         * @property {Array.<number|Long>|null} [properties] GameData properties
         * @property {Array.<pb.IGameCounter>|null} [counters] GameData counters
         * @property {pb.ISmxlState|null} [smlxState] GameData smlxState
         * @property {pb.ICgState|null} [cgState] GameData cgState
         * @property {number|Long|null} [today] GameData today
         * @property {Array.<number>|null} [todayTimes] GameData todayTimes
         * @property {Array.<number>|null} [stockList] GameData stockList
         * @property {pb.IZsjcState|null} [zsjcState] GameData zsjcState
         * @property {string|null} [location] GameData location
         * @property {string|null} [gender] GameData gender
         * @property {Array.<number>|null} [favorList] GameData favorList
         * @property {pb.ITasks|null} [tasks] GameData tasks
         * @property {number|null} [week] GameData week
         * @property {string|null} [mobile] GameData mobile
         * @property {Array.<number>|null} [aiStockList] GameData aiStockList
         * @property {Array.<pb.ICgdsStockListItem>|null} [cgdsStockList] GameData cgdsStockList
         * @property {number|null} [todayAdtimes] GameData todayAdtimes
         * @property {Array.<number>|null} [award7] GameData award7
         * @property {boolean|null} [isEditedNick] GameData isEditedNick
         * @property {boolean|null} [isEditedIcon] GameData isEditedIcon
         * @property {Array.<number>|null} [cgdsStockListLast] GameData cgdsStockListLast
         * @property {pb.IInviterState|null} [inviterState] GameData inviterState
         */

        /**
         * Constructs a new GameData.
         * @memberof pb
         * @classdesc Represents a GameData.
         * @implements IGameData
         * @constructor
         * @param {pb.IGameData=} [properties] Properties to set
         */
        function GameData(properties) {
            this.properties = [];
            this.counters = [];
            this.todayTimes = [];
            this.stockList = [];
            this.favorList = [];
            this.aiStockList = [];
            this.cgdsStockList = [];
            this.award7 = [];
            this.cgdsStockListLast = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameData uid.
         * @member {number} uid
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.uid = 0;

        /**
         * GameData nickname.
         * @member {string} nickname
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.nickname = "";

        /**
         * GameData icon.
         * @member {string} icon
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.icon = "";

        /**
         * GameData properties.
         * @member {Array.<number|Long>} properties
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.properties = $util.emptyArray;

        /**
         * GameData counters.
         * @member {Array.<pb.IGameCounter>} counters
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.counters = $util.emptyArray;

        /**
         * GameData smlxState.
         * @member {pb.ISmxlState|null|undefined} smlxState
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.smlxState = null;

        /**
         * GameData cgState.
         * @member {pb.ICgState|null|undefined} cgState
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.cgState = null;

        /**
         * GameData today.
         * @member {number|Long} today
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.today = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameData todayTimes.
         * @member {Array.<number>} todayTimes
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.todayTimes = $util.emptyArray;

        /**
         * GameData stockList.
         * @member {Array.<number>} stockList
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.stockList = $util.emptyArray;

        /**
         * GameData zsjcState.
         * @member {pb.IZsjcState|null|undefined} zsjcState
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.zsjcState = null;

        /**
         * GameData location.
         * @member {string} location
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.location = "";

        /**
         * GameData gender.
         * @member {string} gender
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.gender = "";

        /**
         * GameData favorList.
         * @member {Array.<number>} favorList
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.favorList = $util.emptyArray;

        /**
         * GameData tasks.
         * @member {pb.ITasks|null|undefined} tasks
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.tasks = null;

        /**
         * GameData week.
         * @member {number} week
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.week = 0;

        /**
         * GameData mobile.
         * @member {string} mobile
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.mobile = "";

        /**
         * GameData aiStockList.
         * @member {Array.<number>} aiStockList
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.aiStockList = $util.emptyArray;

        /**
         * GameData cgdsStockList.
         * @member {Array.<pb.ICgdsStockListItem>} cgdsStockList
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.cgdsStockList = $util.emptyArray;

        /**
         * GameData todayAdtimes.
         * @member {number} todayAdtimes
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.todayAdtimes = 0;

        /**
         * GameData award7.
         * @member {Array.<number>} award7
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.award7 = $util.emptyArray;

        /**
         * GameData isEditedNick.
         * @member {boolean} isEditedNick
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.isEditedNick = false;

        /**
         * GameData isEditedIcon.
         * @member {boolean} isEditedIcon
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.isEditedIcon = false;

        /**
         * GameData cgdsStockListLast.
         * @member {Array.<number>} cgdsStockListLast
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.cgdsStockListLast = $util.emptyArray;

        /**
         * GameData inviterState.
         * @member {pb.IInviterState|null|undefined} inviterState
         * @memberof pb.GameData
         * @instance
         */
        GameData.prototype.inviterState = null;

        /**
         * Creates a new GameData instance using the specified properties.
         * @function create
         * @memberof pb.GameData
         * @static
         * @param {pb.IGameData=} [properties] Properties to set
         * @returns {pb.GameData} GameData instance
         */
        GameData.create = function create(properties) {
            return new GameData(properties);
        };

        /**
         * Encodes the specified GameData message. Does not implicitly {@link pb.GameData.verify|verify} messages.
         * @function encode
         * @memberof pb.GameData
         * @static
         * @param {pb.IGameData} message GameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.properties != null && message.properties.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.properties.length; ++i)
                    writer.int64(message.properties[i]);
                writer.ldelim();
            }
            if (message.counters != null && message.counters.length)
                for (var i = 0; i < message.counters.length; ++i)
                    $root.pb.GameCounter.encode(message.counters[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.smlxState != null && Object.hasOwnProperty.call(message, "smlxState"))
                $root.pb.SmxlState.encode(message.smlxState, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.cgState != null && Object.hasOwnProperty.call(message, "cgState"))
                $root.pb.CgState.encode(message.cgState, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.today != null && Object.hasOwnProperty.call(message, "today"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.today);
            if (message.todayTimes != null && message.todayTimes.length) {
                writer.uint32(/* id 9, wireType 2 =*/74).fork();
                for (var i = 0; i < message.todayTimes.length; ++i)
                    writer.int32(message.todayTimes[i]);
                writer.ldelim();
            }
            if (message.stockList != null && message.stockList.length) {
                writer.uint32(/* id 10, wireType 2 =*/82).fork();
                for (var i = 0; i < message.stockList.length; ++i)
                    writer.int32(message.stockList[i]);
                writer.ldelim();
            }
            if (message.zsjcState != null && Object.hasOwnProperty.call(message, "zsjcState"))
                $root.pb.ZsjcState.encode(message.zsjcState, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.location);
            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.gender);
            if (message.favorList != null && message.favorList.length) {
                writer.uint32(/* id 14, wireType 2 =*/114).fork();
                for (var i = 0; i < message.favorList.length; ++i)
                    writer.int32(message.favorList[i]);
                writer.ldelim();
            }
            if (message.tasks != null && Object.hasOwnProperty.call(message, "tasks"))
                $root.pb.Tasks.encode(message.tasks, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.week != null && Object.hasOwnProperty.call(message, "week"))
                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.week);
            if (message.mobile != null && Object.hasOwnProperty.call(message, "mobile"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.mobile);
            if (message.aiStockList != null && message.aiStockList.length) {
                writer.uint32(/* id 18, wireType 2 =*/146).fork();
                for (var i = 0; i < message.aiStockList.length; ++i)
                    writer.int32(message.aiStockList[i]);
                writer.ldelim();
            }
            if (message.cgdsStockList != null && message.cgdsStockList.length)
                for (var i = 0; i < message.cgdsStockList.length; ++i)
                    $root.pb.CgdsStockListItem.encode(message.cgdsStockList[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
            if (message.todayAdtimes != null && Object.hasOwnProperty.call(message, "todayAdtimes"))
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.todayAdtimes);
            if (message.award7 != null && message.award7.length) {
                writer.uint32(/* id 21, wireType 2 =*/170).fork();
                for (var i = 0; i < message.award7.length; ++i)
                    writer.int32(message.award7[i]);
                writer.ldelim();
            }
            if (message.isEditedNick != null && Object.hasOwnProperty.call(message, "isEditedNick"))
                writer.uint32(/* id 22, wireType 0 =*/176).bool(message.isEditedNick);
            if (message.isEditedIcon != null && Object.hasOwnProperty.call(message, "isEditedIcon"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.isEditedIcon);
            if (message.cgdsStockListLast != null && message.cgdsStockListLast.length) {
                writer.uint32(/* id 24, wireType 2 =*/194).fork();
                for (var i = 0; i < message.cgdsStockListLast.length; ++i)
                    writer.int32(message.cgdsStockListLast[i]);
                writer.ldelim();
            }
            if (message.inviterState != null && Object.hasOwnProperty.call(message, "inviterState"))
                $root.pb.InviterState.encode(message.inviterState, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GameData message, length delimited. Does not implicitly {@link pb.GameData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameData
         * @static
         * @param {pb.IGameData} message GameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameData message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameData} GameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.icon = reader.string();
                        break;
                    case 4:
                        if (!(message.properties && message.properties.length))
                            message.properties = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.properties.push(reader.int64());
                        } else
                            message.properties.push(reader.int64());
                        break;
                    case 5:
                        if (!(message.counters && message.counters.length))
                            message.counters = [];
                        message.counters.push($root.pb.GameCounter.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        message.smlxState = $root.pb.SmxlState.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.cgState = $root.pb.CgState.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.today = reader.int64();
                        break;
                    case 9:
                        if (!(message.todayTimes && message.todayTimes.length))
                            message.todayTimes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.todayTimes.push(reader.int32());
                        } else
                            message.todayTimes.push(reader.int32());
                        break;
                    case 10:
                        if (!(message.stockList && message.stockList.length))
                            message.stockList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stockList.push(reader.int32());
                        } else
                            message.stockList.push(reader.int32());
                        break;
                    case 11:
                        message.zsjcState = $root.pb.ZsjcState.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.location = reader.string();
                        break;
                    case 13:
                        message.gender = reader.string();
                        break;
                    case 14:
                        if (!(message.favorList && message.favorList.length))
                            message.favorList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.favorList.push(reader.int32());
                        } else
                            message.favorList.push(reader.int32());
                        break;
                    case 15:
                        message.tasks = $root.pb.Tasks.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.week = reader.int32();
                        break;
                    case 17:
                        message.mobile = reader.string();
                        break;
                    case 18:
                        if (!(message.aiStockList && message.aiStockList.length))
                            message.aiStockList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.aiStockList.push(reader.int32());
                        } else
                            message.aiStockList.push(reader.int32());
                        break;
                    case 19:
                        if (!(message.cgdsStockList && message.cgdsStockList.length))
                            message.cgdsStockList = [];
                        message.cgdsStockList.push($root.pb.CgdsStockListItem.decode(reader, reader.uint32()));
                        break;
                    case 20:
                        message.todayAdtimes = reader.int32();
                        break;
                    case 21:
                        if (!(message.award7 && message.award7.length))
                            message.award7 = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.award7.push(reader.int32());
                        } else
                            message.award7.push(reader.int32());
                        break;
                    case 22:
                        message.isEditedNick = reader.bool();
                        break;
                    case 23:
                        message.isEditedIcon = reader.bool();
                        break;
                    case 24:
                        if (!(message.cgdsStockListLast && message.cgdsStockListLast.length))
                            message.cgdsStockListLast = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cgdsStockListLast.push(reader.int32());
                        } else
                            message.cgdsStockListLast.push(reader.int32());
                        break;
                    case 25:
                        message.inviterState = $root.pb.InviterState.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameData} GameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameData message.
         * @function verify
         * @memberof pb.GameData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.properties != null && message.hasOwnProperty("properties")) {
                if (!Array.isArray(message.properties))
                    return "properties: array expected";
                for (var i = 0; i < message.properties.length; ++i)
                    if (!$util.isInteger(message.properties[i]) && !(message.properties[i] && $util.isInteger(message.properties[i].low) && $util.isInteger(message.properties[i].high)))
                        return "properties: integer|Long[] expected";
            }
            if (message.counters != null && message.hasOwnProperty("counters")) {
                if (!Array.isArray(message.counters))
                    return "counters: array expected";
                for (var i = 0; i < message.counters.length; ++i) {
                    var error = $root.pb.GameCounter.verify(message.counters[i]);
                    if (error)
                        return "counters." + error;
                }
            }
            if (message.smlxState != null && message.hasOwnProperty("smlxState")) {
                var error = $root.pb.SmxlState.verify(message.smlxState);
                if (error)
                    return "smlxState." + error;
            }
            if (message.cgState != null && message.hasOwnProperty("cgState")) {
                var error = $root.pb.CgState.verify(message.cgState);
                if (error)
                    return "cgState." + error;
            }
            if (message.today != null && message.hasOwnProperty("today"))
                if (!$util.isInteger(message.today) && !(message.today && $util.isInteger(message.today.low) && $util.isInteger(message.today.high)))
                    return "today: integer|Long expected";
            if (message.todayTimes != null && message.hasOwnProperty("todayTimes")) {
                if (!Array.isArray(message.todayTimes))
                    return "todayTimes: array expected";
                for (var i = 0; i < message.todayTimes.length; ++i)
                    if (!$util.isInteger(message.todayTimes[i]))
                        return "todayTimes: integer[] expected";
            }
            if (message.stockList != null && message.hasOwnProperty("stockList")) {
                if (!Array.isArray(message.stockList))
                    return "stockList: array expected";
                for (var i = 0; i < message.stockList.length; ++i)
                    if (!$util.isInteger(message.stockList[i]))
                        return "stockList: integer[] expected";
            }
            if (message.zsjcState != null && message.hasOwnProperty("zsjcState")) {
                var error = $root.pb.ZsjcState.verify(message.zsjcState);
                if (error)
                    return "zsjcState." + error;
            }
            if (message.location != null && message.hasOwnProperty("location"))
                if (!$util.isString(message.location))
                    return "location: string expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (!$util.isString(message.gender))
                    return "gender: string expected";
            if (message.favorList != null && message.hasOwnProperty("favorList")) {
                if (!Array.isArray(message.favorList))
                    return "favorList: array expected";
                for (var i = 0; i < message.favorList.length; ++i)
                    if (!$util.isInteger(message.favorList[i]))
                        return "favorList: integer[] expected";
            }
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                var error = $root.pb.Tasks.verify(message.tasks);
                if (error)
                    return "tasks." + error;
            }
            if (message.week != null && message.hasOwnProperty("week"))
                if (!$util.isInteger(message.week))
                    return "week: integer expected";
            if (message.mobile != null && message.hasOwnProperty("mobile"))
                if (!$util.isString(message.mobile))
                    return "mobile: string expected";
            if (message.aiStockList != null && message.hasOwnProperty("aiStockList")) {
                if (!Array.isArray(message.aiStockList))
                    return "aiStockList: array expected";
                for (var i = 0; i < message.aiStockList.length; ++i)
                    if (!$util.isInteger(message.aiStockList[i]))
                        return "aiStockList: integer[] expected";
            }
            if (message.cgdsStockList != null && message.hasOwnProperty("cgdsStockList")) {
                if (!Array.isArray(message.cgdsStockList))
                    return "cgdsStockList: array expected";
                for (var i = 0; i < message.cgdsStockList.length; ++i) {
                    var error = $root.pb.CgdsStockListItem.verify(message.cgdsStockList[i]);
                    if (error)
                        return "cgdsStockList." + error;
                }
            }
            if (message.todayAdtimes != null && message.hasOwnProperty("todayAdtimes"))
                if (!$util.isInteger(message.todayAdtimes))
                    return "todayAdtimes: integer expected";
            if (message.award7 != null && message.hasOwnProperty("award7")) {
                if (!Array.isArray(message.award7))
                    return "award7: array expected";
                for (var i = 0; i < message.award7.length; ++i)
                    if (!$util.isInteger(message.award7[i]))
                        return "award7: integer[] expected";
            }
            if (message.isEditedNick != null && message.hasOwnProperty("isEditedNick"))
                if (typeof message.isEditedNick !== "boolean")
                    return "isEditedNick: boolean expected";
            if (message.isEditedIcon != null && message.hasOwnProperty("isEditedIcon"))
                if (typeof message.isEditedIcon !== "boolean")
                    return "isEditedIcon: boolean expected";
            if (message.cgdsStockListLast != null && message.hasOwnProperty("cgdsStockListLast")) {
                if (!Array.isArray(message.cgdsStockListLast))
                    return "cgdsStockListLast: array expected";
                for (var i = 0; i < message.cgdsStockListLast.length; ++i)
                    if (!$util.isInteger(message.cgdsStockListLast[i]))
                        return "cgdsStockListLast: integer[] expected";
            }
            if (message.inviterState != null && message.hasOwnProperty("inviterState")) {
                var error = $root.pb.InviterState.verify(message.inviterState);
                if (error)
                    return "inviterState." + error;
            }
            return null;
        };

        /**
         * Creates a GameData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameData} GameData
         */
        GameData.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameData)
                return object;
            var message = new $root.pb.GameData();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.properties) {
                if (!Array.isArray(object.properties))
                    throw TypeError(".pb.GameData.properties: array expected");
                message.properties = [];
                for (var i = 0; i < object.properties.length; ++i)
                    if ($util.Long)
                        (message.properties[i] = $util.Long.fromValue(object.properties[i])).unsigned = false;
                    else if (typeof object.properties[i] === "string")
                        message.properties[i] = parseInt(object.properties[i], 10);
                    else if (typeof object.properties[i] === "number")
                        message.properties[i] = object.properties[i];
                    else if (typeof object.properties[i] === "object")
                        message.properties[i] = new $util.LongBits(object.properties[i].low >>> 0, object.properties[i].high >>> 0).toNumber();
            }
            if (object.counters) {
                if (!Array.isArray(object.counters))
                    throw TypeError(".pb.GameData.counters: array expected");
                message.counters = [];
                for (var i = 0; i < object.counters.length; ++i) {
                    if (typeof object.counters[i] !== "object")
                        throw TypeError(".pb.GameData.counters: object expected");
                    message.counters[i] = $root.pb.GameCounter.fromObject(object.counters[i]);
                }
            }
            if (object.smlxState != null) {
                if (typeof object.smlxState !== "object")
                    throw TypeError(".pb.GameData.smlxState: object expected");
                message.smlxState = $root.pb.SmxlState.fromObject(object.smlxState);
            }
            if (object.cgState != null) {
                if (typeof object.cgState !== "object")
                    throw TypeError(".pb.GameData.cgState: object expected");
                message.cgState = $root.pb.CgState.fromObject(object.cgState);
            }
            if (object.today != null)
                if ($util.Long)
                    (message.today = $util.Long.fromValue(object.today)).unsigned = false;
                else if (typeof object.today === "string")
                    message.today = parseInt(object.today, 10);
                else if (typeof object.today === "number")
                    message.today = object.today;
                else if (typeof object.today === "object")
                    message.today = new $util.LongBits(object.today.low >>> 0, object.today.high >>> 0).toNumber();
            if (object.todayTimes) {
                if (!Array.isArray(object.todayTimes))
                    throw TypeError(".pb.GameData.todayTimes: array expected");
                message.todayTimes = [];
                for (var i = 0; i < object.todayTimes.length; ++i)
                    message.todayTimes[i] = object.todayTimes[i] | 0;
            }
            if (object.stockList) {
                if (!Array.isArray(object.stockList))
                    throw TypeError(".pb.GameData.stockList: array expected");
                message.stockList = [];
                for (var i = 0; i < object.stockList.length; ++i)
                    message.stockList[i] = object.stockList[i] | 0;
            }
            if (object.zsjcState != null) {
                if (typeof object.zsjcState !== "object")
                    throw TypeError(".pb.GameData.zsjcState: object expected");
                message.zsjcState = $root.pb.ZsjcState.fromObject(object.zsjcState);
            }
            if (object.location != null)
                message.location = String(object.location);
            if (object.gender != null)
                message.gender = String(object.gender);
            if (object.favorList) {
                if (!Array.isArray(object.favorList))
                    throw TypeError(".pb.GameData.favorList: array expected");
                message.favorList = [];
                for (var i = 0; i < object.favorList.length; ++i)
                    message.favorList[i] = object.favorList[i] | 0;
            }
            if (object.tasks != null) {
                if (typeof object.tasks !== "object")
                    throw TypeError(".pb.GameData.tasks: object expected");
                message.tasks = $root.pb.Tasks.fromObject(object.tasks);
            }
            if (object.week != null)
                message.week = object.week | 0;
            if (object.mobile != null)
                message.mobile = String(object.mobile);
            if (object.aiStockList) {
                if (!Array.isArray(object.aiStockList))
                    throw TypeError(".pb.GameData.aiStockList: array expected");
                message.aiStockList = [];
                for (var i = 0; i < object.aiStockList.length; ++i)
                    message.aiStockList[i] = object.aiStockList[i] | 0;
            }
            if (object.cgdsStockList) {
                if (!Array.isArray(object.cgdsStockList))
                    throw TypeError(".pb.GameData.cgdsStockList: array expected");
                message.cgdsStockList = [];
                for (var i = 0; i < object.cgdsStockList.length; ++i) {
                    if (typeof object.cgdsStockList[i] !== "object")
                        throw TypeError(".pb.GameData.cgdsStockList: object expected");
                    message.cgdsStockList[i] = $root.pb.CgdsStockListItem.fromObject(object.cgdsStockList[i]);
                }
            }
            if (object.todayAdtimes != null)
                message.todayAdtimes = object.todayAdtimes | 0;
            if (object.award7) {
                if (!Array.isArray(object.award7))
                    throw TypeError(".pb.GameData.award7: array expected");
                message.award7 = [];
                for (var i = 0; i < object.award7.length; ++i)
                    message.award7[i] = object.award7[i] | 0;
            }
            if (object.isEditedNick != null)
                message.isEditedNick = Boolean(object.isEditedNick);
            if (object.isEditedIcon != null)
                message.isEditedIcon = Boolean(object.isEditedIcon);
            if (object.cgdsStockListLast) {
                if (!Array.isArray(object.cgdsStockListLast))
                    throw TypeError(".pb.GameData.cgdsStockListLast: array expected");
                message.cgdsStockListLast = [];
                for (var i = 0; i < object.cgdsStockListLast.length; ++i)
                    message.cgdsStockListLast[i] = object.cgdsStockListLast[i] | 0;
            }
            if (object.inviterState != null) {
                if (typeof object.inviterState !== "object")
                    throw TypeError(".pb.GameData.inviterState: object expected");
                message.inviterState = $root.pb.InviterState.fromObject(object.inviterState);
            }
            return message;
        };

        /**
         * Creates a plain object from a GameData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameData
         * @static
         * @param {pb.GameData} message GameData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.properties = [];
                object.counters = [];
                object.todayTimes = [];
                object.stockList = [];
                object.favorList = [];
                object.aiStockList = [];
                object.cgdsStockList = [];
                object.award7 = [];
                object.cgdsStockListLast = [];
            }
            if (options.defaults) {
                object.uid = 0;
                object.nickname = "";
                object.icon = "";
                object.smlxState = null;
                object.cgState = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.today = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.today = options.longs === String ? "0" : 0;
                object.zsjcState = null;
                object.location = "";
                object.gender = "";
                object.tasks = null;
                object.week = 0;
                object.mobile = "";
                object.todayAdtimes = 0;
                object.isEditedNick = false;
                object.isEditedIcon = false;
                object.inviterState = null;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.properties && message.properties.length) {
                object.properties = [];
                for (var j = 0; j < message.properties.length; ++j)
                    if (typeof message.properties[j] === "number")
                        object.properties[j] = options.longs === String ? String(message.properties[j]) : message.properties[j];
                    else
                        object.properties[j] = options.longs === String ? $util.Long.prototype.toString.call(message.properties[j]) : options.longs === Number ? new $util.LongBits(message.properties[j].low >>> 0, message.properties[j].high >>> 0).toNumber() : message.properties[j];
            }
            if (message.counters && message.counters.length) {
                object.counters = [];
                for (var j = 0; j < message.counters.length; ++j)
                    object.counters[j] = $root.pb.GameCounter.toObject(message.counters[j], options);
            }
            if (message.smlxState != null && message.hasOwnProperty("smlxState"))
                object.smlxState = $root.pb.SmxlState.toObject(message.smlxState, options);
            if (message.cgState != null && message.hasOwnProperty("cgState"))
                object.cgState = $root.pb.CgState.toObject(message.cgState, options);
            if (message.today != null && message.hasOwnProperty("today"))
                if (typeof message.today === "number")
                    object.today = options.longs === String ? String(message.today) : message.today;
                else
                    object.today = options.longs === String ? $util.Long.prototype.toString.call(message.today) : options.longs === Number ? new $util.LongBits(message.today.low >>> 0, message.today.high >>> 0).toNumber() : message.today;
            if (message.todayTimes && message.todayTimes.length) {
                object.todayTimes = [];
                for (var j = 0; j < message.todayTimes.length; ++j)
                    object.todayTimes[j] = message.todayTimes[j];
            }
            if (message.stockList && message.stockList.length) {
                object.stockList = [];
                for (var j = 0; j < message.stockList.length; ++j)
                    object.stockList[j] = message.stockList[j];
            }
            if (message.zsjcState != null && message.hasOwnProperty("zsjcState"))
                object.zsjcState = $root.pb.ZsjcState.toObject(message.zsjcState, options);
            if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.favorList && message.favorList.length) {
                object.favorList = [];
                for (var j = 0; j < message.favorList.length; ++j)
                    object.favorList[j] = message.favorList[j];
            }
            if (message.tasks != null && message.hasOwnProperty("tasks"))
                object.tasks = $root.pb.Tasks.toObject(message.tasks, options);
            if (message.week != null && message.hasOwnProperty("week"))
                object.week = message.week;
            if (message.mobile != null && message.hasOwnProperty("mobile"))
                object.mobile = message.mobile;
            if (message.aiStockList && message.aiStockList.length) {
                object.aiStockList = [];
                for (var j = 0; j < message.aiStockList.length; ++j)
                    object.aiStockList[j] = message.aiStockList[j];
            }
            if (message.cgdsStockList && message.cgdsStockList.length) {
                object.cgdsStockList = [];
                for (var j = 0; j < message.cgdsStockList.length; ++j)
                    object.cgdsStockList[j] = $root.pb.CgdsStockListItem.toObject(message.cgdsStockList[j], options);
            }
            if (message.todayAdtimes != null && message.hasOwnProperty("todayAdtimes"))
                object.todayAdtimes = message.todayAdtimes;
            if (message.award7 && message.award7.length) {
                object.award7 = [];
                for (var j = 0; j < message.award7.length; ++j)
                    object.award7[j] = message.award7[j];
            }
            if (message.isEditedNick != null && message.hasOwnProperty("isEditedNick"))
                object.isEditedNick = message.isEditedNick;
            if (message.isEditedIcon != null && message.hasOwnProperty("isEditedIcon"))
                object.isEditedIcon = message.isEditedIcon;
            if (message.cgdsStockListLast && message.cgdsStockListLast.length) {
                object.cgdsStockListLast = [];
                for (var j = 0; j < message.cgdsStockListLast.length; ++j)
                    object.cgdsStockListLast[j] = message.cgdsStockListLast[j];
            }
            if (message.inviterState != null && message.hasOwnProperty("inviterState"))
                object.inviterState = $root.pb.InviterState.toObject(message.inviterState, options);
            return object;
        };

        /**
         * Converts this GameData to JSON.
         * @function toJSON
         * @memberof pb.GameData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameData;
    })();

    pb.GamePropertyItem = (function () {

        /**
         * Properties of a GamePropertyItem.
         * @memberof pb
         * @interface IGamePropertyItem
         * @property {pb.GamePropertyId|null} [id] GamePropertyItem id
         * @property {number|Long|null} [oldValue] GamePropertyItem oldValue
         * @property {number|Long|null} [newValue] GamePropertyItem newValue
         */

        /**
         * Constructs a new GamePropertyItem.
         * @memberof pb
         * @classdesc Represents a GamePropertyItem.
         * @implements IGamePropertyItem
         * @constructor
         * @param {pb.IGamePropertyItem=} [properties] Properties to set
         */
        function GamePropertyItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GamePropertyItem id.
         * @member {pb.GamePropertyId} id
         * @memberof pb.GamePropertyItem
         * @instance
         */
        GamePropertyItem.prototype.id = 0;

        /**
         * GamePropertyItem oldValue.
         * @member {number|Long} oldValue
         * @memberof pb.GamePropertyItem
         * @instance
         */
        GamePropertyItem.prototype.oldValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GamePropertyItem newValue.
         * @member {number|Long} newValue
         * @memberof pb.GamePropertyItem
         * @instance
         */
        GamePropertyItem.prototype.newValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new GamePropertyItem instance using the specified properties.
         * @function create
         * @memberof pb.GamePropertyItem
         * @static
         * @param {pb.IGamePropertyItem=} [properties] Properties to set
         * @returns {pb.GamePropertyItem} GamePropertyItem instance
         */
        GamePropertyItem.create = function create(properties) {
            return new GamePropertyItem(properties);
        };

        /**
         * Encodes the specified GamePropertyItem message. Does not implicitly {@link pb.GamePropertyItem.verify|verify} messages.
         * @function encode
         * @memberof pb.GamePropertyItem
         * @static
         * @param {pb.IGamePropertyItem} message GamePropertyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GamePropertyItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.oldValue != null && Object.hasOwnProperty.call(message, "oldValue"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oldValue);
            if (message.newValue != null && Object.hasOwnProperty.call(message, "newValue"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.newValue);
            return writer;
        };

        /**
         * Encodes the specified GamePropertyItem message, length delimited. Does not implicitly {@link pb.GamePropertyItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GamePropertyItem
         * @static
         * @param {pb.IGamePropertyItem} message GamePropertyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GamePropertyItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GamePropertyItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GamePropertyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GamePropertyItem} GamePropertyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GamePropertyItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GamePropertyItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.oldValue = reader.int64();
                        break;
                    case 3:
                        message.newValue = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GamePropertyItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GamePropertyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GamePropertyItem} GamePropertyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GamePropertyItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GamePropertyItem message.
         * @function verify
         * @memberof pb.GamePropertyItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GamePropertyItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                switch (message.id) {
                    default:
                        return "id: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                        break;
                }
            if (message.oldValue != null && message.hasOwnProperty("oldValue"))
                if (!$util.isInteger(message.oldValue) && !(message.oldValue && $util.isInteger(message.oldValue.low) && $util.isInteger(message.oldValue.high)))
                    return "oldValue: integer|Long expected";
            if (message.newValue != null && message.hasOwnProperty("newValue"))
                if (!$util.isInteger(message.newValue) && !(message.newValue && $util.isInteger(message.newValue.low) && $util.isInteger(message.newValue.high)))
                    return "newValue: integer|Long expected";
            return null;
        };

        /**
         * Creates a GamePropertyItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GamePropertyItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GamePropertyItem} GamePropertyItem
         */
        GamePropertyItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GamePropertyItem)
                return object;
            var message = new $root.pb.GamePropertyItem();
            switch (object.id) {
                case "Gold":
                case 0:
                    message.id = 0;
                    break;
                case "Diamond":
                case 1:
                    message.id = 1;
                    break;
                case "Vip":
                case 2:
                    message.id = 2;
                    break;
                case "Exp":
                case 3:
                    message.id = 3;
                    break;
                case "Level":
                case 4:
                    message.id = 4;
                    break;
                case "Fame":
                case 5:
                    message.id = 5;
                    break;
                case "Coupon":
                case 6:
                    message.id = 6;
                    break;
                case "SVip":
                case 7:
                    message.id = 7;
                    break;
                case "UnlockDxxl":
                case 20:
                    message.id = 20;
                    break;
                case "UnlockQhxl":
                case 21:
                    message.id = 21;
                    break;
                case "UnlockTjdxl":
                case 22:
                    message.id = 22;
                    break;
                case "UnlockZbxl":
                case 23:
                    message.id = 23;
                    break;
                case "SVipExpiration":
                case 25:
                    message.id = 25;
                    break;
                case "K":
                case 26:
                    message.id = 26;
                    break;
                case "Tester":
                case 27:
                    message.id = 27;
                    break;
                case "VipExpiration":
                case 28:
                    message.id = 28;
                    break;
                case "RMB":
                case 29:
                    message.id = 29;
                    break;
                case "Max":
                case 30:
                    message.id = 30;
                    break;
            }
            if (object.oldValue != null)
                if ($util.Long)
                    (message.oldValue = $util.Long.fromValue(object.oldValue)).unsigned = false;
                else if (typeof object.oldValue === "string")
                    message.oldValue = parseInt(object.oldValue, 10);
                else if (typeof object.oldValue === "number")
                    message.oldValue = object.oldValue;
                else if (typeof object.oldValue === "object")
                    message.oldValue = new $util.LongBits(object.oldValue.low >>> 0, object.oldValue.high >>> 0).toNumber();
            if (object.newValue != null)
                if ($util.Long)
                    (message.newValue = $util.Long.fromValue(object.newValue)).unsigned = false;
                else if (typeof object.newValue === "string")
                    message.newValue = parseInt(object.newValue, 10);
                else if (typeof object.newValue === "number")
                    message.newValue = object.newValue;
                else if (typeof object.newValue === "object")
                    message.newValue = new $util.LongBits(object.newValue.low >>> 0, object.newValue.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GamePropertyItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GamePropertyItem
         * @static
         * @param {pb.GamePropertyItem} message GamePropertyItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GamePropertyItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = options.enums === String ? "Gold" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.oldValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.oldValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.newValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.newValue = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.enums === String ? $root.pb.GamePropertyId[message.id] : message.id;
            if (message.oldValue != null && message.hasOwnProperty("oldValue"))
                if (typeof message.oldValue === "number")
                    object.oldValue = options.longs === String ? String(message.oldValue) : message.oldValue;
                else
                    object.oldValue = options.longs === String ? $util.Long.prototype.toString.call(message.oldValue) : options.longs === Number ? new $util.LongBits(message.oldValue.low >>> 0, message.oldValue.high >>> 0).toNumber() : message.oldValue;
            if (message.newValue != null && message.hasOwnProperty("newValue"))
                if (typeof message.newValue === "number")
                    object.newValue = options.longs === String ? String(message.newValue) : message.newValue;
                else
                    object.newValue = options.longs === String ? $util.Long.prototype.toString.call(message.newValue) : options.longs === Number ? new $util.LongBits(message.newValue.low >>> 0, message.newValue.high >>> 0).toNumber() : message.newValue;
            return object;
        };

        /**
         * Converts this GamePropertyItem to JSON.
         * @function toJSON
         * @memberof pb.GamePropertyItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GamePropertyItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GamePropertyItem;
    })();

    pb.GameProperties = (function () {

        /**
         * Properties of a GameProperties.
         * @memberof pb
         * @interface IGameProperties
         * @property {Array.<pb.IGamePropertyItem>|null} [items] GameProperties items
         */

        /**
         * Constructs a new GameProperties.
         * @memberof pb
         * @classdesc Represents a GameProperties.
         * @implements IGameProperties
         * @constructor
         * @param {pb.IGameProperties=} [properties] Properties to set
         */
        function GameProperties(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameProperties items.
         * @member {Array.<pb.IGamePropertyItem>} items
         * @memberof pb.GameProperties
         * @instance
         */
        GameProperties.prototype.items = $util.emptyArray;

        /**
         * Creates a new GameProperties instance using the specified properties.
         * @function create
         * @memberof pb.GameProperties
         * @static
         * @param {pb.IGameProperties=} [properties] Properties to set
         * @returns {pb.GameProperties} GameProperties instance
         */
        GameProperties.create = function create(properties) {
            return new GameProperties(properties);
        };

        /**
         * Encodes the specified GameProperties message. Does not implicitly {@link pb.GameProperties.verify|verify} messages.
         * @function encode
         * @memberof pb.GameProperties
         * @static
         * @param {pb.IGameProperties} message GameProperties message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameProperties.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.GamePropertyItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GameProperties message, length delimited. Does not implicitly {@link pb.GameProperties.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameProperties
         * @static
         * @param {pb.IGameProperties} message GameProperties message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameProperties.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameProperties message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameProperties
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameProperties} GameProperties
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameProperties.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameProperties();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.GamePropertyItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameProperties message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameProperties
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameProperties} GameProperties
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameProperties.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameProperties message.
         * @function verify
         * @memberof pb.GameProperties
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameProperties.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.GamePropertyItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GameProperties message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameProperties
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameProperties} GameProperties
         */
        GameProperties.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameProperties)
                return object;
            var message = new $root.pb.GameProperties();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.GameProperties.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.GameProperties.items: object expected");
                    message.items[i] = $root.pb.GamePropertyItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GameProperties message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameProperties
         * @static
         * @param {pb.GameProperties} message GameProperties
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameProperties.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.GamePropertyItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this GameProperties to JSON.
         * @function toJSON
         * @memberof pb.GameProperties
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameProperties.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameProperties;
    })();

    pb.GameOperationItem = (function () {

        /**
         * Properties of a GameOperationItem.
         * @memberof pb
         * @interface IGameOperationItem
         * @property {pb.GameOperationId|null} [opId] GameOperationItem opId
         * @property {number|null} [code] GameOperationItem code
         * @property {pb.KType|null} [kType] GameOperationItem kType
         * @property {number|Long|null} [kTs] GameOperationItem kTs
         * @property {number|null} [kOffset] GameOperationItem kOffset
         * @property {number|null} [price] GameOperationItem price
         * @property {number|Long|null} [volume] GameOperationItem volume
         * @property {number|Long|null} [opTs] GameOperationItem opTs
         * @property {number|null} [volFraction] GameOperationItem volFraction
         */

        /**
         * Constructs a new GameOperationItem.
         * @memberof pb
         * @classdesc Represents a GameOperationItem.
         * @implements IGameOperationItem
         * @constructor
         * @param {pb.IGameOperationItem=} [properties] Properties to set
         */
        function GameOperationItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameOperationItem opId.
         * @member {pb.GameOperationId} opId
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.opId = 0;

        /**
         * GameOperationItem code.
         * @member {number} code
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.code = 0;

        /**
         * GameOperationItem kType.
         * @member {pb.KType} kType
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.kType = 0;

        /**
         * GameOperationItem kTs.
         * @member {number|Long} kTs
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.kTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameOperationItem kOffset.
         * @member {number} kOffset
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.kOffset = 0;

        /**
         * GameOperationItem price.
         * @member {number} price
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.price = 0;

        /**
         * GameOperationItem volume.
         * @member {number|Long} volume
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.volume = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameOperationItem opTs.
         * @member {number|Long} opTs
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.opTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameOperationItem volFraction.
         * @member {number} volFraction
         * @memberof pb.GameOperationItem
         * @instance
         */
        GameOperationItem.prototype.volFraction = 0;

        /**
         * Creates a new GameOperationItem instance using the specified properties.
         * @function create
         * @memberof pb.GameOperationItem
         * @static
         * @param {pb.IGameOperationItem=} [properties] Properties to set
         * @returns {pb.GameOperationItem} GameOperationItem instance
         */
        GameOperationItem.create = function create(properties) {
            return new GameOperationItem(properties);
        };

        /**
         * Encodes the specified GameOperationItem message. Does not implicitly {@link pb.GameOperationItem.verify|verify} messages.
         * @function encode
         * @memberof pb.GameOperationItem
         * @static
         * @param {pb.IGameOperationItem} message GameOperationItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOperationItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.opId != null && Object.hasOwnProperty.call(message, "opId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.opId);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.kType != null && Object.hasOwnProperty.call(message, "kType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.kType);
            if (message.kTs != null && Object.hasOwnProperty.call(message, "kTs"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.kTs);
            if (message.kOffset != null && Object.hasOwnProperty.call(message, "kOffset"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.kOffset);
            if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.price);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.volume);
            if (message.opTs != null && Object.hasOwnProperty.call(message, "opTs"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.opTs);
            if (message.volFraction != null && Object.hasOwnProperty.call(message, "volFraction"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.volFraction);
            return writer;
        };

        /**
         * Encodes the specified GameOperationItem message, length delimited. Does not implicitly {@link pb.GameOperationItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameOperationItem
         * @static
         * @param {pb.IGameOperationItem} message GameOperationItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOperationItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameOperationItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameOperationItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameOperationItem} GameOperationItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOperationItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameOperationItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.opId = reader.int32();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.kType = reader.int32();
                        break;
                    case 4:
                        message.kTs = reader.int64();
                        break;
                    case 5:
                        message.kOffset = reader.int32();
                        break;
                    case 6:
                        message.price = reader.double();
                        break;
                    case 7:
                        message.volume = reader.int64();
                        break;
                    case 8:
                        message.opTs = reader.int64();
                        break;
                    case 9:
                        message.volFraction = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameOperationItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameOperationItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameOperationItem} GameOperationItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOperationItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameOperationItem message.
         * @function verify
         * @memberof pb.GameOperationItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameOperationItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.opId != null && message.hasOwnProperty("opId"))
                switch (message.opId) {
                    default:
                        return "opId: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 150:
                        break;
                }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.kType != null && message.hasOwnProperty("kType"))
                switch (message.kType) {
                    default:
                        return "kType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.kTs != null && message.hasOwnProperty("kTs"))
                if (!$util.isInteger(message.kTs) && !(message.kTs && $util.isInteger(message.kTs.low) && $util.isInteger(message.kTs.high)))
                    return "kTs: integer|Long expected";
            if (message.kOffset != null && message.hasOwnProperty("kOffset"))
                if (!$util.isInteger(message.kOffset))
                    return "kOffset: integer expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (typeof message.price !== "number")
                    return "price: number expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))
                    return "volume: integer|Long expected";
            if (message.opTs != null && message.hasOwnProperty("opTs"))
                if (!$util.isInteger(message.opTs) && !(message.opTs && $util.isInteger(message.opTs.low) && $util.isInteger(message.opTs.high)))
                    return "opTs: integer|Long expected";
            if (message.volFraction != null && message.hasOwnProperty("volFraction"))
                if (typeof message.volFraction !== "number")
                    return "volFraction: number expected";
            return null;
        };

        /**
         * Creates a GameOperationItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameOperationItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameOperationItem} GameOperationItem
         */
        GameOperationItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameOperationItem)
                return object;
            var message = new $root.pb.GameOperationItem();
            switch (object.opId) {
                case "GameOperationId_NULL":
                case 0:
                    message.opId = 0;
                    break;
                case "Ask":
                case 1:
                    message.opId = 1;
                    break;
                case "Bid":
                case 2:
                    message.opId = 2;
                    break;
                case "Wait":
                case 3:
                    message.opId = 3;
                    break;
                case "Hold":
                case 4:
                    message.opId = 4;
                    break;
                case "Bid_Force":
                case 5:
                    message.opId = 5;
                    break;
                case "Ask_Force":
                case 6:
                    message.opId = 6;
                    break;
                case "Short":
                case 8:
                    message.opId = 8;
                    break;
                case "Long":
                case 9:
                    message.opId = 9;
                    break;
                case "END":
                case 150:
                    message.opId = 150;
                    break;
            }
            if (object.code != null)
                message.code = object.code | 0;
            switch (object.kType) {
                case "KType_NULL":
                case 0:
                    message.kType = 0;
                    break;
                case "Real":
                case 1:
                    message.kType = 1;
                    break;
                case "Min":
                case 2:
                    message.kType = 2;
                    break;
                case "MinToday":
                case 3:
                    message.kType = 3;
                    break;
                case "Min5":
                case 4:
                    message.kType = 4;
                    break;
                case "Min15":
                case 5:
                    message.kType = 5;
                    break;
                case "Min30":
                case 6:
                    message.kType = 6;
                    break;
                case "Min60":
                case 7:
                    message.kType = 7;
                    break;
                case "Day":
                case 10:
                    message.kType = 10;
                    break;
                case "Day7":
                case 11:
                    message.kType = 11;
                    break;
                case "Day30":
                case 12:
                    message.kType = 12;
                    break;
            }
            if (object.kTs != null)
                if ($util.Long)
                    (message.kTs = $util.Long.fromValue(object.kTs)).unsigned = false;
                else if (typeof object.kTs === "string")
                    message.kTs = parseInt(object.kTs, 10);
                else if (typeof object.kTs === "number")
                    message.kTs = object.kTs;
                else if (typeof object.kTs === "object")
                    message.kTs = new $util.LongBits(object.kTs.low >>> 0, object.kTs.high >>> 0).toNumber();
            if (object.kOffset != null)
                message.kOffset = object.kOffset | 0;
            if (object.price != null)
                message.price = Number(object.price);
            if (object.volume != null)
                if ($util.Long)
                    (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;
                else if (typeof object.volume === "string")
                    message.volume = parseInt(object.volume, 10);
                else if (typeof object.volume === "number")
                    message.volume = object.volume;
                else if (typeof object.volume === "object")
                    message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();
            if (object.opTs != null)
                if ($util.Long)
                    (message.opTs = $util.Long.fromValue(object.opTs)).unsigned = false;
                else if (typeof object.opTs === "string")
                    message.opTs = parseInt(object.opTs, 10);
                else if (typeof object.opTs === "number")
                    message.opTs = object.opTs;
                else if (typeof object.opTs === "object")
                    message.opTs = new $util.LongBits(object.opTs.low >>> 0, object.opTs.high >>> 0).toNumber();
            if (object.volFraction != null)
                message.volFraction = Number(object.volFraction);
            return message;
        };

        /**
         * Creates a plain object from a GameOperationItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameOperationItem
         * @static
         * @param {pb.GameOperationItem} message GameOperationItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameOperationItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.opId = options.enums === String ? "GameOperationId_NULL" : 0;
                object.code = 0;
                object.kType = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kTs = options.longs === String ? "0" : 0;
                object.kOffset = 0;
                object.price = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.volume = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.opTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.opTs = options.longs === String ? "0" : 0;
                object.volFraction = 0;
            }
            if (message.opId != null && message.hasOwnProperty("opId"))
                object.opId = options.enums === String ? $root.pb.GameOperationId[message.opId] : message.opId;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.kType != null && message.hasOwnProperty("kType"))
                object.kType = options.enums === String ? $root.pb.KType[message.kType] : message.kType;
            if (message.kTs != null && message.hasOwnProperty("kTs"))
                if (typeof message.kTs === "number")
                    object.kTs = options.longs === String ? String(message.kTs) : message.kTs;
                else
                    object.kTs = options.longs === String ? $util.Long.prototype.toString.call(message.kTs) : options.longs === Number ? new $util.LongBits(message.kTs.low >>> 0, message.kTs.high >>> 0).toNumber() : message.kTs;
            if (message.kOffset != null && message.hasOwnProperty("kOffset"))
                object.kOffset = message.kOffset;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (typeof message.volume === "number")
                    object.volume = options.longs === String ? String(message.volume) : message.volume;
                else
                    object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;
            if (message.opTs != null && message.hasOwnProperty("opTs"))
                if (typeof message.opTs === "number")
                    object.opTs = options.longs === String ? String(message.opTs) : message.opTs;
                else
                    object.opTs = options.longs === String ? $util.Long.prototype.toString.call(message.opTs) : options.longs === Number ? new $util.LongBits(message.opTs.low >>> 0, message.opTs.high >>> 0).toNumber() : message.opTs;
            if (message.volFraction != null && message.hasOwnProperty("volFraction"))
                object.volFraction = options.json && !isFinite(message.volFraction) ? String(message.volFraction) : message.volFraction;
            return object;
        };

        /**
         * Converts this GameOperationItem to JSON.
         * @function toJSON
         * @memberof pb.GameOperationItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameOperationItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameOperationItem;
    })();

    pb.GameOperations = (function () {

        /**
         * Properties of a GameOperations.
         * @memberof pb
         * @interface IGameOperations
         * @property {Array.<pb.IGameOperationItem>|null} [items] GameOperations items
         * @property {Array.<number>|null} [junXian] GameOperations junXian
         */

        /**
         * Constructs a new GameOperations.
         * @memberof pb
         * @classdesc Represents a GameOperations.
         * @implements IGameOperations
         * @constructor
         * @param {pb.IGameOperations=} [properties] Properties to set
         */
        function GameOperations(properties) {
            this.items = [];
            this.junXian = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameOperations items.
         * @member {Array.<pb.IGameOperationItem>} items
         * @memberof pb.GameOperations
         * @instance
         */
        GameOperations.prototype.items = $util.emptyArray;

        /**
         * GameOperations junXian.
         * @member {Array.<number>} junXian
         * @memberof pb.GameOperations
         * @instance
         */
        GameOperations.prototype.junXian = $util.emptyArray;

        /**
         * Creates a new GameOperations instance using the specified properties.
         * @function create
         * @memberof pb.GameOperations
         * @static
         * @param {pb.IGameOperations=} [properties] Properties to set
         * @returns {pb.GameOperations} GameOperations instance
         */
        GameOperations.create = function create(properties) {
            return new GameOperations(properties);
        };

        /**
         * Encodes the specified GameOperations message. Does not implicitly {@link pb.GameOperations.verify|verify} messages.
         * @function encode
         * @memberof pb.GameOperations
         * @static
         * @param {pb.IGameOperations} message GameOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOperations.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.GameOperationItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.junXian != null && message.junXian.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.junXian.length; ++i)
                    writer.int32(message.junXian[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified GameOperations message, length delimited. Does not implicitly {@link pb.GameOperations.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameOperations
         * @static
         * @param {pb.IGameOperations} message GameOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOperations.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameOperations message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameOperations} GameOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOperations.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameOperations();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.GameOperationItem.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.junXian && message.junXian.length))
                            message.junXian = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.junXian.push(reader.int32());
                        } else
                            message.junXian.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameOperations message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameOperations} GameOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOperations.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameOperations message.
         * @function verify
         * @memberof pb.GameOperations
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameOperations.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.GameOperationItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            if (message.junXian != null && message.hasOwnProperty("junXian")) {
                if (!Array.isArray(message.junXian))
                    return "junXian: array expected";
                for (var i = 0; i < message.junXian.length; ++i)
                    if (!$util.isInteger(message.junXian[i]))
                        return "junXian: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a GameOperations message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameOperations
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameOperations} GameOperations
         */
        GameOperations.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameOperations)
                return object;
            var message = new $root.pb.GameOperations();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.GameOperations.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.GameOperations.items: object expected");
                    message.items[i] = $root.pb.GameOperationItem.fromObject(object.items[i]);
                }
            }
            if (object.junXian) {
                if (!Array.isArray(object.junXian))
                    throw TypeError(".pb.GameOperations.junXian: array expected");
                message.junXian = [];
                for (var i = 0; i < object.junXian.length; ++i)
                    message.junXian[i] = object.junXian[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a GameOperations message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameOperations
         * @static
         * @param {pb.GameOperations} message GameOperations
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameOperations.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.items = [];
                object.junXian = [];
            }
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.GameOperationItem.toObject(message.items[j], options);
            }
            if (message.junXian && message.junXian.length) {
                object.junXian = [];
                for (var j = 0; j < message.junXian.length; ++j)
                    object.junXian[j] = message.junXian[j];
            }
            return object;
        };

        /**
         * Converts this GameOperations to JSON.
         * @function toJSON
         * @memberof pb.GameOperations
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameOperations.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameOperations;
    })();

    pb.GameResult = (function () {

        /**
         * Properties of a GameResult.
         * @memberof pb
         * @interface IGameResult
         * @property {number|null} [uid] GameResult uid
         * @property {pb.GameType|null} [gType] GameResult gType
         * @property {number|null} [quotesCode] GameResult quotesCode
         * @property {pb.KType|null} [kType] GameResult kType
         * @property {number|Long|null} [kFrom] GameResult kFrom
         * @property {number|Long|null} [kTo] GameResult kTo
         * @property {number|null} [stockProfitRate] GameResult stockProfitRate
         * @property {number|null} [userProfitRate] GameResult userProfitRate
         * @property {number|Long|null} [userCapital] GameResult userCapital
         * @property {number|Long|null} [userProfit] GameResult userProfit
         * @property {number|Long|null} [ts] GameResult ts
         * @property {number|null} [rank] GameResult rank
         * @property {number|Long|null} [refId] GameResult refId
         * @property {number|Long|null} [kStartup] GameResult kStartup
         * @property {number|Long|null} [kStop] GameResult kStop
         */

        /**
         * Constructs a new GameResult.
         * @memberof pb
         * @classdesc Represents a GameResult.
         * @implements IGameResult
         * @constructor
         * @param {pb.IGameResult=} [properties] Properties to set
         */
        function GameResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameResult uid.
         * @member {number} uid
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.uid = 0;

        /**
         * GameResult gType.
         * @member {pb.GameType} gType
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.gType = 0;

        /**
         * GameResult quotesCode.
         * @member {number} quotesCode
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.quotesCode = 0;

        /**
         * GameResult kType.
         * @member {pb.KType} kType
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.kType = 0;

        /**
         * GameResult kFrom.
         * @member {number|Long} kFrom
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.kFrom = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult kTo.
         * @member {number|Long} kTo
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.kTo = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult stockProfitRate.
         * @member {number} stockProfitRate
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.stockProfitRate = 0;

        /**
         * GameResult userProfitRate.
         * @member {number} userProfitRate
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.userProfitRate = 0;

        /**
         * GameResult userCapital.
         * @member {number|Long} userCapital
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.userCapital = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult userProfit.
         * @member {number|Long} userProfit
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.userProfit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult ts.
         * @member {number|Long} ts
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult rank.
         * @member {number} rank
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.rank = 0;

        /**
         * GameResult refId.
         * @member {number|Long} refId
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.refId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult kStartup.
         * @member {number|Long} kStartup
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.kStartup = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * GameResult kStop.
         * @member {number|Long} kStop
         * @memberof pb.GameResult
         * @instance
         */
        GameResult.prototype.kStop = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new GameResult instance using the specified properties.
         * @function create
         * @memberof pb.GameResult
         * @static
         * @param {pb.IGameResult=} [properties] Properties to set
         * @returns {pb.GameResult} GameResult instance
         */
        GameResult.create = function create(properties) {
            return new GameResult(properties);
        };

        /**
         * Encodes the specified GameResult message. Does not implicitly {@link pb.GameResult.verify|verify} messages.
         * @function encode
         * @memberof pb.GameResult
         * @static
         * @param {pb.IGameResult} message GameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.gType != null && Object.hasOwnProperty.call(message, "gType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gType);
            if (message.quotesCode != null && Object.hasOwnProperty.call(message, "quotesCode"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.quotesCode);
            if (message.kType != null && Object.hasOwnProperty.call(message, "kType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kType);
            if (message.kFrom != null && Object.hasOwnProperty.call(message, "kFrom"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.kFrom);
            if (message.kTo != null && Object.hasOwnProperty.call(message, "kTo"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.kTo);
            if (message.stockProfitRate != null && Object.hasOwnProperty.call(message, "stockProfitRate"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.stockProfitRate);
            if (message.userProfitRate != null && Object.hasOwnProperty.call(message, "userProfitRate"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.userProfitRate);
            if (message.userCapital != null && Object.hasOwnProperty.call(message, "userCapital"))
                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.userCapital);
            if (message.userProfit != null && Object.hasOwnProperty.call(message, "userProfit"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.userProfit);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.ts);
            if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.rank);
            if (message.refId != null && Object.hasOwnProperty.call(message, "refId"))
                writer.uint32(/* id 13, wireType 0 =*/104).int64(message.refId);
            if (message.kStartup != null && Object.hasOwnProperty.call(message, "kStartup"))
                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.kStartup);
            if (message.kStop != null && Object.hasOwnProperty.call(message, "kStop"))
                writer.uint32(/* id 15, wireType 0 =*/120).int64(message.kStop);
            return writer;
        };

        /**
         * Encodes the specified GameResult message, length delimited. Does not implicitly {@link pb.GameResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.GameResult
         * @static
         * @param {pb.IGameResult} message GameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameResult message from the specified reader or buffer.
         * @function decode
         * @memberof pb.GameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.GameResult} GameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.GameResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.gType = reader.int32();
                        break;
                    case 3:
                        message.quotesCode = reader.int32();
                        break;
                    case 4:
                        message.kType = reader.int32();
                        break;
                    case 5:
                        message.kFrom = reader.int64();
                        break;
                    case 6:
                        message.kTo = reader.int64();
                        break;
                    case 7:
                        message.stockProfitRate = reader.double();
                        break;
                    case 8:
                        message.userProfitRate = reader.double();
                        break;
                    case 9:
                        message.userCapital = reader.int64();
                        break;
                    case 10:
                        message.userProfit = reader.int64();
                        break;
                    case 11:
                        message.ts = reader.int64();
                        break;
                    case 12:
                        message.rank = reader.int32();
                        break;
                    case 13:
                        message.refId = reader.int64();
                        break;
                    case 14:
                        message.kStartup = reader.int64();
                        break;
                    case 15:
                        message.kStop = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.GameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.GameResult} GameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameResult message.
         * @function verify
         * @memberof pb.GameResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.gType != null && message.hasOwnProperty("gType"))
                switch (message.gType) {
                    default:
                        return "gType: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.quotesCode != null && message.hasOwnProperty("quotesCode"))
                if (!$util.isInteger(message.quotesCode))
                    return "quotesCode: integer expected";
            if (message.kType != null && message.hasOwnProperty("kType"))
                switch (message.kType) {
                    default:
                        return "kType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.kFrom != null && message.hasOwnProperty("kFrom"))
                if (!$util.isInteger(message.kFrom) && !(message.kFrom && $util.isInteger(message.kFrom.low) && $util.isInteger(message.kFrom.high)))
                    return "kFrom: integer|Long expected";
            if (message.kTo != null && message.hasOwnProperty("kTo"))
                if (!$util.isInteger(message.kTo) && !(message.kTo && $util.isInteger(message.kTo.low) && $util.isInteger(message.kTo.high)))
                    return "kTo: integer|Long expected";
            if (message.stockProfitRate != null && message.hasOwnProperty("stockProfitRate"))
                if (typeof message.stockProfitRate !== "number")
                    return "stockProfitRate: number expected";
            if (message.userProfitRate != null && message.hasOwnProperty("userProfitRate"))
                if (typeof message.userProfitRate !== "number")
                    return "userProfitRate: number expected";
            if (message.userCapital != null && message.hasOwnProperty("userCapital"))
                if (!$util.isInteger(message.userCapital) && !(message.userCapital && $util.isInteger(message.userCapital.low) && $util.isInteger(message.userCapital.high)))
                    return "userCapital: integer|Long expected";
            if (message.userProfit != null && message.hasOwnProperty("userProfit"))
                if (!$util.isInteger(message.userProfit) && !(message.userProfit && $util.isInteger(message.userProfit.low) && $util.isInteger(message.userProfit.high)))
                    return "userProfit: integer|Long expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.rank != null && message.hasOwnProperty("rank"))
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
            if (message.refId != null && message.hasOwnProperty("refId"))
                if (!$util.isInteger(message.refId) && !(message.refId && $util.isInteger(message.refId.low) && $util.isInteger(message.refId.high)))
                    return "refId: integer|Long expected";
            if (message.kStartup != null && message.hasOwnProperty("kStartup"))
                if (!$util.isInteger(message.kStartup) && !(message.kStartup && $util.isInteger(message.kStartup.low) && $util.isInteger(message.kStartup.high)))
                    return "kStartup: integer|Long expected";
            if (message.kStop != null && message.hasOwnProperty("kStop"))
                if (!$util.isInteger(message.kStop) && !(message.kStop && $util.isInteger(message.kStop.low) && $util.isInteger(message.kStop.high)))
                    return "kStop: integer|Long expected";
            return null;
        };

        /**
         * Creates a GameResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.GameResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.GameResult} GameResult
         */
        GameResult.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.GameResult)
                return object;
            var message = new $root.pb.GameResult();
            if (object.uid != null)
                message.uid = object.uid | 0;
            switch (object.gType) {
                case "GameType_NULL":
                case 0:
                    message.gType = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.gType = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.gType = 4;
                    break;
                case "FenShi":
                case 5:
                    message.gType = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.gType = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.gType = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.gType = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.gType = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.gType = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.gType = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.gType = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.gType = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.gType = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.gType = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.gType = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.gType = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.gType = 30;
                    break;
            }
            if (object.quotesCode != null)
                message.quotesCode = object.quotesCode | 0;
            switch (object.kType) {
                case "KType_NULL":
                case 0:
                    message.kType = 0;
                    break;
                case "Real":
                case 1:
                    message.kType = 1;
                    break;
                case "Min":
                case 2:
                    message.kType = 2;
                    break;
                case "MinToday":
                case 3:
                    message.kType = 3;
                    break;
                case "Min5":
                case 4:
                    message.kType = 4;
                    break;
                case "Min15":
                case 5:
                    message.kType = 5;
                    break;
                case "Min30":
                case 6:
                    message.kType = 6;
                    break;
                case "Min60":
                case 7:
                    message.kType = 7;
                    break;
                case "Day":
                case 10:
                    message.kType = 10;
                    break;
                case "Day7":
                case 11:
                    message.kType = 11;
                    break;
                case "Day30":
                case 12:
                    message.kType = 12;
                    break;
            }
            if (object.kFrom != null)
                if ($util.Long)
                    (message.kFrom = $util.Long.fromValue(object.kFrom)).unsigned = false;
                else if (typeof object.kFrom === "string")
                    message.kFrom = parseInt(object.kFrom, 10);
                else if (typeof object.kFrom === "number")
                    message.kFrom = object.kFrom;
                else if (typeof object.kFrom === "object")
                    message.kFrom = new $util.LongBits(object.kFrom.low >>> 0, object.kFrom.high >>> 0).toNumber();
            if (object.kTo != null)
                if ($util.Long)
                    (message.kTo = $util.Long.fromValue(object.kTo)).unsigned = false;
                else if (typeof object.kTo === "string")
                    message.kTo = parseInt(object.kTo, 10);
                else if (typeof object.kTo === "number")
                    message.kTo = object.kTo;
                else if (typeof object.kTo === "object")
                    message.kTo = new $util.LongBits(object.kTo.low >>> 0, object.kTo.high >>> 0).toNumber();
            if (object.stockProfitRate != null)
                message.stockProfitRate = Number(object.stockProfitRate);
            if (object.userProfitRate != null)
                message.userProfitRate = Number(object.userProfitRate);
            if (object.userCapital != null)
                if ($util.Long)
                    (message.userCapital = $util.Long.fromValue(object.userCapital)).unsigned = false;
                else if (typeof object.userCapital === "string")
                    message.userCapital = parseInt(object.userCapital, 10);
                else if (typeof object.userCapital === "number")
                    message.userCapital = object.userCapital;
                else if (typeof object.userCapital === "object")
                    message.userCapital = new $util.LongBits(object.userCapital.low >>> 0, object.userCapital.high >>> 0).toNumber();
            if (object.userProfit != null)
                if ($util.Long)
                    (message.userProfit = $util.Long.fromValue(object.userProfit)).unsigned = false;
                else if (typeof object.userProfit === "string")
                    message.userProfit = parseInt(object.userProfit, 10);
                else if (typeof object.userProfit === "number")
                    message.userProfit = object.userProfit;
                else if (typeof object.userProfit === "object")
                    message.userProfit = new $util.LongBits(object.userProfit.low >>> 0, object.userProfit.high >>> 0).toNumber();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.rank != null)
                message.rank = object.rank | 0;
            if (object.refId != null)
                if ($util.Long)
                    (message.refId = $util.Long.fromValue(object.refId)).unsigned = false;
                else if (typeof object.refId === "string")
                    message.refId = parseInt(object.refId, 10);
                else if (typeof object.refId === "number")
                    message.refId = object.refId;
                else if (typeof object.refId === "object")
                    message.refId = new $util.LongBits(object.refId.low >>> 0, object.refId.high >>> 0).toNumber();
            if (object.kStartup != null)
                if ($util.Long)
                    (message.kStartup = $util.Long.fromValue(object.kStartup)).unsigned = false;
                else if (typeof object.kStartup === "string")
                    message.kStartup = parseInt(object.kStartup, 10);
                else if (typeof object.kStartup === "number")
                    message.kStartup = object.kStartup;
                else if (typeof object.kStartup === "object")
                    message.kStartup = new $util.LongBits(object.kStartup.low >>> 0, object.kStartup.high >>> 0).toNumber();
            if (object.kStop != null)
                if ($util.Long)
                    (message.kStop = $util.Long.fromValue(object.kStop)).unsigned = false;
                else if (typeof object.kStop === "string")
                    message.kStop = parseInt(object.kStop, 10);
                else if (typeof object.kStop === "number")
                    message.kStop = object.kStop;
                else if (typeof object.kStop === "object")
                    message.kStop = new $util.LongBits(object.kStop.low >>> 0, object.kStop.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GameResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.GameResult
         * @static
         * @param {pb.GameResult} message GameResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.gType = options.enums === String ? "GameType_NULL" : 0;
                object.quotesCode = 0;
                object.kType = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kFrom = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kFrom = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kTo = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kTo = options.longs === String ? "0" : 0;
                object.stockProfitRate = 0;
                object.userProfitRate = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userCapital = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userCapital = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userProfit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userProfit = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.rank = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.refId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.refId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kStartup = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kStartup = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kStop = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kStop = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.gType != null && message.hasOwnProperty("gType"))
                object.gType = options.enums === String ? $root.pb.GameType[message.gType] : message.gType;
            if (message.quotesCode != null && message.hasOwnProperty("quotesCode"))
                object.quotesCode = message.quotesCode;
            if (message.kType != null && message.hasOwnProperty("kType"))
                object.kType = options.enums === String ? $root.pb.KType[message.kType] : message.kType;
            if (message.kFrom != null && message.hasOwnProperty("kFrom"))
                if (typeof message.kFrom === "number")
                    object.kFrom = options.longs === String ? String(message.kFrom) : message.kFrom;
                else
                    object.kFrom = options.longs === String ? $util.Long.prototype.toString.call(message.kFrom) : options.longs === Number ? new $util.LongBits(message.kFrom.low >>> 0, message.kFrom.high >>> 0).toNumber() : message.kFrom;
            if (message.kTo != null && message.hasOwnProperty("kTo"))
                if (typeof message.kTo === "number")
                    object.kTo = options.longs === String ? String(message.kTo) : message.kTo;
                else
                    object.kTo = options.longs === String ? $util.Long.prototype.toString.call(message.kTo) : options.longs === Number ? new $util.LongBits(message.kTo.low >>> 0, message.kTo.high >>> 0).toNumber() : message.kTo;
            if (message.stockProfitRate != null && message.hasOwnProperty("stockProfitRate"))
                object.stockProfitRate = options.json && !isFinite(message.stockProfitRate) ? String(message.stockProfitRate) : message.stockProfitRate;
            if (message.userProfitRate != null && message.hasOwnProperty("userProfitRate"))
                object.userProfitRate = options.json && !isFinite(message.userProfitRate) ? String(message.userProfitRate) : message.userProfitRate;
            if (message.userCapital != null && message.hasOwnProperty("userCapital"))
                if (typeof message.userCapital === "number")
                    object.userCapital = options.longs === String ? String(message.userCapital) : message.userCapital;
                else
                    object.userCapital = options.longs === String ? $util.Long.prototype.toString.call(message.userCapital) : options.longs === Number ? new $util.LongBits(message.userCapital.low >>> 0, message.userCapital.high >>> 0).toNumber() : message.userCapital;
            if (message.userProfit != null && message.hasOwnProperty("userProfit"))
                if (typeof message.userProfit === "number")
                    object.userProfit = options.longs === String ? String(message.userProfit) : message.userProfit;
                else
                    object.userProfit = options.longs === String ? $util.Long.prototype.toString.call(message.userProfit) : options.longs === Number ? new $util.LongBits(message.userProfit.low >>> 0, message.userProfit.high >>> 0).toNumber() : message.userProfit;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.rank != null && message.hasOwnProperty("rank"))
                object.rank = message.rank;
            if (message.refId != null && message.hasOwnProperty("refId"))
                if (typeof message.refId === "number")
                    object.refId = options.longs === String ? String(message.refId) : message.refId;
                else
                    object.refId = options.longs === String ? $util.Long.prototype.toString.call(message.refId) : options.longs === Number ? new $util.LongBits(message.refId.low >>> 0, message.refId.high >>> 0).toNumber() : message.refId;
            if (message.kStartup != null && message.hasOwnProperty("kStartup"))
                if (typeof message.kStartup === "number")
                    object.kStartup = options.longs === String ? String(message.kStartup) : message.kStartup;
                else
                    object.kStartup = options.longs === String ? $util.Long.prototype.toString.call(message.kStartup) : options.longs === Number ? new $util.LongBits(message.kStartup.low >>> 0, message.kStartup.high >>> 0).toNumber() : message.kStartup;
            if (message.kStop != null && message.hasOwnProperty("kStop"))
                if (typeof message.kStop === "number")
                    object.kStop = options.longs === String ? String(message.kStop) : message.kStop;
                else
                    object.kStop = options.longs === String ? $util.Long.prototype.toString.call(message.kStop) : options.longs === Number ? new $util.LongBits(message.kStop.low >>> 0, message.kStop.high >>> 0).toNumber() : message.kStop;
            return object;
        };

        /**
         * Converts this GameResult to JSON.
         * @function toJSON
         * @memberof pb.GameResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameResult;
    })();

    pb.CmdGameLogin = (function () {

        /**
         * Properties of a CmdGameLogin.
         * @memberof pb
         * @interface ICmdGameLogin
         * @property {number|null} [uid] CmdGameLogin uid
         * @property {string|null} [token] CmdGameLogin token
         */

        /**
         * Constructs a new CmdGameLogin.
         * @memberof pb
         * @classdesc Represents a CmdGameLogin.
         * @implements ICmdGameLogin
         * @constructor
         * @param {pb.ICmdGameLogin=} [properties] Properties to set
         */
        function CmdGameLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameLogin uid.
         * @member {number} uid
         * @memberof pb.CmdGameLogin
         * @instance
         */
        CmdGameLogin.prototype.uid = 0;

        /**
         * CmdGameLogin token.
         * @member {string} token
         * @memberof pb.CmdGameLogin
         * @instance
         */
        CmdGameLogin.prototype.token = "";

        /**
         * Creates a new CmdGameLogin instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameLogin
         * @static
         * @param {pb.ICmdGameLogin=} [properties] Properties to set
         * @returns {pb.CmdGameLogin} CmdGameLogin instance
         */
        CmdGameLogin.create = function create(properties) {
            return new CmdGameLogin(properties);
        };

        /**
         * Encodes the specified CmdGameLogin message. Does not implicitly {@link pb.CmdGameLogin.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameLogin
         * @static
         * @param {pb.ICmdGameLogin} message CmdGameLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            return writer;
        };

        /**
         * Encodes the specified CmdGameLogin message, length delimited. Does not implicitly {@link pb.CmdGameLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameLogin
         * @static
         * @param {pb.ICmdGameLogin} message CmdGameLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameLogin message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameLogin} CmdGameLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameLogin} CmdGameLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameLogin message.
         * @function verify
         * @memberof pb.CmdGameLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            return null;
        };

        /**
         * Creates a CmdGameLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameLogin} CmdGameLogin
         */
        CmdGameLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameLogin)
                return object;
            var message = new $root.pb.CmdGameLogin();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.token != null)
                message.token = String(object.token);
            return message;
        };

        /**
         * Creates a plain object from a CmdGameLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameLogin
         * @static
         * @param {pb.CmdGameLogin} message CmdGameLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.token = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this CmdGameLogin to JSON.
         * @function toJSON
         * @memberof pb.CmdGameLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameLogin;
    })();

    pb.CmdGameLoginReply = (function () {

        /**
         * Properties of a CmdGameLoginReply.
         * @memberof pb
         * @interface ICmdGameLoginReply
         * @property {pb.IErrorInfo|null} [result] CmdGameLoginReply result
         * @property {pb.IGameData|null} [data] CmdGameLoginReply data
         */

        /**
         * Constructs a new CmdGameLoginReply.
         * @memberof pb
         * @classdesc Represents a CmdGameLoginReply.
         * @implements ICmdGameLoginReply
         * @constructor
         * @param {pb.ICmdGameLoginReply=} [properties] Properties to set
         */
        function CmdGameLoginReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameLoginReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdGameLoginReply
         * @instance
         */
        CmdGameLoginReply.prototype.result = null;

        /**
         * CmdGameLoginReply data.
         * @member {pb.IGameData|null|undefined} data
         * @memberof pb.CmdGameLoginReply
         * @instance
         */
        CmdGameLoginReply.prototype.data = null;

        /**
         * Creates a new CmdGameLoginReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {pb.ICmdGameLoginReply=} [properties] Properties to set
         * @returns {pb.CmdGameLoginReply} CmdGameLoginReply instance
         */
        CmdGameLoginReply.create = function create(properties) {
            return new CmdGameLoginReply(properties);
        };

        /**
         * Encodes the specified CmdGameLoginReply message. Does not implicitly {@link pb.CmdGameLoginReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {pb.ICmdGameLoginReply} message CmdGameLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameLoginReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                $root.pb.GameData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdGameLoginReply message, length delimited. Does not implicitly {@link pb.CmdGameLoginReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {pb.ICmdGameLoginReply} message CmdGameLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameLoginReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameLoginReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameLoginReply} CmdGameLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameLoginReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameLoginReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.data = $root.pb.GameData.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameLoginReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameLoginReply} CmdGameLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameLoginReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameLoginReply message.
         * @function verify
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameLoginReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.pb.GameData.verify(message.data);
                if (error)
                    return "data." + error;
            }
            return null;
        };

        /**
         * Creates a CmdGameLoginReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameLoginReply} CmdGameLoginReply
         */
        CmdGameLoginReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameLoginReply)
                return object;
            var message = new $root.pb.CmdGameLoginReply();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdGameLoginReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".pb.CmdGameLoginReply.data: object expected");
                message.data = $root.pb.GameData.fromObject(object.data);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdGameLoginReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameLoginReply
         * @static
         * @param {pb.CmdGameLoginReply} message CmdGameLoginReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameLoginReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.data = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.pb.GameData.toObject(message.data, options);
            return object;
        };

        /**
         * Converts this CmdGameLoginReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGameLoginReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameLoginReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameLoginReply;
    })();

    pb.CmdUploadIcon = (function () {

        /**
         * Properties of a CmdUploadIcon.
         * @memberof pb
         * @interface ICmdUploadIcon
         * @property {number|null} [uid] CmdUploadIcon uid
         * @property {Uint8Array|null} [icon] CmdUploadIcon icon
         */

        /**
         * Constructs a new CmdUploadIcon.
         * @memberof pb
         * @classdesc Represents a CmdUploadIcon.
         * @implements ICmdUploadIcon
         * @constructor
         * @param {pb.ICmdUploadIcon=} [properties] Properties to set
         */
        function CmdUploadIcon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUploadIcon uid.
         * @member {number} uid
         * @memberof pb.CmdUploadIcon
         * @instance
         */
        CmdUploadIcon.prototype.uid = 0;

        /**
         * CmdUploadIcon icon.
         * @member {Uint8Array} icon
         * @memberof pb.CmdUploadIcon
         * @instance
         */
        CmdUploadIcon.prototype.icon = $util.newBuffer([]);

        /**
         * Creates a new CmdUploadIcon instance using the specified properties.
         * @function create
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {pb.ICmdUploadIcon=} [properties] Properties to set
         * @returns {pb.CmdUploadIcon} CmdUploadIcon instance
         */
        CmdUploadIcon.create = function create(properties) {
            return new CmdUploadIcon(properties);
        };

        /**
         * Encodes the specified CmdUploadIcon message. Does not implicitly {@link pb.CmdUploadIcon.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {pb.ICmdUploadIcon} message CmdUploadIcon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUploadIcon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.icon);
            return writer;
        };

        /**
         * Encodes the specified CmdUploadIcon message, length delimited. Does not implicitly {@link pb.CmdUploadIcon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {pb.ICmdUploadIcon} message CmdUploadIcon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUploadIcon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUploadIcon message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUploadIcon} CmdUploadIcon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUploadIcon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUploadIcon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.icon = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUploadIcon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUploadIcon} CmdUploadIcon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUploadIcon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUploadIcon message.
         * @function verify
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUploadIcon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!(message.icon && typeof message.icon.length === "number" || $util.isString(message.icon)))
                    return "icon: buffer expected";
            return null;
        };

        /**
         * Creates a CmdUploadIcon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUploadIcon} CmdUploadIcon
         */
        CmdUploadIcon.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUploadIcon)
                return object;
            var message = new $root.pb.CmdUploadIcon();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.icon != null)
                if (typeof object.icon === "string")
                    $util.base64.decode(object.icon, message.icon = $util.newBuffer($util.base64.length(object.icon)), 0);
                else if (object.icon.length)
                    message.icon = object.icon;
            return message;
        };

        /**
         * Creates a plain object from a CmdUploadIcon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUploadIcon
         * @static
         * @param {pb.CmdUploadIcon} message CmdUploadIcon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUploadIcon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                if (options.bytes === String)
                    object.icon = "";
                else {
                    object.icon = [];
                    if (options.bytes !== Array)
                        object.icon = $util.newBuffer(object.icon);
                }
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = options.bytes === String ? $util.base64.encode(message.icon, 0, message.icon.length) : options.bytes === Array ? Array.prototype.slice.call(message.icon) : message.icon;
            return object;
        };

        /**
         * Converts this CmdUploadIcon to JSON.
         * @function toJSON
         * @memberof pb.CmdUploadIcon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUploadIcon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUploadIcon;
    })();

    pb.PlayerInfo = (function () {

        /**
         * Properties of a PlayerInfo.
         * @memberof pb
         * @interface IPlayerInfo
         * @property {number|null} [uid] PlayerInfo uid
         * @property {string|null} [nick] PlayerInfo nick
         * @property {string|null} [icon] PlayerInfo icon
         * @property {string|null} [gender] PlayerInfo gender
         * @property {string|null} [location] PlayerInfo location
         * @property {Array.<number|Long>|null} [properties] PlayerInfo properties
         * @property {Array.<pb.IGameCounter>|null} [counters] PlayerInfo counters
         */

        /**
         * Constructs a new PlayerInfo.
         * @memberof pb
         * @classdesc Represents a PlayerInfo.
         * @implements IPlayerInfo
         * @constructor
         * @param {pb.IPlayerInfo=} [properties] Properties to set
         */
        function PlayerInfo(properties) {
            this.properties = [];
            this.counters = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlayerInfo uid.
         * @member {number} uid
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.uid = 0;

        /**
         * PlayerInfo nick.
         * @member {string} nick
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.nick = "";

        /**
         * PlayerInfo icon.
         * @member {string} icon
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.icon = "";

        /**
         * PlayerInfo gender.
         * @member {string} gender
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.gender = "";

        /**
         * PlayerInfo location.
         * @member {string} location
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.location = "";

        /**
         * PlayerInfo properties.
         * @member {Array.<number|Long>} properties
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.properties = $util.emptyArray;

        /**
         * PlayerInfo counters.
         * @member {Array.<pb.IGameCounter>} counters
         * @memberof pb.PlayerInfo
         * @instance
         */
        PlayerInfo.prototype.counters = $util.emptyArray;

        /**
         * Creates a new PlayerInfo instance using the specified properties.
         * @function create
         * @memberof pb.PlayerInfo
         * @static
         * @param {pb.IPlayerInfo=} [properties] Properties to set
         * @returns {pb.PlayerInfo} PlayerInfo instance
         */
        PlayerInfo.create = function create(properties) {
            return new PlayerInfo(properties);
        };

        /**
         * Encodes the specified PlayerInfo message. Does not implicitly {@link pb.PlayerInfo.verify|verify} messages.
         * @function encode
         * @memberof pb.PlayerInfo
         * @static
         * @param {pb.IPlayerInfo} message PlayerInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.nick != null && Object.hasOwnProperty.call(message, "nick"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.gender);
            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.location);
            if (message.properties != null && message.properties.length) {
                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                for (var i = 0; i < message.properties.length; ++i)
                    writer.int64(message.properties[i]);
                writer.ldelim();
            }
            if (message.counters != null && message.counters.length)
                for (var i = 0; i < message.counters.length; ++i)
                    $root.pb.GameCounter.encode(message.counters[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PlayerInfo message, length delimited. Does not implicitly {@link pb.PlayerInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.PlayerInfo
         * @static
         * @param {pb.IPlayerInfo} message PlayerInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlayerInfo message from the specified reader or buffer.
         * @function decode
         * @memberof pb.PlayerInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.PlayerInfo} PlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.PlayerInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.icon = reader.string();
                        break;
                    case 4:
                        message.gender = reader.string();
                        break;
                    case 5:
                        message.location = reader.string();
                        break;
                    case 6:
                        if (!(message.properties && message.properties.length))
                            message.properties = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.properties.push(reader.int64());
                        } else
                            message.properties.push(reader.int64());
                        break;
                    case 7:
                        if (!(message.counters && message.counters.length))
                            message.counters = [];
                        message.counters.push($root.pb.GameCounter.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a PlayerInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.PlayerInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.PlayerInfo} PlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlayerInfo message.
         * @function verify
         * @memberof pb.PlayerInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.nick != null && message.hasOwnProperty("nick"))
                if (!$util.isString(message.nick))
                    return "nick: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (!$util.isString(message.gender))
                    return "gender: string expected";
            if (message.location != null && message.hasOwnProperty("location"))
                if (!$util.isString(message.location))
                    return "location: string expected";
            if (message.properties != null && message.hasOwnProperty("properties")) {
                if (!Array.isArray(message.properties))
                    return "properties: array expected";
                for (var i = 0; i < message.properties.length; ++i)
                    if (!$util.isInteger(message.properties[i]) && !(message.properties[i] && $util.isInteger(message.properties[i].low) && $util.isInteger(message.properties[i].high)))
                        return "properties: integer|Long[] expected";
            }
            if (message.counters != null && message.hasOwnProperty("counters")) {
                if (!Array.isArray(message.counters))
                    return "counters: array expected";
                for (var i = 0; i < message.counters.length; ++i) {
                    var error = $root.pb.GameCounter.verify(message.counters[i]);
                    if (error)
                        return "counters." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PlayerInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.PlayerInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.PlayerInfo} PlayerInfo
         */
        PlayerInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.PlayerInfo)
                return object;
            var message = new $root.pb.PlayerInfo();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.nick != null)
                message.nick = String(object.nick);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.gender != null)
                message.gender = String(object.gender);
            if (object.location != null)
                message.location = String(object.location);
            if (object.properties) {
                if (!Array.isArray(object.properties))
                    throw TypeError(".pb.PlayerInfo.properties: array expected");
                message.properties = [];
                for (var i = 0; i < object.properties.length; ++i)
                    if ($util.Long)
                        (message.properties[i] = $util.Long.fromValue(object.properties[i])).unsigned = false;
                    else if (typeof object.properties[i] === "string")
                        message.properties[i] = parseInt(object.properties[i], 10);
                    else if (typeof object.properties[i] === "number")
                        message.properties[i] = object.properties[i];
                    else if (typeof object.properties[i] === "object")
                        message.properties[i] = new $util.LongBits(object.properties[i].low >>> 0, object.properties[i].high >>> 0).toNumber();
            }
            if (object.counters) {
                if (!Array.isArray(object.counters))
                    throw TypeError(".pb.PlayerInfo.counters: array expected");
                message.counters = [];
                for (var i = 0; i < object.counters.length; ++i) {
                    if (typeof object.counters[i] !== "object")
                        throw TypeError(".pb.PlayerInfo.counters: object expected");
                    message.counters[i] = $root.pb.GameCounter.fromObject(object.counters[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PlayerInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.PlayerInfo
         * @static
         * @param {pb.PlayerInfo} message PlayerInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.properties = [];
                object.counters = [];
            }
            if (options.defaults) {
                object.uid = 0;
                object.nick = "";
                object.icon = "";
                object.gender = "";
                object.location = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.nick != null && message.hasOwnProperty("nick"))
                object.nick = message.nick;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
            if (message.properties && message.properties.length) {
                object.properties = [];
                for (var j = 0; j < message.properties.length; ++j)
                    if (typeof message.properties[j] === "number")
                        object.properties[j] = options.longs === String ? String(message.properties[j]) : message.properties[j];
                    else
                        object.properties[j] = options.longs === String ? $util.Long.prototype.toString.call(message.properties[j]) : options.longs === Number ? new $util.LongBits(message.properties[j].low >>> 0, message.properties[j].high >>> 0).toNumber() : message.properties[j];
            }
            if (message.counters && message.counters.length) {
                object.counters = [];
                for (var j = 0; j < message.counters.length; ++j)
                    object.counters[j] = $root.pb.GameCounter.toObject(message.counters[j], options);
            }
            return object;
        };

        /**
         * Converts this PlayerInfo to JSON.
         * @function toJSON
         * @memberof pb.PlayerInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerInfo;
    })();

    pb.CmdEditFavorList = (function () {

        /**
         * Properties of a CmdEditFavorList.
         * @memberof pb
         * @interface ICmdEditFavorList
         * @property {boolean|null} [removed] CmdEditFavorList removed
         * @property {number|null} [uid] CmdEditFavorList uid
         */

        /**
         * Constructs a new CmdEditFavorList.
         * @memberof pb
         * @classdesc Represents a CmdEditFavorList.
         * @implements ICmdEditFavorList
         * @constructor
         * @param {pb.ICmdEditFavorList=} [properties] Properties to set
         */
        function CmdEditFavorList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdEditFavorList removed.
         * @member {boolean} removed
         * @memberof pb.CmdEditFavorList
         * @instance
         */
        CmdEditFavorList.prototype.removed = false;

        /**
         * CmdEditFavorList uid.
         * @member {number} uid
         * @memberof pb.CmdEditFavorList
         * @instance
         */
        CmdEditFavorList.prototype.uid = 0;

        /**
         * Creates a new CmdEditFavorList instance using the specified properties.
         * @function create
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {pb.ICmdEditFavorList=} [properties] Properties to set
         * @returns {pb.CmdEditFavorList} CmdEditFavorList instance
         */
        CmdEditFavorList.create = function create(properties) {
            return new CmdEditFavorList(properties);
        };

        /**
         * Encodes the specified CmdEditFavorList message. Does not implicitly {@link pb.CmdEditFavorList.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {pb.ICmdEditFavorList} message CmdEditFavorList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdEditFavorList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.removed != null && Object.hasOwnProperty.call(message, "removed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.removed);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdEditFavorList message, length delimited. Does not implicitly {@link pb.CmdEditFavorList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {pb.ICmdEditFavorList} message CmdEditFavorList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdEditFavorList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdEditFavorList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdEditFavorList} CmdEditFavorList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdEditFavorList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdEditFavorList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.removed = reader.bool();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdEditFavorList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdEditFavorList} CmdEditFavorList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdEditFavorList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdEditFavorList message.
         * @function verify
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdEditFavorList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.removed != null && message.hasOwnProperty("removed"))
                if (typeof message.removed !== "boolean")
                    return "removed: boolean expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdEditFavorList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdEditFavorList} CmdEditFavorList
         */
        CmdEditFavorList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdEditFavorList)
                return object;
            var message = new $root.pb.CmdEditFavorList();
            if (object.removed != null)
                message.removed = Boolean(object.removed);
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdEditFavorList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdEditFavorList
         * @static
         * @param {pb.CmdEditFavorList} message CmdEditFavorList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdEditFavorList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.removed = false;
                object.uid = 0;
            }
            if (message.removed != null && message.hasOwnProperty("removed"))
                object.removed = message.removed;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdEditFavorList to JSON.
         * @function toJSON
         * @memberof pb.CmdEditFavorList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdEditFavorList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdEditFavorList;
    })();

    pb.CmdGetItem = (function () {

        /**
         * Properties of a CmdGetItem.
         * @memberof pb
         * @interface ICmdGetItem
         * @property {number|Long|null} [ts] CmdGetItem ts
         */

        /**
         * Constructs a new CmdGetItem.
         * @memberof pb
         * @classdesc Represents a CmdGetItem.
         * @implements ICmdGetItem
         * @constructor
         * @param {pb.ICmdGetItem=} [properties] Properties to set
         */
        function CmdGetItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetItem ts.
         * @member {number|Long} ts
         * @memberof pb.CmdGetItem
         * @instance
         */
        CmdGetItem.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdGetItem instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetItem
         * @static
         * @param {pb.ICmdGetItem=} [properties] Properties to set
         * @returns {pb.CmdGetItem} CmdGetItem instance
         */
        CmdGetItem.create = function create(properties) {
            return new CmdGetItem(properties);
        };

        /**
         * Encodes the specified CmdGetItem message. Does not implicitly {@link pb.CmdGetItem.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetItem
         * @static
         * @param {pb.ICmdGetItem} message CmdGetItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
            return writer;
        };

        /**
         * Encodes the specified CmdGetItem message, length delimited. Does not implicitly {@link pb.CmdGetItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetItem
         * @static
         * @param {pb.ICmdGetItem} message CmdGetItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetItem} CmdGetItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ts = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetItem} CmdGetItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetItem message.
         * @function verify
         * @memberof pb.CmdGetItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdGetItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetItem} CmdGetItem
         */
        CmdGetItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetItem)
                return object;
            var message = new $root.pb.CmdGetItem();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdGetItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetItem
         * @static
         * @param {pb.CmdGetItem} message CmdGetItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            return object;
        };

        /**
         * Converts this CmdGetItem to JSON.
         * @function toJSON
         * @memberof pb.CmdGetItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetItem;
    })();

    pb.CmdResetGameCounter = (function () {

        /**
         * Properties of a CmdResetGameCounter.
         * @memberof pb
         * @interface ICmdResetGameCounter
         * @property {pb.GameType|null} [game] CmdResetGameCounter game
         */

        /**
         * Constructs a new CmdResetGameCounter.
         * @memberof pb
         * @classdesc Represents a CmdResetGameCounter.
         * @implements ICmdResetGameCounter
         * @constructor
         * @param {pb.ICmdResetGameCounter=} [properties] Properties to set
         */
        function CmdResetGameCounter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdResetGameCounter game.
         * @member {pb.GameType} game
         * @memberof pb.CmdResetGameCounter
         * @instance
         */
        CmdResetGameCounter.prototype.game = 0;

        /**
         * Creates a new CmdResetGameCounter instance using the specified properties.
         * @function create
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {pb.ICmdResetGameCounter=} [properties] Properties to set
         * @returns {pb.CmdResetGameCounter} CmdResetGameCounter instance
         */
        CmdResetGameCounter.create = function create(properties) {
            return new CmdResetGameCounter(properties);
        };

        /**
         * Encodes the specified CmdResetGameCounter message. Does not implicitly {@link pb.CmdResetGameCounter.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {pb.ICmdResetGameCounter} message CmdResetGameCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdResetGameCounter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.game);
            return writer;
        };

        /**
         * Encodes the specified CmdResetGameCounter message, length delimited. Does not implicitly {@link pb.CmdResetGameCounter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {pb.ICmdResetGameCounter} message CmdResetGameCounter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdResetGameCounter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdResetGameCounter message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdResetGameCounter} CmdResetGameCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdResetGameCounter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdResetGameCounter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.game = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdResetGameCounter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdResetGameCounter} CmdResetGameCounter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdResetGameCounter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdResetGameCounter message.
         * @function verify
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdResetGameCounter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            return null;
        };

        /**
         * Creates a CmdResetGameCounter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdResetGameCounter} CmdResetGameCounter
         */
        CmdResetGameCounter.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdResetGameCounter)
                return object;
            var message = new $root.pb.CmdResetGameCounter();
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdResetGameCounter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdResetGameCounter
         * @static
         * @param {pb.CmdResetGameCounter} message CmdResetGameCounter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdResetGameCounter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.game = options.enums === String ? "GameType_NULL" : 0;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            return object;
        };

        /**
         * Converts this CmdResetGameCounter to JSON.
         * @function toJSON
         * @memberof pb.CmdResetGameCounter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdResetGameCounter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdResetGameCounter;
    })();

    pb.TaskItem = (function () {

        /**
         * Properties of a TaskItem.
         * @memberof pb
         * @interface ITaskItem
         * @property {number|null} [taskId] TaskItem taskId
         * @property {number|null} [progress] TaskItem progress
         * @property {number|null} [award] TaskItem award
         * @property {number|null} [got] TaskItem got
         */

        /**
         * Constructs a new TaskItem.
         * @memberof pb
         * @classdesc Represents a TaskItem.
         * @implements ITaskItem
         * @constructor
         * @param {pb.ITaskItem=} [properties] Properties to set
         */
        function TaskItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaskItem taskId.
         * @member {number} taskId
         * @memberof pb.TaskItem
         * @instance
         */
        TaskItem.prototype.taskId = 0;

        /**
         * TaskItem progress.
         * @member {number} progress
         * @memberof pb.TaskItem
         * @instance
         */
        TaskItem.prototype.progress = 0;

        /**
         * TaskItem award.
         * @member {number} award
         * @memberof pb.TaskItem
         * @instance
         */
        TaskItem.prototype.award = 0;

        /**
         * TaskItem got.
         * @member {number} got
         * @memberof pb.TaskItem
         * @instance
         */
        TaskItem.prototype.got = 0;

        /**
         * Creates a new TaskItem instance using the specified properties.
         * @function create
         * @memberof pb.TaskItem
         * @static
         * @param {pb.ITaskItem=} [properties] Properties to set
         * @returns {pb.TaskItem} TaskItem instance
         */
        TaskItem.create = function create(properties) {
            return new TaskItem(properties);
        };

        /**
         * Encodes the specified TaskItem message. Does not implicitly {@link pb.TaskItem.verify|verify} messages.
         * @function encode
         * @memberof pb.TaskItem
         * @static
         * @param {pb.ITaskItem} message TaskItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && Object.hasOwnProperty.call(message, "taskId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.taskId);
            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
            if (message.award != null && Object.hasOwnProperty.call(message, "award"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.award);
            if (message.got != null && Object.hasOwnProperty.call(message, "got"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.got);
            return writer;
        };

        /**
         * Encodes the specified TaskItem message, length delimited. Does not implicitly {@link pb.TaskItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.TaskItem
         * @static
         * @param {pb.ITaskItem} message TaskItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaskItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.TaskItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.TaskItem} TaskItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.TaskItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.taskId = reader.int32();
                        break;
                    case 2:
                        message.progress = reader.int32();
                        break;
                    case 3:
                        message.award = reader.int32();
                        break;
                    case 4:
                        message.got = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaskItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.TaskItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.TaskItem} TaskItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaskItem message.
         * @function verify
         * @memberof pb.TaskItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaskItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.award != null && message.hasOwnProperty("award"))
                if (!$util.isInteger(message.award))
                    return "award: integer expected";
            if (message.got != null && message.hasOwnProperty("got"))
                if (!$util.isInteger(message.got))
                    return "got: integer expected";
            return null;
        };

        /**
         * Creates a TaskItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.TaskItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.TaskItem} TaskItem
         */
        TaskItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.TaskItem)
                return object;
            var message = new $root.pb.TaskItem();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.award != null)
                message.award = object.award | 0;
            if (object.got != null)
                message.got = object.got | 0;
            return message;
        };

        /**
         * Creates a plain object from a TaskItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.TaskItem
         * @static
         * @param {pb.TaskItem} message TaskItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaskItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.progress = 0;
                object.award = 0;
                object.got = 0;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = message.award;
            if (message.got != null && message.hasOwnProperty("got"))
                object.got = message.got;
            return object;
        };

        /**
         * Converts this TaskItem to JSON.
         * @function toJSON
         * @memberof pb.TaskItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaskItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaskItem;
    })();

    pb.CmdStudyProgress = (function () {

        /**
         * Properties of a CmdStudyProgress.
         * @memberof pb
         * @interface ICmdStudyProgress
         * @property {number|null} [index] CmdStudyProgress index
         * @property {number|null} [progress] CmdStudyProgress progress
         * @property {number|null} [award] CmdStudyProgress award
         */

        /**
         * Constructs a new CmdStudyProgress.
         * @memberof pb
         * @classdesc Represents a CmdStudyProgress.
         * @implements ICmdStudyProgress
         * @constructor
         * @param {pb.ICmdStudyProgress=} [properties] Properties to set
         */
        function CmdStudyProgress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdStudyProgress index.
         * @member {number} index
         * @memberof pb.CmdStudyProgress
         * @instance
         */
        CmdStudyProgress.prototype.index = 0;

        /**
         * CmdStudyProgress progress.
         * @member {number} progress
         * @memberof pb.CmdStudyProgress
         * @instance
         */
        CmdStudyProgress.prototype.progress = 0;

        /**
         * CmdStudyProgress award.
         * @member {number} award
         * @memberof pb.CmdStudyProgress
         * @instance
         */
        CmdStudyProgress.prototype.award = 0;

        /**
         * Creates a new CmdStudyProgress instance using the specified properties.
         * @function create
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {pb.ICmdStudyProgress=} [properties] Properties to set
         * @returns {pb.CmdStudyProgress} CmdStudyProgress instance
         */
        CmdStudyProgress.create = function create(properties) {
            return new CmdStudyProgress(properties);
        };

        /**
         * Encodes the specified CmdStudyProgress message. Does not implicitly {@link pb.CmdStudyProgress.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {pb.ICmdStudyProgress} message CmdStudyProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStudyProgress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
            if (message.award != null && Object.hasOwnProperty.call(message, "award"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.award);
            return writer;
        };

        /**
         * Encodes the specified CmdStudyProgress message, length delimited. Does not implicitly {@link pb.CmdStudyProgress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {pb.ICmdStudyProgress} message CmdStudyProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStudyProgress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdStudyProgress message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdStudyProgress} CmdStudyProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStudyProgress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdStudyProgress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.index = reader.int32();
                        break;
                    case 2:
                        message.progress = reader.int32();
                        break;
                    case 3:
                        message.award = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdStudyProgress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdStudyProgress} CmdStudyProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStudyProgress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdStudyProgress message.
         * @function verify
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdStudyProgress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (!$util.isInteger(message.progress))
                    return "progress: integer expected";
            if (message.award != null && message.hasOwnProperty("award"))
                if (!$util.isInteger(message.award))
                    return "award: integer expected";
            return null;
        };

        /**
         * Creates a CmdStudyProgress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdStudyProgress} CmdStudyProgress
         */
        CmdStudyProgress.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdStudyProgress)
                return object;
            var message = new $root.pb.CmdStudyProgress();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.progress != null)
                message.progress = object.progress | 0;
            if (object.award != null)
                message.award = object.award | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdStudyProgress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdStudyProgress
         * @static
         * @param {pb.CmdStudyProgress} message CmdStudyProgress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdStudyProgress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.progress = 0;
                object.award = 0;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = message.progress;
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = message.award;
            return object;
        };

        /**
         * Converts this CmdStudyProgress to JSON.
         * @function toJSON
         * @memberof pb.CmdStudyProgress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdStudyProgress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdStudyProgress;
    })();

    pb.CmdGetDailyAward = (function () {

        /**
         * Properties of a CmdGetDailyAward.
         * @memberof pb
         * @interface ICmdGetDailyAward
         * @property {number|null} [index] CmdGetDailyAward index
         * @property {boolean|null} [adClicked] CmdGetDailyAward adClicked
         */

        /**
         * Constructs a new CmdGetDailyAward.
         * @memberof pb
         * @classdesc Represents a CmdGetDailyAward.
         * @implements ICmdGetDailyAward
         * @constructor
         * @param {pb.ICmdGetDailyAward=} [properties] Properties to set
         */
        function CmdGetDailyAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetDailyAward index.
         * @member {number} index
         * @memberof pb.CmdGetDailyAward
         * @instance
         */
        CmdGetDailyAward.prototype.index = 0;

        /**
         * CmdGetDailyAward adClicked.
         * @member {boolean} adClicked
         * @memberof pb.CmdGetDailyAward
         * @instance
         */
        CmdGetDailyAward.prototype.adClicked = false;

        /**
         * Creates a new CmdGetDailyAward instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {pb.ICmdGetDailyAward=} [properties] Properties to set
         * @returns {pb.CmdGetDailyAward} CmdGetDailyAward instance
         */
        CmdGetDailyAward.create = function create(properties) {
            return new CmdGetDailyAward(properties);
        };

        /**
         * Encodes the specified CmdGetDailyAward message. Does not implicitly {@link pb.CmdGetDailyAward.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {pb.ICmdGetDailyAward} message CmdGetDailyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetDailyAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            if (message.adClicked != null && Object.hasOwnProperty.call(message, "adClicked"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.adClicked);
            return writer;
        };

        /**
         * Encodes the specified CmdGetDailyAward message, length delimited. Does not implicitly {@link pb.CmdGetDailyAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {pb.ICmdGetDailyAward} message CmdGetDailyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetDailyAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetDailyAward message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetDailyAward} CmdGetDailyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetDailyAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetDailyAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.index = reader.int32();
                        break;
                    case 2:
                        message.adClicked = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetDailyAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetDailyAward} CmdGetDailyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetDailyAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetDailyAward message.
         * @function verify
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetDailyAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.adClicked != null && message.hasOwnProperty("adClicked"))
                if (typeof message.adClicked !== "boolean")
                    return "adClicked: boolean expected";
            return null;
        };

        /**
         * Creates a CmdGetDailyAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetDailyAward} CmdGetDailyAward
         */
        CmdGetDailyAward.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetDailyAward)
                return object;
            var message = new $root.pb.CmdGetDailyAward();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.adClicked != null)
                message.adClicked = Boolean(object.adClicked);
            return message;
        };

        /**
         * Creates a plain object from a CmdGetDailyAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetDailyAward
         * @static
         * @param {pb.CmdGetDailyAward} message CmdGetDailyAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetDailyAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.adClicked = false;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.adClicked != null && message.hasOwnProperty("adClicked"))
                object.adClicked = message.adClicked;
            return object;
        };

        /**
         * Converts this CmdGetDailyAward to JSON.
         * @function toJSON
         * @memberof pb.CmdGetDailyAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetDailyAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetDailyAward;
    })();

    pb.CmdDailyTaskProgress = (function () {

        /**
         * Properties of a CmdDailyTaskProgress.
         * @memberof pb
         * @interface ICmdDailyTaskProgress
         * @property {number|null} [uid] CmdDailyTaskProgress uid
         * @property {number|null} [taskId] CmdDailyTaskProgress taskId
         */

        /**
         * Constructs a new CmdDailyTaskProgress.
         * @memberof pb
         * @classdesc Represents a CmdDailyTaskProgress.
         * @implements ICmdDailyTaskProgress
         * @constructor
         * @param {pb.ICmdDailyTaskProgress=} [properties] Properties to set
         */
        function CmdDailyTaskProgress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdDailyTaskProgress uid.
         * @member {number} uid
         * @memberof pb.CmdDailyTaskProgress
         * @instance
         */
        CmdDailyTaskProgress.prototype.uid = 0;

        /**
         * CmdDailyTaskProgress taskId.
         * @member {number} taskId
         * @memberof pb.CmdDailyTaskProgress
         * @instance
         */
        CmdDailyTaskProgress.prototype.taskId = 0;

        /**
         * Creates a new CmdDailyTaskProgress instance using the specified properties.
         * @function create
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {pb.ICmdDailyTaskProgress=} [properties] Properties to set
         * @returns {pb.CmdDailyTaskProgress} CmdDailyTaskProgress instance
         */
        CmdDailyTaskProgress.create = function create(properties) {
            return new CmdDailyTaskProgress(properties);
        };

        /**
         * Encodes the specified CmdDailyTaskProgress message. Does not implicitly {@link pb.CmdDailyTaskProgress.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {pb.ICmdDailyTaskProgress} message CmdDailyTaskProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdDailyTaskProgress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.taskId != null && Object.hasOwnProperty.call(message, "taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified CmdDailyTaskProgress message, length delimited. Does not implicitly {@link pb.CmdDailyTaskProgress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {pb.ICmdDailyTaskProgress} message CmdDailyTaskProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdDailyTaskProgress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdDailyTaskProgress message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdDailyTaskProgress} CmdDailyTaskProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdDailyTaskProgress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdDailyTaskProgress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.taskId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdDailyTaskProgress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdDailyTaskProgress} CmdDailyTaskProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdDailyTaskProgress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdDailyTaskProgress message.
         * @function verify
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdDailyTaskProgress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a CmdDailyTaskProgress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdDailyTaskProgress} CmdDailyTaskProgress
         */
        CmdDailyTaskProgress.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdDailyTaskProgress)
                return object;
            var message = new $root.pb.CmdDailyTaskProgress();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdDailyTaskProgress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdDailyTaskProgress
         * @static
         * @param {pb.CmdDailyTaskProgress} message CmdDailyTaskProgress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdDailyTaskProgress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.taskId = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this CmdDailyTaskProgress to JSON.
         * @function toJSON
         * @memberof pb.CmdDailyTaskProgress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdDailyTaskProgress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdDailyTaskProgress;
    })();

    pb.CmdGetInviterAward = (function () {

        /**
         * Properties of a CmdGetInviterAward.
         * @memberof pb
         * @interface ICmdGetInviterAward
         * @property {number|null} [propertyId] CmdGetInviterAward propertyId
         * @property {number|null} [count] CmdGetInviterAward count
         */

        /**
         * Constructs a new CmdGetInviterAward.
         * @memberof pb
         * @classdesc Represents a CmdGetInviterAward.
         * @implements ICmdGetInviterAward
         * @constructor
         * @param {pb.ICmdGetInviterAward=} [properties] Properties to set
         */
        function CmdGetInviterAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetInviterAward propertyId.
         * @member {number} propertyId
         * @memberof pb.CmdGetInviterAward
         * @instance
         */
        CmdGetInviterAward.prototype.propertyId = 0;

        /**
         * CmdGetInviterAward count.
         * @member {number} count
         * @memberof pb.CmdGetInviterAward
         * @instance
         */
        CmdGetInviterAward.prototype.count = 0;

        /**
         * Creates a new CmdGetInviterAward instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {pb.ICmdGetInviterAward=} [properties] Properties to set
         * @returns {pb.CmdGetInviterAward} CmdGetInviterAward instance
         */
        CmdGetInviterAward.create = function create(properties) {
            return new CmdGetInviterAward(properties);
        };

        /**
         * Encodes the specified CmdGetInviterAward message. Does not implicitly {@link pb.CmdGetInviterAward.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {pb.ICmdGetInviterAward} message CmdGetInviterAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetInviterAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.propertyId != null && Object.hasOwnProperty.call(message, "propertyId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.propertyId);
            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
            return writer;
        };

        /**
         * Encodes the specified CmdGetInviterAward message, length delimited. Does not implicitly {@link pb.CmdGetInviterAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {pb.ICmdGetInviterAward} message CmdGetInviterAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetInviterAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetInviterAward message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetInviterAward} CmdGetInviterAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetInviterAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetInviterAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.propertyId = reader.int32();
                        break;
                    case 2:
                        message.count = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetInviterAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetInviterAward} CmdGetInviterAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetInviterAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetInviterAward message.
         * @function verify
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetInviterAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.propertyId != null && message.hasOwnProperty("propertyId"))
                if (!$util.isInteger(message.propertyId))
                    return "propertyId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            return null;
        };

        /**
         * Creates a CmdGetInviterAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetInviterAward} CmdGetInviterAward
         */
        CmdGetInviterAward.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetInviterAward)
                return object;
            var message = new $root.pb.CmdGetInviterAward();
            if (object.propertyId != null)
                message.propertyId = object.propertyId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdGetInviterAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetInviterAward
         * @static
         * @param {pb.CmdGetInviterAward} message CmdGetInviterAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetInviterAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.propertyId = 0;
                object.count = 0;
            }
            if (message.propertyId != null && message.hasOwnProperty("propertyId"))
                object.propertyId = message.propertyId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            return object;
        };

        /**
         * Converts this CmdGetInviterAward to JSON.
         * @function toJSON
         * @memberof pb.CmdGetInviterAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetInviterAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetInviterAward;
    })();

    pb.CmdGameStart = (function () {

        /**
         * Properties of a CmdGameStart.
         * @memberof pb
         * @interface ICmdGameStart
         * @property {pb.GameType|null} [game] CmdGameStart game
         * @property {boolean|null} [isJunxian] CmdGameStart isJunxian
         */

        /**
         * Constructs a new CmdGameStart.
         * @memberof pb
         * @classdesc Represents a CmdGameStart.
         * @implements ICmdGameStart
         * @constructor
         * @param {pb.ICmdGameStart=} [properties] Properties to set
         */
        function CmdGameStart(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameStart game.
         * @member {pb.GameType} game
         * @memberof pb.CmdGameStart
         * @instance
         */
        CmdGameStart.prototype.game = 0;

        /**
         * CmdGameStart isJunxian.
         * @member {boolean} isJunxian
         * @memberof pb.CmdGameStart
         * @instance
         */
        CmdGameStart.prototype.isJunxian = false;

        /**
         * Creates a new CmdGameStart instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameStart
         * @static
         * @param {pb.ICmdGameStart=} [properties] Properties to set
         * @returns {pb.CmdGameStart} CmdGameStart instance
         */
        CmdGameStart.create = function create(properties) {
            return new CmdGameStart(properties);
        };

        /**
         * Encodes the specified CmdGameStart message. Does not implicitly {@link pb.CmdGameStart.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameStart
         * @static
         * @param {pb.ICmdGameStart} message CmdGameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameStart.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.game);
            if (message.isJunxian != null && Object.hasOwnProperty.call(message, "isJunxian"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isJunxian);
            return writer;
        };

        /**
         * Encodes the specified CmdGameStart message, length delimited. Does not implicitly {@link pb.CmdGameStart.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameStart
         * @static
         * @param {pb.ICmdGameStart} message CmdGameStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameStart.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameStart message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameStart} CmdGameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameStart.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameStart();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.game = reader.int32();
                        break;
                    case 2:
                        message.isJunxian = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameStart message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameStart} CmdGameStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameStart.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameStart message.
         * @function verify
         * @memberof pb.CmdGameStart
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameStart.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.isJunxian != null && message.hasOwnProperty("isJunxian"))
                if (typeof message.isJunxian !== "boolean")
                    return "isJunxian: boolean expected";
            return null;
        };

        /**
         * Creates a CmdGameStart message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameStart
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameStart} CmdGameStart
         */
        CmdGameStart.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameStart)
                return object;
            var message = new $root.pb.CmdGameStart();
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.isJunxian != null)
                message.isJunxian = Boolean(object.isJunxian);
            return message;
        };

        /**
         * Creates a plain object from a CmdGameStart message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameStart
         * @static
         * @param {pb.CmdGameStart} message CmdGameStart
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameStart.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.isJunxian = false;
            }
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.isJunxian != null && message.hasOwnProperty("isJunxian"))
                object.isJunxian = message.isJunxian;
            return object;
        };

        /**
         * Converts this CmdGameStart to JSON.
         * @function toJSON
         * @memberof pb.CmdGameStart
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameStart.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameStart;
    })();

    pb.CmdGameOver = (function () {

        /**
         * Properties of a CmdGameOver.
         * @memberof pb
         * @interface ICmdGameOver
         * @property {pb.IGameResult|null} [result] CmdGameOver result
         * @property {pb.IGameOperations|null} [operations] CmdGameOver operations
         */

        /**
         * Constructs a new CmdGameOver.
         * @memberof pb
         * @classdesc Represents a CmdGameOver.
         * @implements ICmdGameOver
         * @constructor
         * @param {pb.ICmdGameOver=} [properties] Properties to set
         */
        function CmdGameOver(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameOver result.
         * @member {pb.IGameResult|null|undefined} result
         * @memberof pb.CmdGameOver
         * @instance
         */
        CmdGameOver.prototype.result = null;

        /**
         * CmdGameOver operations.
         * @member {pb.IGameOperations|null|undefined} operations
         * @memberof pb.CmdGameOver
         * @instance
         */
        CmdGameOver.prototype.operations = null;

        /**
         * Creates a new CmdGameOver instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameOver
         * @static
         * @param {pb.ICmdGameOver=} [properties] Properties to set
         * @returns {pb.CmdGameOver} CmdGameOver instance
         */
        CmdGameOver.create = function create(properties) {
            return new CmdGameOver(properties);
        };

        /**
         * Encodes the specified CmdGameOver message. Does not implicitly {@link pb.CmdGameOver.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameOver
         * @static
         * @param {pb.ICmdGameOver} message CmdGameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameOver.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.GameResult.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.operations != null && Object.hasOwnProperty.call(message, "operations"))
                $root.pb.GameOperations.encode(message.operations, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdGameOver message, length delimited. Does not implicitly {@link pb.CmdGameOver.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameOver
         * @static
         * @param {pb.ICmdGameOver} message CmdGameOver message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameOver.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameOver message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameOver} CmdGameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameOver.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameOver();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.GameResult.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.operations = $root.pb.GameOperations.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameOver message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameOver} CmdGameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameOver.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameOver message.
         * @function verify
         * @memberof pb.CmdGameOver
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameOver.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.GameResult.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.operations != null && message.hasOwnProperty("operations")) {
                var error = $root.pb.GameOperations.verify(message.operations);
                if (error)
                    return "operations." + error;
            }
            return null;
        };

        /**
         * Creates a CmdGameOver message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameOver
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameOver} CmdGameOver
         */
        CmdGameOver.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameOver)
                return object;
            var message = new $root.pb.CmdGameOver();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdGameOver.result: object expected");
                message.result = $root.pb.GameResult.fromObject(object.result);
            }
            if (object.operations != null) {
                if (typeof object.operations !== "object")
                    throw TypeError(".pb.CmdGameOver.operations: object expected");
                message.operations = $root.pb.GameOperations.fromObject(object.operations);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdGameOver message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameOver
         * @static
         * @param {pb.CmdGameOver} message CmdGameOver
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameOver.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.operations = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.GameResult.toObject(message.result, options);
            if (message.operations != null && message.hasOwnProperty("operations"))
                object.operations = $root.pb.GameOperations.toObject(message.operations, options);
            return object;
        };

        /**
         * Converts this CmdGameOver to JSON.
         * @function toJSON
         * @memberof pb.CmdGameOver
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameOver.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameOver;
    })();

    pb.CmdGameOverReply = (function () {

        /**
         * Properties of a CmdGameOverReply.
         * @memberof pb
         * @interface ICmdGameOverReply
         * @property {number|Long|null} [ts] CmdGameOverReply ts
         */

        /**
         * Constructs a new CmdGameOverReply.
         * @memberof pb
         * @classdesc Represents a CmdGameOverReply.
         * @implements ICmdGameOverReply
         * @constructor
         * @param {pb.ICmdGameOverReply=} [properties] Properties to set
         */
        function CmdGameOverReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameOverReply ts.
         * @member {number|Long} ts
         * @memberof pb.CmdGameOverReply
         * @instance
         */
        CmdGameOverReply.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdGameOverReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {pb.ICmdGameOverReply=} [properties] Properties to set
         * @returns {pb.CmdGameOverReply} CmdGameOverReply instance
         */
        CmdGameOverReply.create = function create(properties) {
            return new CmdGameOverReply(properties);
        };

        /**
         * Encodes the specified CmdGameOverReply message. Does not implicitly {@link pb.CmdGameOverReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {pb.ICmdGameOverReply} message CmdGameOverReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameOverReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
            return writer;
        };

        /**
         * Encodes the specified CmdGameOverReply message, length delimited. Does not implicitly {@link pb.CmdGameOverReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {pb.ICmdGameOverReply} message CmdGameOverReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameOverReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameOverReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameOverReply} CmdGameOverReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameOverReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameOverReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ts = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameOverReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameOverReply} CmdGameOverReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameOverReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameOverReply message.
         * @function verify
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameOverReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdGameOverReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameOverReply} CmdGameOverReply
         */
        CmdGameOverReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameOverReply)
                return object;
            var message = new $root.pb.CmdGameOverReply();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdGameOverReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameOverReply
         * @static
         * @param {pb.CmdGameOverReply} message CmdGameOverReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameOverReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            return object;
        };

        /**
         * Converts this CmdGameOverReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGameOverReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameOverReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameOverReply;
    })();

    pb.CmdQueryGameResult = (function () {

        /**
         * Properties of a CmdQueryGameResult.
         * @memberof pb
         * @interface ICmdQueryGameResult
         * @property {number|null} [uid] CmdQueryGameResult uid
         * @property {pb.GameType|null} [gType] CmdQueryGameResult gType
         * @property {number|Long|null} [from] CmdQueryGameResult from
         * @property {number|Long|null} [to] CmdQueryGameResult to
         * @property {number|null} [pageSize] CmdQueryGameResult pageSize
         * @property {number|Long|null} [ts] CmdQueryGameResult ts
         */

        /**
         * Constructs a new CmdQueryGameResult.
         * @memberof pb
         * @classdesc Represents a CmdQueryGameResult.
         * @implements ICmdQueryGameResult
         * @constructor
         * @param {pb.ICmdQueryGameResult=} [properties] Properties to set
         */
        function CmdQueryGameResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryGameResult uid.
         * @member {number} uid
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.uid = 0;

        /**
         * CmdQueryGameResult gType.
         * @member {pb.GameType} gType
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.gType = 0;

        /**
         * CmdQueryGameResult from.
         * @member {number|Long} from
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryGameResult to.
         * @member {number|Long} to
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryGameResult pageSize.
         * @member {number} pageSize
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.pageSize = 0;

        /**
         * CmdQueryGameResult ts.
         * @member {number|Long} ts
         * @memberof pb.CmdQueryGameResult
         * @instance
         */
        CmdQueryGameResult.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdQueryGameResult instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {pb.ICmdQueryGameResult=} [properties] Properties to set
         * @returns {pb.CmdQueryGameResult} CmdQueryGameResult instance
         */
        CmdQueryGameResult.create = function create(properties) {
            return new CmdQueryGameResult(properties);
        };

        /**
         * Encodes the specified CmdQueryGameResult message. Does not implicitly {@link pb.CmdQueryGameResult.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {pb.ICmdQueryGameResult} message CmdQueryGameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryGameResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.gType != null && Object.hasOwnProperty.call(message, "gType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gType);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.to);
            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.pageSize);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.ts);
            return writer;
        };

        /**
         * Encodes the specified CmdQueryGameResult message, length delimited. Does not implicitly {@link pb.CmdQueryGameResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {pb.ICmdQueryGameResult} message CmdQueryGameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryGameResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryGameResult message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryGameResult} CmdQueryGameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryGameResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryGameResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.gType = reader.int32();
                        break;
                    case 3:
                        message.from = reader.int64();
                        break;
                    case 4:
                        message.to = reader.int64();
                        break;
                    case 5:
                        message.pageSize = reader.int32();
                        break;
                    case 6:
                        message.ts = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryGameResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryGameResult} CmdQueryGameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryGameResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryGameResult message.
         * @function verify
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryGameResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.gType != null && message.hasOwnProperty("gType"))
                switch (message.gType) {
                    default:
                        return "gType: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                if (!$util.isInteger(message.pageSize))
                    return "pageSize: integer expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdQueryGameResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryGameResult} CmdQueryGameResult
         */
        CmdQueryGameResult.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryGameResult)
                return object;
            var message = new $root.pb.CmdQueryGameResult();
            if (object.uid != null)
                message.uid = object.uid | 0;
            switch (object.gType) {
                case "GameType_NULL":
                case 0:
                    message.gType = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.gType = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.gType = 4;
                    break;
                case "FenShi":
                case 5:
                    message.gType = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.gType = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.gType = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.gType = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.gType = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.gType = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.gType = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.gType = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.gType = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.gType = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.gType = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.gType = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.gType = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.gType = 30;
                    break;
            }
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryGameResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryGameResult
         * @static
         * @param {pb.CmdQueryGameResult} message CmdQueryGameResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryGameResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.gType = options.enums === String ? "GameType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.pageSize = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.gType != null && message.hasOwnProperty("gType"))
                object.gType = options.enums === String ? $root.pb.GameType[message.gType] : message.gType;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            return object;
        };

        /**
         * Converts this CmdQueryGameResult to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryGameResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryGameResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryGameResult;
    })();

    pb.CmdQueryGameResultReply = (function () {

        /**
         * Properties of a CmdQueryGameResultReply.
         * @memberof pb
         * @interface ICmdQueryGameResultReply
         * @property {Array.<pb.IGameResult>|null} [results] CmdQueryGameResultReply results
         */

        /**
         * Constructs a new CmdQueryGameResultReply.
         * @memberof pb
         * @classdesc Represents a CmdQueryGameResultReply.
         * @implements ICmdQueryGameResultReply
         * @constructor
         * @param {pb.ICmdQueryGameResultReply=} [properties] Properties to set
         */
        function CmdQueryGameResultReply(properties) {
            this.results = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryGameResultReply results.
         * @member {Array.<pb.IGameResult>} results
         * @memberof pb.CmdQueryGameResultReply
         * @instance
         */
        CmdQueryGameResultReply.prototype.results = $util.emptyArray;

        /**
         * Creates a new CmdQueryGameResultReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {pb.ICmdQueryGameResultReply=} [properties] Properties to set
         * @returns {pb.CmdQueryGameResultReply} CmdQueryGameResultReply instance
         */
        CmdQueryGameResultReply.create = function create(properties) {
            return new CmdQueryGameResultReply(properties);
        };

        /**
         * Encodes the specified CmdQueryGameResultReply message. Does not implicitly {@link pb.CmdQueryGameResultReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {pb.ICmdQueryGameResultReply} message CmdQueryGameResultReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryGameResultReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.results != null && message.results.length)
                for (var i = 0; i < message.results.length; ++i)
                    $root.pb.GameResult.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdQueryGameResultReply message, length delimited. Does not implicitly {@link pb.CmdQueryGameResultReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {pb.ICmdQueryGameResultReply} message CmdQueryGameResultReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryGameResultReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryGameResultReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryGameResultReply} CmdQueryGameResultReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryGameResultReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryGameResultReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.results && message.results.length))
                            message.results = [];
                        message.results.push($root.pb.GameResult.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryGameResultReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryGameResultReply} CmdQueryGameResultReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryGameResultReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryGameResultReply message.
         * @function verify
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryGameResultReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.results != null && message.hasOwnProperty("results")) {
                if (!Array.isArray(message.results))
                    return "results: array expected";
                for (var i = 0; i < message.results.length; ++i) {
                    var error = $root.pb.GameResult.verify(message.results[i]);
                    if (error)
                        return "results." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CmdQueryGameResultReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryGameResultReply} CmdQueryGameResultReply
         */
        CmdQueryGameResultReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryGameResultReply)
                return object;
            var message = new $root.pb.CmdQueryGameResultReply();
            if (object.results) {
                if (!Array.isArray(object.results))
                    throw TypeError(".pb.CmdQueryGameResultReply.results: array expected");
                message.results = [];
                for (var i = 0; i < object.results.length; ++i) {
                    if (typeof object.results[i] !== "object")
                        throw TypeError(".pb.CmdQueryGameResultReply.results: object expected");
                    message.results[i] = $root.pb.GameResult.fromObject(object.results[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryGameResultReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryGameResultReply
         * @static
         * @param {pb.CmdQueryGameResultReply} message CmdQueryGameResultReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryGameResultReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.results = [];
            if (message.results && message.results.length) {
                object.results = [];
                for (var j = 0; j < message.results.length; ++j)
                    object.results[j] = $root.pb.GameResult.toObject(message.results[j], options);
            }
            return object;
        };

        /**
         * Converts this CmdQueryGameResultReply to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryGameResultReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryGameResultReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryGameResultReply;
    })();

    pb.CmdGetGameOperations = (function () {

        /**
         * Properties of a CmdGetGameOperations.
         * @memberof pb
         * @interface ICmdGetGameOperations
         * @property {number|null} [uid] CmdGetGameOperations uid
         * @property {number|Long|null} [ts] CmdGetGameOperations ts
         */

        /**
         * Constructs a new CmdGetGameOperations.
         * @memberof pb
         * @classdesc Represents a CmdGetGameOperations.
         * @implements ICmdGetGameOperations
         * @constructor
         * @param {pb.ICmdGetGameOperations=} [properties] Properties to set
         */
        function CmdGetGameOperations(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetGameOperations uid.
         * @member {number} uid
         * @memberof pb.CmdGetGameOperations
         * @instance
         */
        CmdGetGameOperations.prototype.uid = 0;

        /**
         * CmdGetGameOperations ts.
         * @member {number|Long} ts
         * @memberof pb.CmdGetGameOperations
         * @instance
         */
        CmdGetGameOperations.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdGetGameOperations instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {pb.ICmdGetGameOperations=} [properties] Properties to set
         * @returns {pb.CmdGetGameOperations} CmdGetGameOperations instance
         */
        CmdGetGameOperations.create = function create(properties) {
            return new CmdGetGameOperations(properties);
        };

        /**
         * Encodes the specified CmdGetGameOperations message. Does not implicitly {@link pb.CmdGetGameOperations.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {pb.ICmdGetGameOperations} message CmdGetGameOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetGameOperations.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ts);
            return writer;
        };

        /**
         * Encodes the specified CmdGetGameOperations message, length delimited. Does not implicitly {@link pb.CmdGetGameOperations.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {pb.ICmdGetGameOperations} message CmdGetGameOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetGameOperations.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetGameOperations message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetGameOperations} CmdGetGameOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetGameOperations.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetGameOperations();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.ts = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetGameOperations message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetGameOperations} CmdGetGameOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetGameOperations.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetGameOperations message.
         * @function verify
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetGameOperations.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdGetGameOperations message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetGameOperations} CmdGetGameOperations
         */
        CmdGetGameOperations.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetGameOperations)
                return object;
            var message = new $root.pb.CmdGetGameOperations();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdGetGameOperations message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetGameOperations
         * @static
         * @param {pb.CmdGetGameOperations} message CmdGetGameOperations
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetGameOperations.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            return object;
        };

        /**
         * Converts this CmdGetGameOperations to JSON.
         * @function toJSON
         * @memberof pb.CmdGetGameOperations
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetGameOperations.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetGameOperations;
    })();

    pb.CmdUnlockGame = (function () {

        /**
         * Properties of a CmdUnlockGame.
         * @memberof pb
         * @interface ICmdUnlockGame
         * @property {pb.GameType|null} [gType] CmdUnlockGame gType
         */

        /**
         * Constructs a new CmdUnlockGame.
         * @memberof pb
         * @classdesc Represents a CmdUnlockGame.
         * @implements ICmdUnlockGame
         * @constructor
         * @param {pb.ICmdUnlockGame=} [properties] Properties to set
         */
        function CmdUnlockGame(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUnlockGame gType.
         * @member {pb.GameType} gType
         * @memberof pb.CmdUnlockGame
         * @instance
         */
        CmdUnlockGame.prototype.gType = 0;

        /**
         * Creates a new CmdUnlockGame instance using the specified properties.
         * @function create
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {pb.ICmdUnlockGame=} [properties] Properties to set
         * @returns {pb.CmdUnlockGame} CmdUnlockGame instance
         */
        CmdUnlockGame.create = function create(properties) {
            return new CmdUnlockGame(properties);
        };

        /**
         * Encodes the specified CmdUnlockGame message. Does not implicitly {@link pb.CmdUnlockGame.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {pb.ICmdUnlockGame} message CmdUnlockGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUnlockGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gType != null && Object.hasOwnProperty.call(message, "gType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gType);
            return writer;
        };

        /**
         * Encodes the specified CmdUnlockGame message, length delimited. Does not implicitly {@link pb.CmdUnlockGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {pb.ICmdUnlockGame} message CmdUnlockGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUnlockGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUnlockGame message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUnlockGame} CmdUnlockGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUnlockGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUnlockGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.gType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUnlockGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUnlockGame} CmdUnlockGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUnlockGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUnlockGame message.
         * @function verify
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUnlockGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gType != null && message.hasOwnProperty("gType"))
                switch (message.gType) {
                    default:
                        return "gType: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            return null;
        };

        /**
         * Creates a CmdUnlockGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUnlockGame} CmdUnlockGame
         */
        CmdUnlockGame.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUnlockGame)
                return object;
            var message = new $root.pb.CmdUnlockGame();
            switch (object.gType) {
                case "GameType_NULL":
                case 0:
                    message.gType = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.gType = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.gType = 4;
                    break;
                case "FenShi":
                case 5:
                    message.gType = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.gType = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.gType = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.gType = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.gType = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.gType = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.gType = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.gType = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.gType = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.gType = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.gType = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.gType = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.gType = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.gType = 30;
                    break;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdUnlockGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUnlockGame
         * @static
         * @param {pb.CmdUnlockGame} message CmdUnlockGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUnlockGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gType = options.enums === String ? "GameType_NULL" : 0;
            if (message.gType != null && message.hasOwnProperty("gType"))
                object.gType = options.enums === String ? $root.pb.GameType[message.gType] : message.gType;
            return object;
        };

        /**
         * Converts this CmdUnlockGame to JSON.
         * @function toJSON
         * @memberof pb.CmdUnlockGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUnlockGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUnlockGame;
    })();

    pb.CmdGetSmxlReportReply = (function () {

        /**
         * Properties of a CmdGetSmxlReportReply.
         * @memberof pb
         * @interface ICmdGetSmxlReportReply
         * @property {number|Long|null} [capitalInit] CmdGetSmxlReportReply capitalInit
         * @property {number|Long|null} [capitalFinal] CmdGetSmxlReportReply capitalFinal
         * @property {number|null} [profitRate] CmdGetSmxlReportReply profitRate
         * @property {number|null} [winCount] CmdGetSmxlReportReply winCount
         * @property {number|null} [winCode] CmdGetSmxlReportReply winCode
         * @property {number|null} [winRate] CmdGetSmxlReportReply winRate
         * @property {number|null} [loseCount] CmdGetSmxlReportReply loseCount
         * @property {number|null} [loseCode] CmdGetSmxlReportReply loseCode
         * @property {number|null} [loseRate] CmdGetSmxlReportReply loseRate
         * @property {number|null} [count] CmdGetSmxlReportReply count
         * @property {number|null} [rankCaptial] CmdGetSmxlReportReply rankCaptial
         * @property {number|null} [rankRate] CmdGetSmxlReportReply rankRate
         * @property {number|null} [ts] CmdGetSmxlReportReply ts
         */

        /**
         * Constructs a new CmdGetSmxlReportReply.
         * @memberof pb
         * @classdesc Represents a CmdGetSmxlReportReply.
         * @implements ICmdGetSmxlReportReply
         * @constructor
         * @param {pb.ICmdGetSmxlReportReply=} [properties] Properties to set
         */
        function CmdGetSmxlReportReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetSmxlReportReply capitalInit.
         * @member {number|Long} capitalInit
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.capitalInit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdGetSmxlReportReply capitalFinal.
         * @member {number|Long} capitalFinal
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.capitalFinal = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdGetSmxlReportReply profitRate.
         * @member {number} profitRate
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.profitRate = 0;

        /**
         * CmdGetSmxlReportReply winCount.
         * @member {number} winCount
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.winCount = 0;

        /**
         * CmdGetSmxlReportReply winCode.
         * @member {number} winCode
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.winCode = 0;

        /**
         * CmdGetSmxlReportReply winRate.
         * @member {number} winRate
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.winRate = 0;

        /**
         * CmdGetSmxlReportReply loseCount.
         * @member {number} loseCount
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.loseCount = 0;

        /**
         * CmdGetSmxlReportReply loseCode.
         * @member {number} loseCode
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.loseCode = 0;

        /**
         * CmdGetSmxlReportReply loseRate.
         * @member {number} loseRate
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.loseRate = 0;

        /**
         * CmdGetSmxlReportReply count.
         * @member {number} count
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.count = 0;

        /**
         * CmdGetSmxlReportReply rankCaptial.
         * @member {number} rankCaptial
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.rankCaptial = 0;

        /**
         * CmdGetSmxlReportReply rankRate.
         * @member {number} rankRate
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.rankRate = 0;

        /**
         * CmdGetSmxlReportReply ts.
         * @member {number} ts
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         */
        CmdGetSmxlReportReply.prototype.ts = 0;

        /**
         * Creates a new CmdGetSmxlReportReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {pb.ICmdGetSmxlReportReply=} [properties] Properties to set
         * @returns {pb.CmdGetSmxlReportReply} CmdGetSmxlReportReply instance
         */
        CmdGetSmxlReportReply.create = function create(properties) {
            return new CmdGetSmxlReportReply(properties);
        };

        /**
         * Encodes the specified CmdGetSmxlReportReply message. Does not implicitly {@link pb.CmdGetSmxlReportReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {pb.ICmdGetSmxlReportReply} message CmdGetSmxlReportReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetSmxlReportReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.capitalInit != null && Object.hasOwnProperty.call(message, "capitalInit"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.capitalInit);
            if (message.capitalFinal != null && Object.hasOwnProperty.call(message, "capitalFinal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.capitalFinal);
            if (message.profitRate != null && Object.hasOwnProperty.call(message, "profitRate"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.profitRate);
            if (message.winCount != null && Object.hasOwnProperty.call(message, "winCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.winCount);
            if (message.winCode != null && Object.hasOwnProperty.call(message, "winCode"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.winCode);
            if (message.winRate != null && Object.hasOwnProperty.call(message, "winRate"))
                writer.uint32(/* id 6, wireType 5 =*/53).float(message.winRate);
            if (message.loseCount != null && Object.hasOwnProperty.call(message, "loseCount"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.loseCount);
            if (message.loseCode != null && Object.hasOwnProperty.call(message, "loseCode"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.loseCode);
            if (message.loseRate != null && Object.hasOwnProperty.call(message, "loseRate"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.loseRate);
            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.count);
            if (message.rankCaptial != null && Object.hasOwnProperty.call(message, "rankCaptial"))
                writer.uint32(/* id 11, wireType 5 =*/93).float(message.rankCaptial);
            if (message.rankRate != null && Object.hasOwnProperty.call(message, "rankRate"))
                writer.uint32(/* id 12, wireType 5 =*/101).float(message.rankRate);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.ts);
            return writer;
        };

        /**
         * Encodes the specified CmdGetSmxlReportReply message, length delimited. Does not implicitly {@link pb.CmdGetSmxlReportReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {pb.ICmdGetSmxlReportReply} message CmdGetSmxlReportReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetSmxlReportReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetSmxlReportReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetSmxlReportReply} CmdGetSmxlReportReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetSmxlReportReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetSmxlReportReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.capitalInit = reader.int64();
                        break;
                    case 2:
                        message.capitalFinal = reader.int64();
                        break;
                    case 3:
                        message.profitRate = reader.float();
                        break;
                    case 4:
                        message.winCount = reader.int32();
                        break;
                    case 5:
                        message.winCode = reader.int32();
                        break;
                    case 6:
                        message.winRate = reader.float();
                        break;
                    case 7:
                        message.loseCount = reader.int32();
                        break;
                    case 8:
                        message.loseCode = reader.int32();
                        break;
                    case 9:
                        message.loseRate = reader.float();
                        break;
                    case 10:
                        message.count = reader.int32();
                        break;
                    case 11:
                        message.rankCaptial = reader.float();
                        break;
                    case 12:
                        message.rankRate = reader.float();
                        break;
                    case 13:
                        message.ts = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetSmxlReportReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetSmxlReportReply} CmdGetSmxlReportReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetSmxlReportReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetSmxlReportReply message.
         * @function verify
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetSmxlReportReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.capitalInit != null && message.hasOwnProperty("capitalInit"))
                if (!$util.isInteger(message.capitalInit) && !(message.capitalInit && $util.isInteger(message.capitalInit.low) && $util.isInteger(message.capitalInit.high)))
                    return "capitalInit: integer|Long expected";
            if (message.capitalFinal != null && message.hasOwnProperty("capitalFinal"))
                if (!$util.isInteger(message.capitalFinal) && !(message.capitalFinal && $util.isInteger(message.capitalFinal.low) && $util.isInteger(message.capitalFinal.high)))
                    return "capitalFinal: integer|Long expected";
            if (message.profitRate != null && message.hasOwnProperty("profitRate"))
                if (typeof message.profitRate !== "number")
                    return "profitRate: number expected";
            if (message.winCount != null && message.hasOwnProperty("winCount"))
                if (!$util.isInteger(message.winCount))
                    return "winCount: integer expected";
            if (message.winCode != null && message.hasOwnProperty("winCode"))
                if (!$util.isInteger(message.winCode))
                    return "winCode: integer expected";
            if (message.winRate != null && message.hasOwnProperty("winRate"))
                if (typeof message.winRate !== "number")
                    return "winRate: number expected";
            if (message.loseCount != null && message.hasOwnProperty("loseCount"))
                if (!$util.isInteger(message.loseCount))
                    return "loseCount: integer expected";
            if (message.loseCode != null && message.hasOwnProperty("loseCode"))
                if (!$util.isInteger(message.loseCode))
                    return "loseCode: integer expected";
            if (message.loseRate != null && message.hasOwnProperty("loseRate"))
                if (typeof message.loseRate !== "number")
                    return "loseRate: number expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.rankCaptial != null && message.hasOwnProperty("rankCaptial"))
                if (typeof message.rankCaptial !== "number")
                    return "rankCaptial: number expected";
            if (message.rankRate != null && message.hasOwnProperty("rankRate"))
                if (typeof message.rankRate !== "number")
                    return "rankRate: number expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts))
                    return "ts: integer expected";
            return null;
        };

        /**
         * Creates a CmdGetSmxlReportReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetSmxlReportReply} CmdGetSmxlReportReply
         */
        CmdGetSmxlReportReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetSmxlReportReply)
                return object;
            var message = new $root.pb.CmdGetSmxlReportReply();
            if (object.capitalInit != null)
                if ($util.Long)
                    (message.capitalInit = $util.Long.fromValue(object.capitalInit)).unsigned = false;
                else if (typeof object.capitalInit === "string")
                    message.capitalInit = parseInt(object.capitalInit, 10);
                else if (typeof object.capitalInit === "number")
                    message.capitalInit = object.capitalInit;
                else if (typeof object.capitalInit === "object")
                    message.capitalInit = new $util.LongBits(object.capitalInit.low >>> 0, object.capitalInit.high >>> 0).toNumber();
            if (object.capitalFinal != null)
                if ($util.Long)
                    (message.capitalFinal = $util.Long.fromValue(object.capitalFinal)).unsigned = false;
                else if (typeof object.capitalFinal === "string")
                    message.capitalFinal = parseInt(object.capitalFinal, 10);
                else if (typeof object.capitalFinal === "number")
                    message.capitalFinal = object.capitalFinal;
                else if (typeof object.capitalFinal === "object")
                    message.capitalFinal = new $util.LongBits(object.capitalFinal.low >>> 0, object.capitalFinal.high >>> 0).toNumber();
            if (object.profitRate != null)
                message.profitRate = Number(object.profitRate);
            if (object.winCount != null)
                message.winCount = object.winCount | 0;
            if (object.winCode != null)
                message.winCode = object.winCode | 0;
            if (object.winRate != null)
                message.winRate = Number(object.winRate);
            if (object.loseCount != null)
                message.loseCount = object.loseCount | 0;
            if (object.loseCode != null)
                message.loseCode = object.loseCode | 0;
            if (object.loseRate != null)
                message.loseRate = Number(object.loseRate);
            if (object.count != null)
                message.count = object.count | 0;
            if (object.rankCaptial != null)
                message.rankCaptial = Number(object.rankCaptial);
            if (object.rankRate != null)
                message.rankRate = Number(object.rankRate);
            if (object.ts != null)
                message.ts = object.ts | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdGetSmxlReportReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetSmxlReportReply
         * @static
         * @param {pb.CmdGetSmxlReportReply} message CmdGetSmxlReportReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetSmxlReportReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.capitalInit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.capitalInit = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.capitalFinal = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.capitalFinal = options.longs === String ? "0" : 0;
                object.profitRate = 0;
                object.winCount = 0;
                object.winCode = 0;
                object.winRate = 0;
                object.loseCount = 0;
                object.loseCode = 0;
                object.loseRate = 0;
                object.count = 0;
                object.rankCaptial = 0;
                object.rankRate = 0;
                object.ts = 0;
            }
            if (message.capitalInit != null && message.hasOwnProperty("capitalInit"))
                if (typeof message.capitalInit === "number")
                    object.capitalInit = options.longs === String ? String(message.capitalInit) : message.capitalInit;
                else
                    object.capitalInit = options.longs === String ? $util.Long.prototype.toString.call(message.capitalInit) : options.longs === Number ? new $util.LongBits(message.capitalInit.low >>> 0, message.capitalInit.high >>> 0).toNumber() : message.capitalInit;
            if (message.capitalFinal != null && message.hasOwnProperty("capitalFinal"))
                if (typeof message.capitalFinal === "number")
                    object.capitalFinal = options.longs === String ? String(message.capitalFinal) : message.capitalFinal;
                else
                    object.capitalFinal = options.longs === String ? $util.Long.prototype.toString.call(message.capitalFinal) : options.longs === Number ? new $util.LongBits(message.capitalFinal.low >>> 0, message.capitalFinal.high >>> 0).toNumber() : message.capitalFinal;
            if (message.profitRate != null && message.hasOwnProperty("profitRate"))
                object.profitRate = options.json && !isFinite(message.profitRate) ? String(message.profitRate) : message.profitRate;
            if (message.winCount != null && message.hasOwnProperty("winCount"))
                object.winCount = message.winCount;
            if (message.winCode != null && message.hasOwnProperty("winCode"))
                object.winCode = message.winCode;
            if (message.winRate != null && message.hasOwnProperty("winRate"))
                object.winRate = options.json && !isFinite(message.winRate) ? String(message.winRate) : message.winRate;
            if (message.loseCount != null && message.hasOwnProperty("loseCount"))
                object.loseCount = message.loseCount;
            if (message.loseCode != null && message.hasOwnProperty("loseCode"))
                object.loseCode = message.loseCode;
            if (message.loseRate != null && message.hasOwnProperty("loseRate"))
                object.loseRate = options.json && !isFinite(message.loseRate) ? String(message.loseRate) : message.loseRate;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.rankCaptial != null && message.hasOwnProperty("rankCaptial"))
                object.rankCaptial = options.json && !isFinite(message.rankCaptial) ? String(message.rankCaptial) : message.rankCaptial;
            if (message.rankRate != null && message.hasOwnProperty("rankRate"))
                object.rankRate = options.json && !isFinite(message.rankRate) ? String(message.rankRate) : message.rankRate;
            if (message.ts != null && message.hasOwnProperty("ts"))
                object.ts = message.ts;
            return object;
        };

        /**
         * Converts this CmdGetSmxlReportReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGetSmxlReportReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetSmxlReportReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetSmxlReportReply;
    })();

    pb.CmdRoomCreate = (function () {

        /**
         * Properties of a CmdRoomCreate.
         * @memberof pb
         * @interface ICmdRoomCreate
         * @property {pb.GameType|null} [game] CmdRoomCreate game
         * @property {number|null} [uid] CmdRoomCreate uid
         * @property {number|null} [node] CmdRoomCreate node
         * @property {number|null} [capital] CmdRoomCreate capital
         * @property {string|null} [pwd] CmdRoomCreate pwd
         * @property {Array.<number>|null} [junXian] CmdRoomCreate junXian
         */

        /**
         * Constructs a new CmdRoomCreate.
         * @memberof pb
         * @classdesc Represents a CmdRoomCreate.
         * @implements ICmdRoomCreate
         * @constructor
         * @param {pb.ICmdRoomCreate=} [properties] Properties to set
         */
        function CmdRoomCreate(properties) {
            this.junXian = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomCreate game.
         * @member {pb.GameType} game
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.game = 0;

        /**
         * CmdRoomCreate uid.
         * @member {number} uid
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.uid = 0;

        /**
         * CmdRoomCreate node.
         * @member {number} node
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.node = 0;

        /**
         * CmdRoomCreate capital.
         * @member {number} capital
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.capital = 0;

        /**
         * CmdRoomCreate pwd.
         * @member {string} pwd
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.pwd = "";

        /**
         * CmdRoomCreate junXian.
         * @member {Array.<number>} junXian
         * @memberof pb.CmdRoomCreate
         * @instance
         */
        CmdRoomCreate.prototype.junXian = $util.emptyArray;

        /**
         * Creates a new CmdRoomCreate instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {pb.ICmdRoomCreate=} [properties] Properties to set
         * @returns {pb.CmdRoomCreate} CmdRoomCreate instance
         */
        CmdRoomCreate.create = function create(properties) {
            return new CmdRoomCreate(properties);
        };

        /**
         * Encodes the specified CmdRoomCreate message. Does not implicitly {@link pb.CmdRoomCreate.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {pb.ICmdRoomCreate} message CmdRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomCreate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.game);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.node);
            if (message.capital != null && Object.hasOwnProperty.call(message, "capital"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.capital);
            if (message.pwd != null && Object.hasOwnProperty.call(message, "pwd"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.pwd);
            if (message.junXian != null && message.junXian.length) {
                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                for (var i = 0; i < message.junXian.length; ++i)
                    writer.int32(message.junXian[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CmdRoomCreate message, length delimited. Does not implicitly {@link pb.CmdRoomCreate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {pb.ICmdRoomCreate} message CmdRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomCreate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomCreate message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomCreate} CmdRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomCreate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomCreate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.game = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.node = reader.int32();
                        break;
                    case 4:
                        message.capital = reader.int32();
                        break;
                    case 5:
                        message.pwd = reader.string();
                        break;
                    case 6:
                        if (!(message.junXian && message.junXian.length))
                            message.junXian = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.junXian.push(reader.int32());
                        } else
                            message.junXian.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomCreate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomCreate} CmdRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomCreate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomCreate message.
         * @function verify
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomCreate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            if (message.capital != null && message.hasOwnProperty("capital"))
                if (!$util.isInteger(message.capital))
                    return "capital: integer expected";
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            if (message.junXian != null && message.hasOwnProperty("junXian")) {
                if (!Array.isArray(message.junXian))
                    return "junXian: array expected";
                for (var i = 0; i < message.junXian.length; ++i)
                    if (!$util.isInteger(message.junXian[i]))
                        return "junXian: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CmdRoomCreate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomCreate} CmdRoomCreate
         */
        CmdRoomCreate.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomCreate)
                return object;
            var message = new $root.pb.CmdRoomCreate();
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.node != null)
                message.node = object.node | 0;
            if (object.capital != null)
                message.capital = object.capital | 0;
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            if (object.junXian) {
                if (!Array.isArray(object.junXian))
                    throw TypeError(".pb.CmdRoomCreate.junXian: array expected");
                message.junXian = [];
                for (var i = 0; i < object.junXian.length; ++i)
                    message.junXian[i] = object.junXian[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomCreate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomCreate
         * @static
         * @param {pb.CmdRoomCreate} message CmdRoomCreate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomCreate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.junXian = [];
            if (options.defaults) {
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.uid = 0;
                object.node = 0;
                object.capital = 0;
                object.pwd = "";
            }
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            if (message.capital != null && message.hasOwnProperty("capital"))
                object.capital = message.capital;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            if (message.junXian && message.junXian.length) {
                object.junXian = [];
                for (var j = 0; j < message.junXian.length; ++j)
                    object.junXian[j] = message.junXian[j];
            }
            return object;
        };

        /**
         * Converts this CmdRoomCreate to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomCreate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomCreate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomCreate;
    })();

    pb.CmdRoomCreateReply = (function () {

        /**
         * Properties of a CmdRoomCreateReply.
         * @memberof pb
         * @interface ICmdRoomCreateReply
         * @property {pb.IErrorInfo|null} [err] CmdRoomCreateReply err
         * @property {number|null} [id] CmdRoomCreateReply id
         */

        /**
         * Constructs a new CmdRoomCreateReply.
         * @memberof pb
         * @classdesc Represents a CmdRoomCreateReply.
         * @implements ICmdRoomCreateReply
         * @constructor
         * @param {pb.ICmdRoomCreateReply=} [properties] Properties to set
         */
        function CmdRoomCreateReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomCreateReply err.
         * @member {pb.IErrorInfo|null|undefined} err
         * @memberof pb.CmdRoomCreateReply
         * @instance
         */
        CmdRoomCreateReply.prototype.err = null;

        /**
         * CmdRoomCreateReply id.
         * @member {number} id
         * @memberof pb.CmdRoomCreateReply
         * @instance
         */
        CmdRoomCreateReply.prototype.id = 0;

        /**
         * Creates a new CmdRoomCreateReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {pb.ICmdRoomCreateReply=} [properties] Properties to set
         * @returns {pb.CmdRoomCreateReply} CmdRoomCreateReply instance
         */
        CmdRoomCreateReply.create = function create(properties) {
            return new CmdRoomCreateReply(properties);
        };

        /**
         * Encodes the specified CmdRoomCreateReply message. Does not implicitly {@link pb.CmdRoomCreateReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {pb.ICmdRoomCreateReply} message CmdRoomCreateReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomCreateReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                $root.pb.ErrorInfo.encode(message.err, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdRoomCreateReply message, length delimited. Does not implicitly {@link pb.CmdRoomCreateReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {pb.ICmdRoomCreateReply} message CmdRoomCreateReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomCreateReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomCreateReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomCreateReply} CmdRoomCreateReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomCreateReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomCreateReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.err = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomCreateReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomCreateReply} CmdRoomCreateReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomCreateReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomCreateReply message.
         * @function verify
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomCreateReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err")) {
                var error = $root.pb.ErrorInfo.verify(message.err);
                if (error)
                    return "err." + error;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdRoomCreateReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomCreateReply} CmdRoomCreateReply
         */
        CmdRoomCreateReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomCreateReply)
                return object;
            var message = new $root.pb.CmdRoomCreateReply();
            if (object.err != null) {
                if (typeof object.err !== "object")
                    throw TypeError(".pb.CmdRoomCreateReply.err: object expected");
                message.err = $root.pb.ErrorInfo.fromObject(object.err);
            }
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomCreateReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomCreateReply
         * @static
         * @param {pb.CmdRoomCreateReply} message CmdRoomCreateReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomCreateReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = null;
                object.id = 0;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = $root.pb.ErrorInfo.toObject(message.err, options);
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdRoomCreateReply to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomCreateReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomCreateReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomCreateReply;
    })();

    pb.CmdRoomEnter = (function () {

        /**
         * Properties of a CmdRoomEnter.
         * @memberof pb
         * @interface ICmdRoomEnter
         * @property {number|null} [id] CmdRoomEnter id
         * @property {pb.GameType|null} [game] CmdRoomEnter game
         * @property {number|null} [uid] CmdRoomEnter uid
         * @property {number|null} [node] CmdRoomEnter node
         * @property {string|null} [pwd] CmdRoomEnter pwd
         * @property {Array.<number>|null} [junXian] CmdRoomEnter junXian
         */

        /**
         * Constructs a new CmdRoomEnter.
         * @memberof pb
         * @classdesc Represents a CmdRoomEnter.
         * @implements ICmdRoomEnter
         * @constructor
         * @param {pb.ICmdRoomEnter=} [properties] Properties to set
         */
        function CmdRoomEnter(properties) {
            this.junXian = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomEnter id.
         * @member {number} id
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.id = 0;

        /**
         * CmdRoomEnter game.
         * @member {pb.GameType} game
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.game = 0;

        /**
         * CmdRoomEnter uid.
         * @member {number} uid
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.uid = 0;

        /**
         * CmdRoomEnter node.
         * @member {number} node
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.node = 0;

        /**
         * CmdRoomEnter pwd.
         * @member {string} pwd
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.pwd = "";

        /**
         * CmdRoomEnter junXian.
         * @member {Array.<number>} junXian
         * @memberof pb.CmdRoomEnter
         * @instance
         */
        CmdRoomEnter.prototype.junXian = $util.emptyArray;

        /**
         * Creates a new CmdRoomEnter instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {pb.ICmdRoomEnter=} [properties] Properties to set
         * @returns {pb.CmdRoomEnter} CmdRoomEnter instance
         */
        CmdRoomEnter.create = function create(properties) {
            return new CmdRoomEnter(properties);
        };

        /**
         * Encodes the specified CmdRoomEnter message. Does not implicitly {@link pb.CmdRoomEnter.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {pb.ICmdRoomEnter} message CmdRoomEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomEnter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.game);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.uid);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.node);
            if (message.pwd != null && Object.hasOwnProperty.call(message, "pwd"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.pwd);
            if (message.junXian != null && message.junXian.length) {
                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                for (var i = 0; i < message.junXian.length; ++i)
                    writer.int32(message.junXian[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CmdRoomEnter message, length delimited. Does not implicitly {@link pb.CmdRoomEnter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {pb.ICmdRoomEnter} message CmdRoomEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomEnter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomEnter message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomEnter} CmdRoomEnter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomEnter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomEnter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.game = reader.int32();
                        break;
                    case 3:
                        message.uid = reader.int32();
                        break;
                    case 4:
                        message.node = reader.int32();
                        break;
                    case 5:
                        message.pwd = reader.string();
                        break;
                    case 6:
                        if (!(message.junXian && message.junXian.length))
                            message.junXian = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.junXian.push(reader.int32());
                        } else
                            message.junXian.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomEnter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomEnter} CmdRoomEnter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomEnter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomEnter message.
         * @function verify
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomEnter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            if (message.junXian != null && message.hasOwnProperty("junXian")) {
                if (!Array.isArray(message.junXian))
                    return "junXian: array expected";
                for (var i = 0; i < message.junXian.length; ++i)
                    if (!$util.isInteger(message.junXian[i]))
                        return "junXian: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CmdRoomEnter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomEnter} CmdRoomEnter
         */
        CmdRoomEnter.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomEnter)
                return object;
            var message = new $root.pb.CmdRoomEnter();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.node != null)
                message.node = object.node | 0;
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            if (object.junXian) {
                if (!Array.isArray(object.junXian))
                    throw TypeError(".pb.CmdRoomEnter.junXian: array expected");
                message.junXian = [];
                for (var i = 0; i < object.junXian.length; ++i)
                    message.junXian[i] = object.junXian[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomEnter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomEnter
         * @static
         * @param {pb.CmdRoomEnter} message CmdRoomEnter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomEnter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.junXian = [];
            if (options.defaults) {
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.uid = 0;
                object.node = 0;
                object.pwd = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            if (message.junXian && message.junXian.length) {
                object.junXian = [];
                for (var j = 0; j < message.junXian.length; ++j)
                    object.junXian[j] = message.junXian[j];
            }
            return object;
        };

        /**
         * Converts this CmdRoomEnter to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomEnter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomEnter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomEnter;
    })();

    pb.CmdRoomEnterReply = (function () {

        /**
         * Properties of a CmdRoomEnterReply.
         * @memberof pb
         * @interface ICmdRoomEnterReply
         * @property {pb.IErrorInfo|null} [err] CmdRoomEnterReply err
         * @property {number|null} [id] CmdRoomEnterReply id
         * @property {number|null} [node] CmdRoomEnterReply node
         */

        /**
         * Constructs a new CmdRoomEnterReply.
         * @memberof pb
         * @classdesc Represents a CmdRoomEnterReply.
         * @implements ICmdRoomEnterReply
         * @constructor
         * @param {pb.ICmdRoomEnterReply=} [properties] Properties to set
         */
        function CmdRoomEnterReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomEnterReply err.
         * @member {pb.IErrorInfo|null|undefined} err
         * @memberof pb.CmdRoomEnterReply
         * @instance
         */
        CmdRoomEnterReply.prototype.err = null;

        /**
         * CmdRoomEnterReply id.
         * @member {number} id
         * @memberof pb.CmdRoomEnterReply
         * @instance
         */
        CmdRoomEnterReply.prototype.id = 0;

        /**
         * CmdRoomEnterReply node.
         * @member {number} node
         * @memberof pb.CmdRoomEnterReply
         * @instance
         */
        CmdRoomEnterReply.prototype.node = 0;

        /**
         * Creates a new CmdRoomEnterReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {pb.ICmdRoomEnterReply=} [properties] Properties to set
         * @returns {pb.CmdRoomEnterReply} CmdRoomEnterReply instance
         */
        CmdRoomEnterReply.create = function create(properties) {
            return new CmdRoomEnterReply(properties);
        };

        /**
         * Encodes the specified CmdRoomEnterReply message. Does not implicitly {@link pb.CmdRoomEnterReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {pb.ICmdRoomEnterReply} message CmdRoomEnterReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomEnterReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                $root.pb.ErrorInfo.encode(message.err, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.node);
            return writer;
        };

        /**
         * Encodes the specified CmdRoomEnterReply message, length delimited. Does not implicitly {@link pb.CmdRoomEnterReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {pb.ICmdRoomEnterReply} message CmdRoomEnterReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomEnterReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomEnterReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomEnterReply} CmdRoomEnterReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomEnterReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomEnterReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.err = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.int32();
                        break;
                    case 3:
                        message.node = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomEnterReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomEnterReply} CmdRoomEnterReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomEnterReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomEnterReply message.
         * @function verify
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomEnterReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err")) {
                var error = $root.pb.ErrorInfo.verify(message.err);
                if (error)
                    return "err." + error;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            return null;
        };

        /**
         * Creates a CmdRoomEnterReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomEnterReply} CmdRoomEnterReply
         */
        CmdRoomEnterReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomEnterReply)
                return object;
            var message = new $root.pb.CmdRoomEnterReply();
            if (object.err != null) {
                if (typeof object.err !== "object")
                    throw TypeError(".pb.CmdRoomEnterReply.err: object expected");
                message.err = $root.pb.ErrorInfo.fromObject(object.err);
            }
            if (object.id != null)
                message.id = object.id | 0;
            if (object.node != null)
                message.node = object.node | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomEnterReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomEnterReply
         * @static
         * @param {pb.CmdRoomEnterReply} message CmdRoomEnterReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomEnterReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = null;
                object.id = 0;
                object.node = 0;
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = $root.pb.ErrorInfo.toObject(message.err, options);
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            return object;
        };

        /**
         * Converts this CmdRoomEnterReply to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomEnterReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomEnterReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomEnterReply;
    })();

    pb.CmdRoomLeave = (function () {

        /**
         * Properties of a CmdRoomLeave.
         * @memberof pb
         * @interface ICmdRoomLeave
         * @property {number|null} [id] CmdRoomLeave id
         * @property {number|null} [uid] CmdRoomLeave uid
         */

        /**
         * Constructs a new CmdRoomLeave.
         * @memberof pb
         * @classdesc Represents a CmdRoomLeave.
         * @implements ICmdRoomLeave
         * @constructor
         * @param {pb.ICmdRoomLeave=} [properties] Properties to set
         */
        function CmdRoomLeave(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomLeave id.
         * @member {number} id
         * @memberof pb.CmdRoomLeave
         * @instance
         */
        CmdRoomLeave.prototype.id = 0;

        /**
         * CmdRoomLeave uid.
         * @member {number} uid
         * @memberof pb.CmdRoomLeave
         * @instance
         */
        CmdRoomLeave.prototype.uid = 0;

        /**
         * Creates a new CmdRoomLeave instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {pb.ICmdRoomLeave=} [properties] Properties to set
         * @returns {pb.CmdRoomLeave} CmdRoomLeave instance
         */
        CmdRoomLeave.create = function create(properties) {
            return new CmdRoomLeave(properties);
        };

        /**
         * Encodes the specified CmdRoomLeave message. Does not implicitly {@link pb.CmdRoomLeave.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {pb.ICmdRoomLeave} message CmdRoomLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomLeave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdRoomLeave message, length delimited. Does not implicitly {@link pb.CmdRoomLeave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {pb.ICmdRoomLeave} message CmdRoomLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomLeave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomLeave message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomLeave} CmdRoomLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomLeave.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomLeave();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomLeave message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomLeave} CmdRoomLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomLeave.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomLeave message.
         * @function verify
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomLeave.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdRoomLeave message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomLeave} CmdRoomLeave
         */
        CmdRoomLeave.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomLeave)
                return object;
            var message = new $root.pb.CmdRoomLeave();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomLeave message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomLeave
         * @static
         * @param {pb.CmdRoomLeave} message CmdRoomLeave
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomLeave.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.uid = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdRoomLeave to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomLeave
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomLeave.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomLeave;
    })();

    pb.CmdRoomLeaveReply = (function () {

        /**
         * Properties of a CmdRoomLeaveReply.
         * @memberof pb
         * @interface ICmdRoomLeaveReply
         * @property {pb.IErrorInfo|null} [err] CmdRoomLeaveReply err
         */

        /**
         * Constructs a new CmdRoomLeaveReply.
         * @memberof pb
         * @classdesc Represents a CmdRoomLeaveReply.
         * @implements ICmdRoomLeaveReply
         * @constructor
         * @param {pb.ICmdRoomLeaveReply=} [properties] Properties to set
         */
        function CmdRoomLeaveReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRoomLeaveReply err.
         * @member {pb.IErrorInfo|null|undefined} err
         * @memberof pb.CmdRoomLeaveReply
         * @instance
         */
        CmdRoomLeaveReply.prototype.err = null;

        /**
         * Creates a new CmdRoomLeaveReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {pb.ICmdRoomLeaveReply=} [properties] Properties to set
         * @returns {pb.CmdRoomLeaveReply} CmdRoomLeaveReply instance
         */
        CmdRoomLeaveReply.create = function create(properties) {
            return new CmdRoomLeaveReply(properties);
        };

        /**
         * Encodes the specified CmdRoomLeaveReply message. Does not implicitly {@link pb.CmdRoomLeaveReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {pb.ICmdRoomLeaveReply} message CmdRoomLeaveReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomLeaveReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                $root.pb.ErrorInfo.encode(message.err, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdRoomLeaveReply message, length delimited. Does not implicitly {@link pb.CmdRoomLeaveReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {pb.ICmdRoomLeaveReply} message CmdRoomLeaveReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRoomLeaveReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRoomLeaveReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRoomLeaveReply} CmdRoomLeaveReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomLeaveReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRoomLeaveReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.err = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRoomLeaveReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRoomLeaveReply} CmdRoomLeaveReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRoomLeaveReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRoomLeaveReply message.
         * @function verify
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRoomLeaveReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err")) {
                var error = $root.pb.ErrorInfo.verify(message.err);
                if (error)
                    return "err." + error;
            }
            return null;
        };

        /**
         * Creates a CmdRoomLeaveReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRoomLeaveReply} CmdRoomLeaveReply
         */
        CmdRoomLeaveReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRoomLeaveReply)
                return object;
            var message = new $root.pb.CmdRoomLeaveReply();
            if (object.err != null) {
                if (typeof object.err !== "object")
                    throw TypeError(".pb.CmdRoomLeaveReply.err: object expected");
                message.err = $root.pb.ErrorInfo.fromObject(object.err);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdRoomLeaveReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRoomLeaveReply
         * @static
         * @param {pb.CmdRoomLeaveReply} message CmdRoomLeaveReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRoomLeaveReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.err = null;
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = $root.pb.ErrorInfo.toObject(message.err, options);
            return object;
        };

        /**
         * Converts this CmdRoomLeaveReply to JSON.
         * @function toJSON
         * @memberof pb.CmdRoomLeaveReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRoomLeaveReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRoomLeaveReply;
    })();

    pb.SyncRoomEnter = (function () {

        /**
         * Properties of a SyncRoomEnter.
         * @memberof pb
         * @interface ISyncRoomEnter
         * @property {number|null} [id] SyncRoomEnter id
         * @property {pb.GameType|null} [game] SyncRoomEnter game
         * @property {pb.IGameData|null} [player] SyncRoomEnter player
         */

        /**
         * Constructs a new SyncRoomEnter.
         * @memberof pb
         * @classdesc Represents a SyncRoomEnter.
         * @implements ISyncRoomEnter
         * @constructor
         * @param {pb.ISyncRoomEnter=} [properties] Properties to set
         */
        function SyncRoomEnter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SyncRoomEnter id.
         * @member {number} id
         * @memberof pb.SyncRoomEnter
         * @instance
         */
        SyncRoomEnter.prototype.id = 0;

        /**
         * SyncRoomEnter game.
         * @member {pb.GameType} game
         * @memberof pb.SyncRoomEnter
         * @instance
         */
        SyncRoomEnter.prototype.game = 0;

        /**
         * SyncRoomEnter player.
         * @member {pb.IGameData|null|undefined} player
         * @memberof pb.SyncRoomEnter
         * @instance
         */
        SyncRoomEnter.prototype.player = null;

        /**
         * Creates a new SyncRoomEnter instance using the specified properties.
         * @function create
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {pb.ISyncRoomEnter=} [properties] Properties to set
         * @returns {pb.SyncRoomEnter} SyncRoomEnter instance
         */
        SyncRoomEnter.create = function create(properties) {
            return new SyncRoomEnter(properties);
        };

        /**
         * Encodes the specified SyncRoomEnter message. Does not implicitly {@link pb.SyncRoomEnter.verify|verify} messages.
         * @function encode
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {pb.ISyncRoomEnter} message SyncRoomEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SyncRoomEnter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.game);
            if (message.player != null && Object.hasOwnProperty.call(message, "player"))
                $root.pb.GameData.encode(message.player, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SyncRoomEnter message, length delimited. Does not implicitly {@link pb.SyncRoomEnter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {pb.ISyncRoomEnter} message SyncRoomEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SyncRoomEnter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SyncRoomEnter message from the specified reader or buffer.
         * @function decode
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.SyncRoomEnter} SyncRoomEnter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SyncRoomEnter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.SyncRoomEnter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.game = reader.int32();
                        break;
                    case 3:
                        message.player = $root.pb.GameData.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a SyncRoomEnter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.SyncRoomEnter} SyncRoomEnter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SyncRoomEnter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SyncRoomEnter message.
         * @function verify
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SyncRoomEnter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.player != null && message.hasOwnProperty("player")) {
                var error = $root.pb.GameData.verify(message.player);
                if (error)
                    return "player." + error;
            }
            return null;
        };

        /**
         * Creates a SyncRoomEnter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.SyncRoomEnter} SyncRoomEnter
         */
        SyncRoomEnter.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.SyncRoomEnter)
                return object;
            var message = new $root.pb.SyncRoomEnter();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.player != null) {
                if (typeof object.player !== "object")
                    throw TypeError(".pb.SyncRoomEnter.player: object expected");
                message.player = $root.pb.GameData.fromObject(object.player);
            }
            return message;
        };

        /**
         * Creates a plain object from a SyncRoomEnter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.SyncRoomEnter
         * @static
         * @param {pb.SyncRoomEnter} message SyncRoomEnter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SyncRoomEnter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.player = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.player != null && message.hasOwnProperty("player"))
                object.player = $root.pb.GameData.toObject(message.player, options);
            return object;
        };

        /**
         * Converts this SyncRoomEnter to JSON.
         * @function toJSON
         * @memberof pb.SyncRoomEnter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SyncRoomEnter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SyncRoomEnter;
    })();

    pb.SyncRoomLeave = (function () {

        /**
         * Properties of a SyncRoomLeave.
         * @memberof pb
         * @interface ISyncRoomLeave
         * @property {number|null} [id] SyncRoomLeave id
         * @property {pb.GameType|null} [game] SyncRoomLeave game
         * @property {number|null} [uid] SyncRoomLeave uid
         */

        /**
         * Constructs a new SyncRoomLeave.
         * @memberof pb
         * @classdesc Represents a SyncRoomLeave.
         * @implements ISyncRoomLeave
         * @constructor
         * @param {pb.ISyncRoomLeave=} [properties] Properties to set
         */
        function SyncRoomLeave(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SyncRoomLeave id.
         * @member {number} id
         * @memberof pb.SyncRoomLeave
         * @instance
         */
        SyncRoomLeave.prototype.id = 0;

        /**
         * SyncRoomLeave game.
         * @member {pb.GameType} game
         * @memberof pb.SyncRoomLeave
         * @instance
         */
        SyncRoomLeave.prototype.game = 0;

        /**
         * SyncRoomLeave uid.
         * @member {number} uid
         * @memberof pb.SyncRoomLeave
         * @instance
         */
        SyncRoomLeave.prototype.uid = 0;

        /**
         * Creates a new SyncRoomLeave instance using the specified properties.
         * @function create
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {pb.ISyncRoomLeave=} [properties] Properties to set
         * @returns {pb.SyncRoomLeave} SyncRoomLeave instance
         */
        SyncRoomLeave.create = function create(properties) {
            return new SyncRoomLeave(properties);
        };

        /**
         * Encodes the specified SyncRoomLeave message. Does not implicitly {@link pb.SyncRoomLeave.verify|verify} messages.
         * @function encode
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {pb.ISyncRoomLeave} message SyncRoomLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SyncRoomLeave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.game);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified SyncRoomLeave message, length delimited. Does not implicitly {@link pb.SyncRoomLeave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {pb.ISyncRoomLeave} message SyncRoomLeave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SyncRoomLeave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SyncRoomLeave message from the specified reader or buffer.
         * @function decode
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.SyncRoomLeave} SyncRoomLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SyncRoomLeave.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.SyncRoomLeave();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.game = reader.int32();
                        break;
                    case 3:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a SyncRoomLeave message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.SyncRoomLeave} SyncRoomLeave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SyncRoomLeave.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SyncRoomLeave message.
         * @function verify
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SyncRoomLeave.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a SyncRoomLeave message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.SyncRoomLeave} SyncRoomLeave
         */
        SyncRoomLeave.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.SyncRoomLeave)
                return object;
            var message = new $root.pb.SyncRoomLeave();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a SyncRoomLeave message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.SyncRoomLeave
         * @static
         * @param {pb.SyncRoomLeave} message SyncRoomLeave
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SyncRoomLeave.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.uid = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this SyncRoomLeave to JSON.
         * @function toJSON
         * @memberof pb.SyncRoomLeave
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SyncRoomLeave.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SyncRoomLeave;
    })();

    pb.RoomPlayerStatus = (function () {

        /**
         * Properties of a RoomPlayerStatus.
         * @memberof pb
         * @interface IRoomPlayerStatus
         * @property {number|null} [id] RoomPlayerStatus id
         * @property {number|null} [uid] RoomPlayerStatus uid
         * @property {boolean|null} [ready] RoomPlayerStatus ready
         */

        /**
         * Constructs a new RoomPlayerStatus.
         * @memberof pb
         * @classdesc Represents a RoomPlayerStatus.
         * @implements IRoomPlayerStatus
         * @constructor
         * @param {pb.IRoomPlayerStatus=} [properties] Properties to set
         */
        function RoomPlayerStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomPlayerStatus id.
         * @member {number} id
         * @memberof pb.RoomPlayerStatus
         * @instance
         */
        RoomPlayerStatus.prototype.id = 0;

        /**
         * RoomPlayerStatus uid.
         * @member {number} uid
         * @memberof pb.RoomPlayerStatus
         * @instance
         */
        RoomPlayerStatus.prototype.uid = 0;

        /**
         * RoomPlayerStatus ready.
         * @member {boolean} ready
         * @memberof pb.RoomPlayerStatus
         * @instance
         */
        RoomPlayerStatus.prototype.ready = false;

        /**
         * Creates a new RoomPlayerStatus instance using the specified properties.
         * @function create
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {pb.IRoomPlayerStatus=} [properties] Properties to set
         * @returns {pb.RoomPlayerStatus} RoomPlayerStatus instance
         */
        RoomPlayerStatus.create = function create(properties) {
            return new RoomPlayerStatus(properties);
        };

        /**
         * Encodes the specified RoomPlayerStatus message. Does not implicitly {@link pb.RoomPlayerStatus.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {pb.IRoomPlayerStatus} message RoomPlayerStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomPlayerStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.ready != null && Object.hasOwnProperty.call(message, "ready"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ready);
            return writer;
        };

        /**
         * Encodes the specified RoomPlayerStatus message, length delimited. Does not implicitly {@link pb.RoomPlayerStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {pb.IRoomPlayerStatus} message RoomPlayerStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomPlayerStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomPlayerStatus message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomPlayerStatus} RoomPlayerStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomPlayerStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomPlayerStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.ready = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomPlayerStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomPlayerStatus} RoomPlayerStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomPlayerStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomPlayerStatus message.
         * @function verify
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomPlayerStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.ready != null && message.hasOwnProperty("ready"))
                if (typeof message.ready !== "boolean")
                    return "ready: boolean expected";
            return null;
        };

        /**
         * Creates a RoomPlayerStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomPlayerStatus} RoomPlayerStatus
         */
        RoomPlayerStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomPlayerStatus)
                return object;
            var message = new $root.pb.RoomPlayerStatus();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.ready != null)
                message.ready = Boolean(object.ready);
            return message;
        };

        /**
         * Creates a plain object from a RoomPlayerStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomPlayerStatus
         * @static
         * @param {pb.RoomPlayerStatus} message RoomPlayerStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomPlayerStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.uid = 0;
                object.ready = false;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.ready != null && message.hasOwnProperty("ready"))
                object.ready = message.ready;
            return object;
        };

        /**
         * Converts this RoomPlayerStatus to JSON.
         * @function toJSON
         * @memberof pb.RoomPlayerStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomPlayerStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomPlayerStatus;
    })();

    pb.RoomGameStatus = (function () {

        /**
         * Properties of a RoomGameStatus.
         * @memberof pb
         * @interface IRoomGameStatus
         * @property {number|null} [id] RoomGameStatus id
         * @property {number|null} [status] RoomGameStatus status
         */

        /**
         * Constructs a new RoomGameStatus.
         * @memberof pb
         * @classdesc Represents a RoomGameStatus.
         * @implements IRoomGameStatus
         * @constructor
         * @param {pb.IRoomGameStatus=} [properties] Properties to set
         */
        function RoomGameStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomGameStatus id.
         * @member {number} id
         * @memberof pb.RoomGameStatus
         * @instance
         */
        RoomGameStatus.prototype.id = 0;

        /**
         * RoomGameStatus status.
         * @member {number} status
         * @memberof pb.RoomGameStatus
         * @instance
         */
        RoomGameStatus.prototype.status = 0;

        /**
         * Creates a new RoomGameStatus instance using the specified properties.
         * @function create
         * @memberof pb.RoomGameStatus
         * @static
         * @param {pb.IRoomGameStatus=} [properties] Properties to set
         * @returns {pb.RoomGameStatus} RoomGameStatus instance
         */
        RoomGameStatus.create = function create(properties) {
            return new RoomGameStatus(properties);
        };

        /**
         * Encodes the specified RoomGameStatus message. Does not implicitly {@link pb.RoomGameStatus.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomGameStatus
         * @static
         * @param {pb.IRoomGameStatus} message RoomGameStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
            return writer;
        };

        /**
         * Encodes the specified RoomGameStatus message, length delimited. Does not implicitly {@link pb.RoomGameStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomGameStatus
         * @static
         * @param {pb.IRoomGameStatus} message RoomGameStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomGameStatus message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomGameStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomGameStatus} RoomGameStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomGameStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.status = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomGameStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomGameStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomGameStatus} RoomGameStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomGameStatus message.
         * @function verify
         * @memberof pb.RoomGameStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomGameStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            return null;
        };

        /**
         * Creates a RoomGameStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomGameStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomGameStatus} RoomGameStatus
         */
        RoomGameStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomGameStatus)
                return object;
            var message = new $root.pb.RoomGameStatus();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.status != null)
                message.status = object.status | 0;
            return message;
        };

        /**
         * Creates a plain object from a RoomGameStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomGameStatus
         * @static
         * @param {pb.RoomGameStatus} message RoomGameStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomGameStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.status = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            return object;
        };

        /**
         * Converts this RoomGameStatus to JSON.
         * @function toJSON
         * @memberof pb.RoomGameStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomGameStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomGameStatus;
    })();

    pb.RoomGameOp = (function () {

        /**
         * Properties of a RoomGameOp.
         * @memberof pb
         * @interface IRoomGameOp
         * @property {number|null} [id] RoomGameOp id
         * @property {number|null} [uid] RoomGameOp uid
         * @property {Uint8Array|null} [ops] RoomGameOp ops
         */

        /**
         * Constructs a new RoomGameOp.
         * @memberof pb
         * @classdesc Represents a RoomGameOp.
         * @implements IRoomGameOp
         * @constructor
         * @param {pb.IRoomGameOp=} [properties] Properties to set
         */
        function RoomGameOp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomGameOp id.
         * @member {number} id
         * @memberof pb.RoomGameOp
         * @instance
         */
        RoomGameOp.prototype.id = 0;

        /**
         * RoomGameOp uid.
         * @member {number} uid
         * @memberof pb.RoomGameOp
         * @instance
         */
        RoomGameOp.prototype.uid = 0;

        /**
         * RoomGameOp ops.
         * @member {Uint8Array} ops
         * @memberof pb.RoomGameOp
         * @instance
         */
        RoomGameOp.prototype.ops = $util.newBuffer([]);

        /**
         * Creates a new RoomGameOp instance using the specified properties.
         * @function create
         * @memberof pb.RoomGameOp
         * @static
         * @param {pb.IRoomGameOp=} [properties] Properties to set
         * @returns {pb.RoomGameOp} RoomGameOp instance
         */
        RoomGameOp.create = function create(properties) {
            return new RoomGameOp(properties);
        };

        /**
         * Encodes the specified RoomGameOp message. Does not implicitly {@link pb.RoomGameOp.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomGameOp
         * @static
         * @param {pb.IRoomGameOp} message RoomGameOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameOp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.ops != null && Object.hasOwnProperty.call(message, "ops"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ops);
            return writer;
        };

        /**
         * Encodes the specified RoomGameOp message, length delimited. Does not implicitly {@link pb.RoomGameOp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomGameOp
         * @static
         * @param {pb.IRoomGameOp} message RoomGameOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameOp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomGameOp message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomGameOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomGameOp} RoomGameOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameOp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomGameOp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.ops = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomGameOp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomGameOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomGameOp} RoomGameOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameOp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomGameOp message.
         * @function verify
         * @memberof pb.RoomGameOp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomGameOp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.ops != null && message.hasOwnProperty("ops"))
                if (!(message.ops && typeof message.ops.length === "number" || $util.isString(message.ops)))
                    return "ops: buffer expected";
            return null;
        };

        /**
         * Creates a RoomGameOp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomGameOp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomGameOp} RoomGameOp
         */
        RoomGameOp.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomGameOp)
                return object;
            var message = new $root.pb.RoomGameOp();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.ops != null)
                if (typeof object.ops === "string")
                    $util.base64.decode(object.ops, message.ops = $util.newBuffer($util.base64.length(object.ops)), 0);
                else if (object.ops.length)
                    message.ops = object.ops;
            return message;
        };

        /**
         * Creates a plain object from a RoomGameOp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomGameOp
         * @static
         * @param {pb.RoomGameOp} message RoomGameOp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomGameOp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.uid = 0;
                if (options.bytes === String)
                    object.ops = "";
                else {
                    object.ops = [];
                    if (options.bytes !== Array)
                        object.ops = $util.newBuffer(object.ops);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.ops != null && message.hasOwnProperty("ops"))
                object.ops = options.bytes === String ? $util.base64.encode(message.ops, 0, message.ops.length) : options.bytes === Array ? Array.prototype.slice.call(message.ops) : message.ops;
            return object;
        };

        /**
         * Converts this RoomGameOp to JSON.
         * @function toJSON
         * @memberof pb.RoomGameOp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomGameOp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomGameOp;
    })();

    pb.RoomGameResult = (function () {

        /**
         * Properties of a RoomGameResult.
         * @memberof pb
         * @interface IRoomGameResult
         * @property {number|null} [id] RoomGameResult id
         * @property {Uint8Array|null} [result] RoomGameResult result
         */

        /**
         * Constructs a new RoomGameResult.
         * @memberof pb
         * @classdesc Represents a RoomGameResult.
         * @implements IRoomGameResult
         * @constructor
         * @param {pb.IRoomGameResult=} [properties] Properties to set
         */
        function RoomGameResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomGameResult id.
         * @member {number} id
         * @memberof pb.RoomGameResult
         * @instance
         */
        RoomGameResult.prototype.id = 0;

        /**
         * RoomGameResult result.
         * @member {Uint8Array} result
         * @memberof pb.RoomGameResult
         * @instance
         */
        RoomGameResult.prototype.result = $util.newBuffer([]);

        /**
         * Creates a new RoomGameResult instance using the specified properties.
         * @function create
         * @memberof pb.RoomGameResult
         * @static
         * @param {pb.IRoomGameResult=} [properties] Properties to set
         * @returns {pb.RoomGameResult} RoomGameResult instance
         */
        RoomGameResult.create = function create(properties) {
            return new RoomGameResult(properties);
        };

        /**
         * Encodes the specified RoomGameResult message. Does not implicitly {@link pb.RoomGameResult.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomGameResult
         * @static
         * @param {pb.IRoomGameResult} message RoomGameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.result);
            return writer;
        };

        /**
         * Encodes the specified RoomGameResult message, length delimited. Does not implicitly {@link pb.RoomGameResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomGameResult
         * @static
         * @param {pb.IRoomGameResult} message RoomGameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomGameResult message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomGameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomGameResult} RoomGameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomGameResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.result = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomGameResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomGameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomGameResult} RoomGameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomGameResult message.
         * @function verify
         * @memberof pb.RoomGameResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomGameResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                    return "result: buffer expected";
            return null;
        };

        /**
         * Creates a RoomGameResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomGameResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomGameResult} RoomGameResult
         */
        RoomGameResult.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomGameResult)
                return object;
            var message = new $root.pb.RoomGameResult();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.result != null)
                if (typeof object.result === "string")
                    $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                else if (object.result.length)
                    message.result = object.result;
            return message;
        };

        /**
         * Creates a plain object from a RoomGameResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomGameResult
         * @static
         * @param {pb.RoomGameResult} message RoomGameResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomGameResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                if (options.bytes === String)
                    object.result = "";
                else {
                    object.result = [];
                    if (options.bytes !== Array)
                        object.result = $util.newBuffer(object.result);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
            return object;
        };

        /**
         * Converts this RoomGameResult to JSON.
         * @function toJSON
         * @memberof pb.RoomGameResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomGameResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomGameResult;
    })();

    pb.RoomData = (function () {

        /**
         * Properties of a RoomData.
         * @memberof pb
         * @interface IRoomData
         * @property {number|null} [id] RoomData id
         * @property {pb.GameType|null} [game] RoomData game
         * @property {Uint8Array|null} [data] RoomData data
         * @property {number|null} [auto] RoomData auto
         * @property {number|null} [creator] RoomData creator
         */

        /**
         * Constructs a new RoomData.
         * @memberof pb
         * @classdesc Represents a RoomData.
         * @implements IRoomData
         * @constructor
         * @param {pb.IRoomData=} [properties] Properties to set
         */
        function RoomData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomData id.
         * @member {number} id
         * @memberof pb.RoomData
         * @instance
         */
        RoomData.prototype.id = 0;

        /**
         * RoomData game.
         * @member {pb.GameType} game
         * @memberof pb.RoomData
         * @instance
         */
        RoomData.prototype.game = 0;

        /**
         * RoomData data.
         * @member {Uint8Array} data
         * @memberof pb.RoomData
         * @instance
         */
        RoomData.prototype.data = $util.newBuffer([]);

        /**
         * RoomData auto.
         * @member {number} auto
         * @memberof pb.RoomData
         * @instance
         */
        RoomData.prototype.auto = 0;

        /**
         * RoomData creator.
         * @member {number} creator
         * @memberof pb.RoomData
         * @instance
         */
        RoomData.prototype.creator = 0;

        /**
         * Creates a new RoomData instance using the specified properties.
         * @function create
         * @memberof pb.RoomData
         * @static
         * @param {pb.IRoomData=} [properties] Properties to set
         * @returns {pb.RoomData} RoomData instance
         */
        RoomData.create = function create(properties) {
            return new RoomData(properties);
        };

        /**
         * Encodes the specified RoomData message. Does not implicitly {@link pb.RoomData.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomData
         * @static
         * @param {pb.IRoomData} message RoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.game);
            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
            if (message.auto != null && Object.hasOwnProperty.call(message, "auto"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.auto);
            if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.creator);
            return writer;
        };

        /**
         * Encodes the specified RoomData message, length delimited. Does not implicitly {@link pb.RoomData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomData
         * @static
         * @param {pb.IRoomData} message RoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomData message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomData} RoomData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.game = reader.int32();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    case 4:
                        message.auto = reader.int32();
                        break;
                    case 5:
                        message.creator = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomData} RoomData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomData message.
         * @function verify
         * @memberof pb.RoomData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.data != null && message.hasOwnProperty("data"))
                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                    return "data: buffer expected";
            if (message.auto != null && message.hasOwnProperty("auto"))
                if (!$util.isInteger(message.auto))
                    return "auto: integer expected";
            if (message.creator != null && message.hasOwnProperty("creator"))
                if (!$util.isInteger(message.creator))
                    return "creator: integer expected";
            return null;
        };

        /**
         * Creates a RoomData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomData} RoomData
         */
        RoomData.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomData)
                return object;
            var message = new $root.pb.RoomData();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.data != null)
                if (typeof object.data === "string")
                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                else if (object.data.length)
                    message.data = object.data;
            if (object.auto != null)
                message.auto = object.auto | 0;
            if (object.creator != null)
                message.creator = object.creator | 0;
            return message;
        };

        /**
         * Creates a plain object from a RoomData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomData
         * @static
         * @param {pb.RoomData} message RoomData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                if (options.bytes === String)
                    object.data = "";
                else {
                    object.data = [];
                    if (options.bytes !== Array)
                        object.data = $util.newBuffer(object.data);
                }
                object.auto = 0;
                object.creator = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
            if (message.auto != null && message.hasOwnProperty("auto"))
                object.auto = message.auto;
            if (message.creator != null && message.hasOwnProperty("creator"))
                object.creator = message.creator;
            return object;
        };

        /**
         * Converts this RoomData to JSON.
         * @function toJSON
         * @memberof pb.RoomData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomData;
    })();

    pb.RoomPlayer = (function () {

        /**
         * Properties of a RoomPlayer.
         * @memberof pb
         * @interface IRoomPlayer
         * @property {pb.IGameData|null} [gd] RoomPlayer gd
         * @property {boolean|null} [ready] RoomPlayer ready
         * @property {boolean|null} [giveup] RoomPlayer giveup
         * @property {pb.IGameOperations|null} [ops] RoomPlayer ops
         * @property {pb.IGameResult|null} [result] RoomPlayer result
         * @property {number|Long|null} [curPos] RoomPlayer curPos
         * @property {Array.<number>|null} [junXian] RoomPlayer junXian
         */

        /**
         * Constructs a new RoomPlayer.
         * @memberof pb
         * @classdesc Represents a RoomPlayer.
         * @implements IRoomPlayer
         * @constructor
         * @param {pb.IRoomPlayer=} [properties] Properties to set
         */
        function RoomPlayer(properties) {
            this.junXian = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomPlayer gd.
         * @member {pb.IGameData|null|undefined} gd
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.gd = null;

        /**
         * RoomPlayer ready.
         * @member {boolean} ready
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.ready = false;

        /**
         * RoomPlayer giveup.
         * @member {boolean} giveup
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.giveup = false;

        /**
         * RoomPlayer ops.
         * @member {pb.IGameOperations|null|undefined} ops
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.ops = null;

        /**
         * RoomPlayer result.
         * @member {pb.IGameResult|null|undefined} result
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.result = null;

        /**
         * RoomPlayer curPos.
         * @member {number|Long} curPos
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.curPos = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomPlayer junXian.
         * @member {Array.<number>} junXian
         * @memberof pb.RoomPlayer
         * @instance
         */
        RoomPlayer.prototype.junXian = $util.emptyArray;

        /**
         * Creates a new RoomPlayer instance using the specified properties.
         * @function create
         * @memberof pb.RoomPlayer
         * @static
         * @param {pb.IRoomPlayer=} [properties] Properties to set
         * @returns {pb.RoomPlayer} RoomPlayer instance
         */
        RoomPlayer.create = function create(properties) {
            return new RoomPlayer(properties);
        };

        /**
         * Encodes the specified RoomPlayer message. Does not implicitly {@link pb.RoomPlayer.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomPlayer
         * @static
         * @param {pb.IRoomPlayer} message RoomPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomPlayer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gd != null && Object.hasOwnProperty.call(message, "gd"))
                $root.pb.GameData.encode(message.gd, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ready != null && Object.hasOwnProperty.call(message, "ready"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ready);
            if (message.giveup != null && Object.hasOwnProperty.call(message, "giveup"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.giveup);
            if (message.ops != null && Object.hasOwnProperty.call(message, "ops"))
                $root.pb.GameOperations.encode(message.ops, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.GameResult.encode(message.result, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.curPos != null && Object.hasOwnProperty.call(message, "curPos"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.curPos);
            if (message.junXian != null && message.junXian.length) {
                writer.uint32(/* id 7, wireType 2 =*/58).fork();
                for (var i = 0; i < message.junXian.length; ++i)
                    writer.int32(message.junXian[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified RoomPlayer message, length delimited. Does not implicitly {@link pb.RoomPlayer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomPlayer
         * @static
         * @param {pb.IRoomPlayer} message RoomPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomPlayer} RoomPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomPlayer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomPlayer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.gd = $root.pb.GameData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.ready = reader.bool();
                        break;
                    case 3:
                        message.giveup = reader.bool();
                        break;
                    case 4:
                        message.ops = $root.pb.GameOperations.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.result = $root.pb.GameResult.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.curPos = reader.int64();
                        break;
                    case 7:
                        if (!(message.junXian && message.junXian.length))
                            message.junXian = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.junXian.push(reader.int32());
                        } else
                            message.junXian.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomPlayer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomPlayer} RoomPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomPlayer message.
         * @function verify
         * @memberof pb.RoomPlayer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomPlayer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gd != null && message.hasOwnProperty("gd")) {
                var error = $root.pb.GameData.verify(message.gd);
                if (error)
                    return "gd." + error;
            }
            if (message.ready != null && message.hasOwnProperty("ready"))
                if (typeof message.ready !== "boolean")
                    return "ready: boolean expected";
            if (message.giveup != null && message.hasOwnProperty("giveup"))
                if (typeof message.giveup !== "boolean")
                    return "giveup: boolean expected";
            if (message.ops != null && message.hasOwnProperty("ops")) {
                var error = $root.pb.GameOperations.verify(message.ops);
                if (error)
                    return "ops." + error;
            }
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.GameResult.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.curPos != null && message.hasOwnProperty("curPos"))
                if (!$util.isInteger(message.curPos) && !(message.curPos && $util.isInteger(message.curPos.low) && $util.isInteger(message.curPos.high)))
                    return "curPos: integer|Long expected";
            if (message.junXian != null && message.hasOwnProperty("junXian")) {
                if (!Array.isArray(message.junXian))
                    return "junXian: array expected";
                for (var i = 0; i < message.junXian.length; ++i)
                    if (!$util.isInteger(message.junXian[i]))
                        return "junXian: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a RoomPlayer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomPlayer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomPlayer} RoomPlayer
         */
        RoomPlayer.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomPlayer)
                return object;
            var message = new $root.pb.RoomPlayer();
            if (object.gd != null) {
                if (typeof object.gd !== "object")
                    throw TypeError(".pb.RoomPlayer.gd: object expected");
                message.gd = $root.pb.GameData.fromObject(object.gd);
            }
            if (object.ready != null)
                message.ready = Boolean(object.ready);
            if (object.giveup != null)
                message.giveup = Boolean(object.giveup);
            if (object.ops != null) {
                if (typeof object.ops !== "object")
                    throw TypeError(".pb.RoomPlayer.ops: object expected");
                message.ops = $root.pb.GameOperations.fromObject(object.ops);
            }
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.RoomPlayer.result: object expected");
                message.result = $root.pb.GameResult.fromObject(object.result);
            }
            if (object.curPos != null)
                if ($util.Long)
                    (message.curPos = $util.Long.fromValue(object.curPos)).unsigned = false;
                else if (typeof object.curPos === "string")
                    message.curPos = parseInt(object.curPos, 10);
                else if (typeof object.curPos === "number")
                    message.curPos = object.curPos;
                else if (typeof object.curPos === "object")
                    message.curPos = new $util.LongBits(object.curPos.low >>> 0, object.curPos.high >>> 0).toNumber();
            if (object.junXian) {
                if (!Array.isArray(object.junXian))
                    throw TypeError(".pb.RoomPlayer.junXian: array expected");
                message.junXian = [];
                for (var i = 0; i < object.junXian.length; ++i)
                    message.junXian[i] = object.junXian[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a RoomPlayer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomPlayer
         * @static
         * @param {pb.RoomPlayer} message RoomPlayer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomPlayer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.junXian = [];
            if (options.defaults) {
                object.gd = null;
                object.ready = false;
                object.giveup = false;
                object.ops = null;
                object.result = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.curPos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.curPos = options.longs === String ? "0" : 0;
            }
            if (message.gd != null && message.hasOwnProperty("gd"))
                object.gd = $root.pb.GameData.toObject(message.gd, options);
            if (message.ready != null && message.hasOwnProperty("ready"))
                object.ready = message.ready;
            if (message.giveup != null && message.hasOwnProperty("giveup"))
                object.giveup = message.giveup;
            if (message.ops != null && message.hasOwnProperty("ops"))
                object.ops = $root.pb.GameOperations.toObject(message.ops, options);
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.GameResult.toObject(message.result, options);
            if (message.curPos != null && message.hasOwnProperty("curPos"))
                if (typeof message.curPos === "number")
                    object.curPos = options.longs === String ? String(message.curPos) : message.curPos;
                else
                    object.curPos = options.longs === String ? $util.Long.prototype.toString.call(message.curPos) : options.longs === Number ? new $util.LongBits(message.curPos.low >>> 0, message.curPos.high >>> 0).toNumber() : message.curPos;
            if (message.junXian && message.junXian.length) {
                object.junXian = [];
                for (var j = 0; j < message.junXian.length; ++j)
                    object.junXian[j] = message.junXian[j];
            }
            return object;
        };

        /**
         * Converts this RoomPlayer to JSON.
         * @function toJSON
         * @memberof pb.RoomPlayer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomPlayer;
    })();

    pb.RoomGameData = (function () {

        /**
         * Properties of a RoomGameData.
         * @memberof pb
         * @interface IRoomGameData
         * @property {number|null} [id] RoomGameData id
         * @property {pb.GameType|null} [game] RoomGameData game
         * @property {number|null} [status] RoomGameData status
         * @property {number|null} [capital] RoomGameData capital
         * @property {number|null} [code] RoomGameData code
         * @property {pb.KType|null} [ktype] RoomGameData ktype
         * @property {number|Long|null} [tsQuoteFrom] RoomGameData tsQuoteFrom
         * @property {number|Long|null} [tsQuoteTo] RoomGameData tsQuoteTo
         * @property {number|Long|null} [tsQuoteStart] RoomGameData tsQuoteStart
         * @property {Array.<pb.IRoomPlayer>|null} [players] RoomGameData players
         * @property {number|Long|null} [tsGameFrom] RoomGameData tsGameFrom
         * @property {number|Long|null} [tsGameCur] RoomGameData tsGameCur
         * @property {pb.IQuotes|null} [quotes] RoomGameData quotes
         * @property {pb.IQuotesFuture|null} [quotesFuture] RoomGameData quotesFuture
         */

        /**
         * Constructs a new RoomGameData.
         * @memberof pb
         * @classdesc Represents a RoomGameData.
         * @implements IRoomGameData
         * @constructor
         * @param {pb.IRoomGameData=} [properties] Properties to set
         */
        function RoomGameData(properties) {
            this.players = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomGameData id.
         * @member {number} id
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.id = 0;

        /**
         * RoomGameData game.
         * @member {pb.GameType} game
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.game = 0;

        /**
         * RoomGameData status.
         * @member {number} status
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.status = 0;

        /**
         * RoomGameData capital.
         * @member {number} capital
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.capital = 0;

        /**
         * RoomGameData code.
         * @member {number} code
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.code = 0;

        /**
         * RoomGameData ktype.
         * @member {pb.KType} ktype
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.ktype = 0;

        /**
         * RoomGameData tsQuoteFrom.
         * @member {number|Long} tsQuoteFrom
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.tsQuoteFrom = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomGameData tsQuoteTo.
         * @member {number|Long} tsQuoteTo
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.tsQuoteTo = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomGameData tsQuoteStart.
         * @member {number|Long} tsQuoteStart
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.tsQuoteStart = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomGameData players.
         * @member {Array.<pb.IRoomPlayer>} players
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.players = $util.emptyArray;

        /**
         * RoomGameData tsGameFrom.
         * @member {number|Long} tsGameFrom
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.tsGameFrom = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomGameData tsGameCur.
         * @member {number|Long} tsGameCur
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.tsGameCur = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RoomGameData quotes.
         * @member {pb.IQuotes|null|undefined} quotes
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.quotes = null;

        /**
         * RoomGameData quotesFuture.
         * @member {pb.IQuotesFuture|null|undefined} quotesFuture
         * @memberof pb.RoomGameData
         * @instance
         */
        RoomGameData.prototype.quotesFuture = null;

        /**
         * Creates a new RoomGameData instance using the specified properties.
         * @function create
         * @memberof pb.RoomGameData
         * @static
         * @param {pb.IRoomGameData=} [properties] Properties to set
         * @returns {pb.RoomGameData} RoomGameData instance
         */
        RoomGameData.create = function create(properties) {
            return new RoomGameData(properties);
        };

        /**
         * Encodes the specified RoomGameData message. Does not implicitly {@link pb.RoomGameData.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomGameData
         * @static
         * @param {pb.IRoomGameData} message RoomGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.game);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.status);
            if (message.capital != null && Object.hasOwnProperty.call(message, "capital"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.capital);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.code);
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.ktype);
            if (message.tsQuoteFrom != null && Object.hasOwnProperty.call(message, "tsQuoteFrom"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.tsQuoteFrom);
            if (message.tsQuoteTo != null && Object.hasOwnProperty.call(message, "tsQuoteTo"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.tsQuoteTo);
            if (message.tsQuoteStart != null && Object.hasOwnProperty.call(message, "tsQuoteStart"))
                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.tsQuoteStart);
            if (message.players != null && message.players.length)
                for (var i = 0; i < message.players.length; ++i)
                    $root.pb.RoomPlayer.encode(message.players[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.tsGameFrom != null && Object.hasOwnProperty.call(message, "tsGameFrom"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.tsGameFrom);
            if (message.tsGameCur != null && Object.hasOwnProperty.call(message, "tsGameCur"))
                writer.uint32(/* id 12, wireType 0 =*/96).int64(message.tsGameCur);
            if (message.quotes != null && Object.hasOwnProperty.call(message, "quotes"))
                $root.pb.Quotes.encode(message.quotes, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.quotesFuture != null && Object.hasOwnProperty.call(message, "quotesFuture"))
                $root.pb.QuotesFuture.encode(message.quotesFuture, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RoomGameData message, length delimited. Does not implicitly {@link pb.RoomGameData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomGameData
         * @static
         * @param {pb.IRoomGameData} message RoomGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomGameData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomGameData message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomGameData} RoomGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomGameData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.game = reader.int32();
                        break;
                    case 3:
                        message.status = reader.int32();
                        break;
                    case 4:
                        message.capital = reader.int32();
                        break;
                    case 5:
                        message.code = reader.int32();
                        break;
                    case 6:
                        message.ktype = reader.int32();
                        break;
                    case 7:
                        message.tsQuoteFrom = reader.int64();
                        break;
                    case 8:
                        message.tsQuoteTo = reader.int64();
                        break;
                    case 9:
                        message.tsQuoteStart = reader.int64();
                        break;
                    case 10:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.RoomPlayer.decode(reader, reader.uint32()));
                        break;
                    case 11:
                        message.tsGameFrom = reader.int64();
                        break;
                    case 12:
                        message.tsGameCur = reader.int64();
                        break;
                    case 13:
                        message.quotes = $root.pb.Quotes.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.quotesFuture = $root.pb.QuotesFuture.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomGameData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomGameData} RoomGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomGameData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomGameData message.
         * @function verify
         * @memberof pb.RoomGameData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomGameData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            if (message.capital != null && message.hasOwnProperty("capital"))
                if (!$util.isInteger(message.capital))
                    return "capital: integer expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.tsQuoteFrom != null && message.hasOwnProperty("tsQuoteFrom"))
                if (!$util.isInteger(message.tsQuoteFrom) && !(message.tsQuoteFrom && $util.isInteger(message.tsQuoteFrom.low) && $util.isInteger(message.tsQuoteFrom.high)))
                    return "tsQuoteFrom: integer|Long expected";
            if (message.tsQuoteTo != null && message.hasOwnProperty("tsQuoteTo"))
                if (!$util.isInteger(message.tsQuoteTo) && !(message.tsQuoteTo && $util.isInteger(message.tsQuoteTo.low) && $util.isInteger(message.tsQuoteTo.high)))
                    return "tsQuoteTo: integer|Long expected";
            if (message.tsQuoteStart != null && message.hasOwnProperty("tsQuoteStart"))
                if (!$util.isInteger(message.tsQuoteStart) && !(message.tsQuoteStart && $util.isInteger(message.tsQuoteStart.low) && $util.isInteger(message.tsQuoteStart.high)))
                    return "tsQuoteStart: integer|Long expected";
            if (message.players != null && message.hasOwnProperty("players")) {
                if (!Array.isArray(message.players))
                    return "players: array expected";
                for (var i = 0; i < message.players.length; ++i) {
                    var error = $root.pb.RoomPlayer.verify(message.players[i]);
                    if (error)
                        return "players." + error;
                }
            }
            if (message.tsGameFrom != null && message.hasOwnProperty("tsGameFrom"))
                if (!$util.isInteger(message.tsGameFrom) && !(message.tsGameFrom && $util.isInteger(message.tsGameFrom.low) && $util.isInteger(message.tsGameFrom.high)))
                    return "tsGameFrom: integer|Long expected";
            if (message.tsGameCur != null && message.hasOwnProperty("tsGameCur"))
                if (!$util.isInteger(message.tsGameCur) && !(message.tsGameCur && $util.isInteger(message.tsGameCur.low) && $util.isInteger(message.tsGameCur.high)))
                    return "tsGameCur: integer|Long expected";
            if (message.quotes != null && message.hasOwnProperty("quotes")) {
                var error = $root.pb.Quotes.verify(message.quotes);
                if (error)
                    return "quotes." + error;
            }
            if (message.quotesFuture != null && message.hasOwnProperty("quotesFuture")) {
                var error = $root.pb.QuotesFuture.verify(message.quotesFuture);
                if (error)
                    return "quotesFuture." + error;
            }
            return null;
        };

        /**
         * Creates a RoomGameData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomGameData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomGameData} RoomGameData
         */
        RoomGameData.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomGameData)
                return object;
            var message = new $root.pb.RoomGameData();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.status != null)
                message.status = object.status | 0;
            if (object.capital != null)
                message.capital = object.capital | 0;
            if (object.code != null)
                message.code = object.code | 0;
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.tsQuoteFrom != null)
                if ($util.Long)
                    (message.tsQuoteFrom = $util.Long.fromValue(object.tsQuoteFrom)).unsigned = false;
                else if (typeof object.tsQuoteFrom === "string")
                    message.tsQuoteFrom = parseInt(object.tsQuoteFrom, 10);
                else if (typeof object.tsQuoteFrom === "number")
                    message.tsQuoteFrom = object.tsQuoteFrom;
                else if (typeof object.tsQuoteFrom === "object")
                    message.tsQuoteFrom = new $util.LongBits(object.tsQuoteFrom.low >>> 0, object.tsQuoteFrom.high >>> 0).toNumber();
            if (object.tsQuoteTo != null)
                if ($util.Long)
                    (message.tsQuoteTo = $util.Long.fromValue(object.tsQuoteTo)).unsigned = false;
                else if (typeof object.tsQuoteTo === "string")
                    message.tsQuoteTo = parseInt(object.tsQuoteTo, 10);
                else if (typeof object.tsQuoteTo === "number")
                    message.tsQuoteTo = object.tsQuoteTo;
                else if (typeof object.tsQuoteTo === "object")
                    message.tsQuoteTo = new $util.LongBits(object.tsQuoteTo.low >>> 0, object.tsQuoteTo.high >>> 0).toNumber();
            if (object.tsQuoteStart != null)
                if ($util.Long)
                    (message.tsQuoteStart = $util.Long.fromValue(object.tsQuoteStart)).unsigned = false;
                else if (typeof object.tsQuoteStart === "string")
                    message.tsQuoteStart = parseInt(object.tsQuoteStart, 10);
                else if (typeof object.tsQuoteStart === "number")
                    message.tsQuoteStart = object.tsQuoteStart;
                else if (typeof object.tsQuoteStart === "object")
                    message.tsQuoteStart = new $util.LongBits(object.tsQuoteStart.low >>> 0, object.tsQuoteStart.high >>> 0).toNumber();
            if (object.players) {
                if (!Array.isArray(object.players))
                    throw TypeError(".pb.RoomGameData.players: array expected");
                message.players = [];
                for (var i = 0; i < object.players.length; ++i) {
                    if (typeof object.players[i] !== "object")
                        throw TypeError(".pb.RoomGameData.players: object expected");
                    message.players[i] = $root.pb.RoomPlayer.fromObject(object.players[i]);
                }
            }
            if (object.tsGameFrom != null)
                if ($util.Long)
                    (message.tsGameFrom = $util.Long.fromValue(object.tsGameFrom)).unsigned = false;
                else if (typeof object.tsGameFrom === "string")
                    message.tsGameFrom = parseInt(object.tsGameFrom, 10);
                else if (typeof object.tsGameFrom === "number")
                    message.tsGameFrom = object.tsGameFrom;
                else if (typeof object.tsGameFrom === "object")
                    message.tsGameFrom = new $util.LongBits(object.tsGameFrom.low >>> 0, object.tsGameFrom.high >>> 0).toNumber();
            if (object.tsGameCur != null)
                if ($util.Long)
                    (message.tsGameCur = $util.Long.fromValue(object.tsGameCur)).unsigned = false;
                else if (typeof object.tsGameCur === "string")
                    message.tsGameCur = parseInt(object.tsGameCur, 10);
                else if (typeof object.tsGameCur === "number")
                    message.tsGameCur = object.tsGameCur;
                else if (typeof object.tsGameCur === "object")
                    message.tsGameCur = new $util.LongBits(object.tsGameCur.low >>> 0, object.tsGameCur.high >>> 0).toNumber();
            if (object.quotes != null) {
                if (typeof object.quotes !== "object")
                    throw TypeError(".pb.RoomGameData.quotes: object expected");
                message.quotes = $root.pb.Quotes.fromObject(object.quotes);
            }
            if (object.quotesFuture != null) {
                if (typeof object.quotesFuture !== "object")
                    throw TypeError(".pb.RoomGameData.quotesFuture: object expected");
                message.quotesFuture = $root.pb.QuotesFuture.fromObject(object.quotesFuture);
            }
            return message;
        };

        /**
         * Creates a plain object from a RoomGameData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomGameData
         * @static
         * @param {pb.RoomGameData} message RoomGameData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomGameData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.players = [];
            if (options.defaults) {
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.status = 0;
                object.capital = 0;
                object.code = 0;
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteFrom = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteFrom = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteTo = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteTo = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteStart = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsGameFrom = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsGameFrom = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsGameCur = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsGameCur = options.longs === String ? "0" : 0;
                object.quotes = null;
                object.quotesFuture = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            if (message.capital != null && message.hasOwnProperty("capital"))
                object.capital = message.capital;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.tsQuoteFrom != null && message.hasOwnProperty("tsQuoteFrom"))
                if (typeof message.tsQuoteFrom === "number")
                    object.tsQuoteFrom = options.longs === String ? String(message.tsQuoteFrom) : message.tsQuoteFrom;
                else
                    object.tsQuoteFrom = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteFrom) : options.longs === Number ? new $util.LongBits(message.tsQuoteFrom.low >>> 0, message.tsQuoteFrom.high >>> 0).toNumber() : message.tsQuoteFrom;
            if (message.tsQuoteTo != null && message.hasOwnProperty("tsQuoteTo"))
                if (typeof message.tsQuoteTo === "number")
                    object.tsQuoteTo = options.longs === String ? String(message.tsQuoteTo) : message.tsQuoteTo;
                else
                    object.tsQuoteTo = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteTo) : options.longs === Number ? new $util.LongBits(message.tsQuoteTo.low >>> 0, message.tsQuoteTo.high >>> 0).toNumber() : message.tsQuoteTo;
            if (message.tsQuoteStart != null && message.hasOwnProperty("tsQuoteStart"))
                if (typeof message.tsQuoteStart === "number")
                    object.tsQuoteStart = options.longs === String ? String(message.tsQuoteStart) : message.tsQuoteStart;
                else
                    object.tsQuoteStart = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteStart) : options.longs === Number ? new $util.LongBits(message.tsQuoteStart.low >>> 0, message.tsQuoteStart.high >>> 0).toNumber() : message.tsQuoteStart;
            if (message.players && message.players.length) {
                object.players = [];
                for (var j = 0; j < message.players.length; ++j)
                    object.players[j] = $root.pb.RoomPlayer.toObject(message.players[j], options);
            }
            if (message.tsGameFrom != null && message.hasOwnProperty("tsGameFrom"))
                if (typeof message.tsGameFrom === "number")
                    object.tsGameFrom = options.longs === String ? String(message.tsGameFrom) : message.tsGameFrom;
                else
                    object.tsGameFrom = options.longs === String ? $util.Long.prototype.toString.call(message.tsGameFrom) : options.longs === Number ? new $util.LongBits(message.tsGameFrom.low >>> 0, message.tsGameFrom.high >>> 0).toNumber() : message.tsGameFrom;
            if (message.tsGameCur != null && message.hasOwnProperty("tsGameCur"))
                if (typeof message.tsGameCur === "number")
                    object.tsGameCur = options.longs === String ? String(message.tsGameCur) : message.tsGameCur;
                else
                    object.tsGameCur = options.longs === String ? $util.Long.prototype.toString.call(message.tsGameCur) : options.longs === Number ? new $util.LongBits(message.tsGameCur.low >>> 0, message.tsGameCur.high >>> 0).toNumber() : message.tsGameCur;
            if (message.quotes != null && message.hasOwnProperty("quotes"))
                object.quotes = $root.pb.Quotes.toObject(message.quotes, options);
            if (message.quotesFuture != null && message.hasOwnProperty("quotesFuture"))
                object.quotesFuture = $root.pb.QuotesFuture.toObject(message.quotesFuture, options);
            return object;
        };

        /**
         * Converts this RoomGameData to JSON.
         * @function toJSON
         * @memberof pb.RoomGameData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomGameData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomGameData;
    })();

    pb.Notice = (function () {

        /**
         * Properties of a Notice.
         * @memberof pb
         * @interface INotice
         * @property {number|null} [sender] Notice sender
         * @property {number|null} [receiver] Notice receiver
         * @property {pb.MessageType|null} [type] Notice type
         * @property {string|null} [text] Notice text
         * @property {number|Long|null} [ts] Notice ts
         * @property {number|null} [node] Notice node
         */

        /**
         * Constructs a new Notice.
         * @memberof pb
         * @classdesc Represents a Notice.
         * @implements INotice
         * @constructor
         * @param {pb.INotice=} [properties] Properties to set
         */
        function Notice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Notice sender.
         * @member {number} sender
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.sender = 0;

        /**
         * Notice receiver.
         * @member {number} receiver
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.receiver = 0;

        /**
         * Notice type.
         * @member {pb.MessageType} type
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.type = 0;

        /**
         * Notice text.
         * @member {string} text
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.text = "";

        /**
         * Notice ts.
         * @member {number|Long} ts
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Notice node.
         * @member {number} node
         * @memberof pb.Notice
         * @instance
         */
        Notice.prototype.node = 0;

        /**
         * Creates a new Notice instance using the specified properties.
         * @function create
         * @memberof pb.Notice
         * @static
         * @param {pb.INotice=} [properties] Properties to set
         * @returns {pb.Notice} Notice instance
         */
        Notice.create = function create(properties) {
            return new Notice(properties);
        };

        /**
         * Encodes the specified Notice message. Does not implicitly {@link pb.Notice.verify|verify} messages.
         * @function encode
         * @memberof pb.Notice
         * @static
         * @param {pb.INotice} message Notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Notice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sender);
            if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.receiver);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.ts);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.node);
            return writer;
        };

        /**
         * Encodes the specified Notice message, length delimited. Does not implicitly {@link pb.Notice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Notice
         * @static
         * @param {pb.INotice} message Notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Notice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Notice message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Notice} Notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Notice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Notice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.sender = reader.int32();
                        break;
                    case 2:
                        message.receiver = reader.int32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.text = reader.string();
                        break;
                    case 5:
                        message.ts = reader.int64();
                        break;
                    case 6:
                        message.node = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Notice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Notice} Notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Notice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Notice message.
         * @function verify
         * @memberof pb.Notice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Notice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sender != null && message.hasOwnProperty("sender"))
                if (!$util.isInteger(message.sender))
                    return "sender: integer expected";
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                if (!$util.isInteger(message.receiver))
                    return "receiver: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 9:
                    case 10:
                    case 11:
                        break;
                }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            return null;
        };

        /**
         * Creates a Notice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Notice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Notice} Notice
         */
        Notice.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Notice)
                return object;
            var message = new $root.pb.Notice();
            if (object.sender != null)
                message.sender = object.sender | 0;
            if (object.receiver != null)
                message.receiver = object.receiver | 0;
            switch (object.type) {
                case "MessageType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "SystemNotice":
                case 1:
                    message.type = 1;
                    break;
                case "Popup_Adv":
                case 2:
                    message.type = 2;
                    break;
                case "Chat":
                case 9:
                    message.type = 9;
                    break;
                case "RoomChat":
                case 10:
                    message.type = 10;
                    break;
                case "RoomInvite":
                case 11:
                    message.type = 11;
                    break;
            }
            if (object.text != null)
                message.text = String(object.text);
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.node != null)
                message.node = object.node | 0;
            return message;
        };

        /**
         * Creates a plain object from a Notice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Notice
         * @static
         * @param {pb.Notice} message Notice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Notice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sender = 0;
                object.receiver = 0;
                object.type = options.enums === String ? "MessageType_NULL" : 0;
                object.text = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.node = 0;
            }
            if (message.sender != null && message.hasOwnProperty("sender"))
                object.sender = message.sender;
            if (message.receiver != null && message.hasOwnProperty("receiver"))
                object.receiver = message.receiver;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.MessageType[message.type] : message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            return object;
        };

        /**
         * Converts this Notice to JSON.
         * @function toJSON
         * @memberof pb.Notice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Notice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Notice;
    })();

    pb.CgsConf = (function () {

        /**
         * Properties of a CgsConf.
         * @memberof pb
         * @interface ICgsConf
         * @property {number|null} [id] CgsConf id
         * @property {number|Long|null} [from] CgsConf from
         * @property {number|Long|null} [to] CgsConf to
         * @property {string|null} [conf] CgsConf conf
         * @property {string|null} [award] CgsConf award
         * @property {number|null} [status] CgsConf status
         * @property {Array.<number>|null} [people] CgsConf people
         */

        /**
         * Constructs a new CgsConf.
         * @memberof pb
         * @classdesc Represents a CgsConf.
         * @implements ICgsConf
         * @constructor
         * @param {pb.ICgsConf=} [properties] Properties to set
         */
        function CgsConf(properties) {
            this.people = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgsConf id.
         * @member {number} id
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.id = 0;

        /**
         * CgsConf from.
         * @member {number|Long} from
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgsConf to.
         * @member {number|Long} to
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgsConf conf.
         * @member {string} conf
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.conf = "";

        /**
         * CgsConf award.
         * @member {string} award
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.award = "";

        /**
         * CgsConf status.
         * @member {number} status
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.status = 0;

        /**
         * CgsConf people.
         * @member {Array.<number>} people
         * @memberof pb.CgsConf
         * @instance
         */
        CgsConf.prototype.people = $util.emptyArray;

        /**
         * Creates a new CgsConf instance using the specified properties.
         * @function create
         * @memberof pb.CgsConf
         * @static
         * @param {pb.ICgsConf=} [properties] Properties to set
         * @returns {pb.CgsConf} CgsConf instance
         */
        CgsConf.create = function create(properties) {
            return new CgsConf(properties);
        };

        /**
         * Encodes the specified CgsConf message. Does not implicitly {@link pb.CgsConf.verify|verify} messages.
         * @function encode
         * @memberof pb.CgsConf
         * @static
         * @param {pb.ICgsConf} message CgsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgsConf.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.to);
            if (message.conf != null && Object.hasOwnProperty.call(message, "conf"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.conf);
            if (message.award != null && Object.hasOwnProperty.call(message, "award"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.award);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.status);
            if (message.people != null && message.people.length) {
                writer.uint32(/* id 7, wireType 2 =*/58).fork();
                for (var i = 0; i < message.people.length; ++i)
                    writer.int32(message.people[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CgsConf message, length delimited. Does not implicitly {@link pb.CgsConf.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgsConf
         * @static
         * @param {pb.ICgsConf} message CgsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgsConf.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgsConf message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgsConf} CgsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgsConf.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgsConf();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.from = reader.int64();
                        break;
                    case 3:
                        message.to = reader.int64();
                        break;
                    case 4:
                        message.conf = reader.string();
                        break;
                    case 5:
                        message.award = reader.string();
                        break;
                    case 6:
                        message.status = reader.int32();
                        break;
                    case 7:
                        if (!(message.people && message.people.length))
                            message.people = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.people.push(reader.int32());
                        } else
                            message.people.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgsConf message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgsConf} CgsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgsConf.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgsConf message.
         * @function verify
         * @memberof pb.CgsConf
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgsConf.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.conf != null && message.hasOwnProperty("conf"))
                if (!$util.isString(message.conf))
                    return "conf: string expected";
            if (message.award != null && message.hasOwnProperty("award"))
                if (!$util.isString(message.award))
                    return "award: string expected";
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            if (message.people != null && message.hasOwnProperty("people")) {
                if (!Array.isArray(message.people))
                    return "people: array expected";
                for (var i = 0; i < message.people.length; ++i)
                    if (!$util.isInteger(message.people[i]))
                        return "people: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CgsConf message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgsConf
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgsConf} CgsConf
         */
        CgsConf.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgsConf)
                return object;
            var message = new $root.pb.CgsConf();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.conf != null)
                message.conf = String(object.conf);
            if (object.award != null)
                message.award = String(object.award);
            if (object.status != null)
                message.status = object.status | 0;
            if (object.people) {
                if (!Array.isArray(object.people))
                    throw TypeError(".pb.CgsConf.people: array expected");
                message.people = [];
                for (var i = 0; i < object.people.length; ++i)
                    message.people[i] = object.people[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CgsConf message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgsConf
         * @static
         * @param {pb.CgsConf} message CgsConf
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgsConf.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.people = [];
            if (options.defaults) {
                object.id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.conf = "";
                object.award = "";
                object.status = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.conf != null && message.hasOwnProperty("conf"))
                object.conf = message.conf;
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = message.award;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            if (message.people && message.people.length) {
                object.people = [];
                for (var j = 0; j < message.people.length; ++j)
                    object.people[j] = message.people[j];
            }
            return object;
        };

        /**
         * Converts this CgsConf to JSON.
         * @function toJSON
         * @memberof pb.CgsConf
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgsConf.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgsConf;
    })();

    pb.RankingItem = (function () {

        /**
         * Properties of a RankingItem.
         * @memberof pb
         * @interface IRankingItem
         * @property {number|null} [uid] RankingItem uid
         * @property {string|null} [nickname] RankingItem nickname
         * @property {string|null} [icon] RankingItem icon
         * @property {string|null} [gender] RankingItem gender
         * @property {string|null} [location] RankingItem location
         * @property {number|null} [cgsClearance] RankingItem cgsClearance
         * @property {number|null} [cgsNetwin] RankingItem cgsNetwin
         * @property {number|null} [cgsProgress] RankingItem cgsProgress
         * @property {number|null} [cgdsAccount] RankingItem cgdsAccount
         * @property {number|null} [zsjcCount] RankingItem zsjcCount
         * @property {number|null} [level] RankingItem level
         * @property {number|null} [fame] RankingItem fame
         * @property {number|null} [cgdsCapital] RankingItem cgdsCapital
         * @property {number|null} [zsjcBettingItem] RankingItem zsjcBettingItem
         * @property {number|null} [zsjcBettingAmount] RankingItem zsjcBettingAmount
         * @property {number|Long|null} [vipExpired] RankingItem vipExpired
         */

        /**
         * Constructs a new RankingItem.
         * @memberof pb
         * @classdesc Represents a RankingItem.
         * @implements IRankingItem
         * @constructor
         * @param {pb.IRankingItem=} [properties] Properties to set
         */
        function RankingItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RankingItem uid.
         * @member {number} uid
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.uid = 0;

        /**
         * RankingItem nickname.
         * @member {string} nickname
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.nickname = "";

        /**
         * RankingItem icon.
         * @member {string} icon
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.icon = "";

        /**
         * RankingItem gender.
         * @member {string} gender
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.gender = "";

        /**
         * RankingItem location.
         * @member {string} location
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.location = "";

        /**
         * RankingItem cgsClearance.
         * @member {number} cgsClearance
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.cgsClearance = 0;

        /**
         * RankingItem cgsNetwin.
         * @member {number} cgsNetwin
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.cgsNetwin = 0;

        /**
         * RankingItem cgsProgress.
         * @member {number} cgsProgress
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.cgsProgress = 0;

        /**
         * RankingItem cgdsAccount.
         * @member {number} cgdsAccount
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.cgdsAccount = 0;

        /**
         * RankingItem zsjcCount.
         * @member {number} zsjcCount
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.zsjcCount = 0;

        /**
         * RankingItem level.
         * @member {number} level
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.level = 0;

        /**
         * RankingItem fame.
         * @member {number} fame
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.fame = 0;

        /**
         * RankingItem cgdsCapital.
         * @member {number} cgdsCapital
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.cgdsCapital = 0;

        /**
         * RankingItem zsjcBettingItem.
         * @member {number} zsjcBettingItem
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.zsjcBettingItem = 0;

        /**
         * RankingItem zsjcBettingAmount.
         * @member {number} zsjcBettingAmount
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.zsjcBettingAmount = 0;

        /**
         * RankingItem vipExpired.
         * @member {number|Long} vipExpired
         * @memberof pb.RankingItem
         * @instance
         */
        RankingItem.prototype.vipExpired = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new RankingItem instance using the specified properties.
         * @function create
         * @memberof pb.RankingItem
         * @static
         * @param {pb.IRankingItem=} [properties] Properties to set
         * @returns {pb.RankingItem} RankingItem instance
         */
        RankingItem.create = function create(properties) {
            return new RankingItem(properties);
        };

        /**
         * Encodes the specified RankingItem message. Does not implicitly {@link pb.RankingItem.verify|verify} messages.
         * @function encode
         * @memberof pb.RankingItem
         * @static
         * @param {pb.IRankingItem} message RankingItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.gender);
            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.location);
            if (message.cgsClearance != null && Object.hasOwnProperty.call(message, "cgsClearance"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cgsClearance);
            if (message.cgsNetwin != null && Object.hasOwnProperty.call(message, "cgsNetwin"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.cgsNetwin);
            if (message.cgsProgress != null && Object.hasOwnProperty.call(message, "cgsProgress"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.cgsProgress);
            if (message.cgdsAccount != null && Object.hasOwnProperty.call(message, "cgdsAccount"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.cgdsAccount);
            if (message.zsjcCount != null && Object.hasOwnProperty.call(message, "zsjcCount"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.zsjcCount);
            if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.level);
            if (message.fame != null && Object.hasOwnProperty.call(message, "fame"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.fame);
            if (message.cgdsCapital != null && Object.hasOwnProperty.call(message, "cgdsCapital"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.cgdsCapital);
            if (message.zsjcBettingItem != null && Object.hasOwnProperty.call(message, "zsjcBettingItem"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.zsjcBettingItem);
            if (message.zsjcBettingAmount != null && Object.hasOwnProperty.call(message, "zsjcBettingAmount"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.zsjcBettingAmount);
            if (message.vipExpired != null && Object.hasOwnProperty.call(message, "vipExpired"))
                writer.uint32(/* id 16, wireType 0 =*/128).int64(message.vipExpired);
            return writer;
        };

        /**
         * Encodes the specified RankingItem message, length delimited. Does not implicitly {@link pb.RankingItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RankingItem
         * @static
         * @param {pb.IRankingItem} message RankingItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RankingItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RankingItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RankingItem} RankingItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RankingItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.icon = reader.string();
                        break;
                    case 4:
                        message.gender = reader.string();
                        break;
                    case 5:
                        message.location = reader.string();
                        break;
                    case 6:
                        message.cgsClearance = reader.int32();
                        break;
                    case 7:
                        message.cgsNetwin = reader.int32();
                        break;
                    case 8:
                        message.cgsProgress = reader.int32();
                        break;
                    case 9:
                        message.cgdsAccount = reader.int32();
                        break;
                    case 10:
                        message.zsjcCount = reader.int32();
                        break;
                    case 11:
                        message.level = reader.int32();
                        break;
                    case 12:
                        message.fame = reader.int32();
                        break;
                    case 13:
                        message.cgdsCapital = reader.int32();
                        break;
                    case 14:
                        message.zsjcBettingItem = reader.int32();
                        break;
                    case 15:
                        message.zsjcBettingAmount = reader.int32();
                        break;
                    case 16:
                        message.vipExpired = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RankingItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RankingItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RankingItem} RankingItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RankingItem message.
         * @function verify
         * @memberof pb.RankingItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RankingItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (!$util.isString(message.gender))
                    return "gender: string expected";
            if (message.location != null && message.hasOwnProperty("location"))
                if (!$util.isString(message.location))
                    return "location: string expected";
            if (message.cgsClearance != null && message.hasOwnProperty("cgsClearance"))
                if (!$util.isInteger(message.cgsClearance))
                    return "cgsClearance: integer expected";
            if (message.cgsNetwin != null && message.hasOwnProperty("cgsNetwin"))
                if (!$util.isInteger(message.cgsNetwin))
                    return "cgsNetwin: integer expected";
            if (message.cgsProgress != null && message.hasOwnProperty("cgsProgress"))
                if (!$util.isInteger(message.cgsProgress))
                    return "cgsProgress: integer expected";
            if (message.cgdsAccount != null && message.hasOwnProperty("cgdsAccount"))
                if (!$util.isInteger(message.cgdsAccount))
                    return "cgdsAccount: integer expected";
            if (message.zsjcCount != null && message.hasOwnProperty("zsjcCount"))
                if (!$util.isInteger(message.zsjcCount))
                    return "zsjcCount: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.fame != null && message.hasOwnProperty("fame"))
                if (!$util.isInteger(message.fame))
                    return "fame: integer expected";
            if (message.cgdsCapital != null && message.hasOwnProperty("cgdsCapital"))
                if (!$util.isInteger(message.cgdsCapital))
                    return "cgdsCapital: integer expected";
            if (message.zsjcBettingItem != null && message.hasOwnProperty("zsjcBettingItem"))
                if (!$util.isInteger(message.zsjcBettingItem))
                    return "zsjcBettingItem: integer expected";
            if (message.zsjcBettingAmount != null && message.hasOwnProperty("zsjcBettingAmount"))
                if (!$util.isInteger(message.zsjcBettingAmount))
                    return "zsjcBettingAmount: integer expected";
            if (message.vipExpired != null && message.hasOwnProperty("vipExpired"))
                if (!$util.isInteger(message.vipExpired) && !(message.vipExpired && $util.isInteger(message.vipExpired.low) && $util.isInteger(message.vipExpired.high)))
                    return "vipExpired: integer|Long expected";
            return null;
        };

        /**
         * Creates a RankingItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RankingItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RankingItem} RankingItem
         */
        RankingItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RankingItem)
                return object;
            var message = new $root.pb.RankingItem();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.gender != null)
                message.gender = String(object.gender);
            if (object.location != null)
                message.location = String(object.location);
            if (object.cgsClearance != null)
                message.cgsClearance = object.cgsClearance | 0;
            if (object.cgsNetwin != null)
                message.cgsNetwin = object.cgsNetwin | 0;
            if (object.cgsProgress != null)
                message.cgsProgress = object.cgsProgress | 0;
            if (object.cgdsAccount != null)
                message.cgdsAccount = object.cgdsAccount | 0;
            if (object.zsjcCount != null)
                message.zsjcCount = object.zsjcCount | 0;
            if (object.level != null)
                message.level = object.level | 0;
            if (object.fame != null)
                message.fame = object.fame | 0;
            if (object.cgdsCapital != null)
                message.cgdsCapital = object.cgdsCapital | 0;
            if (object.zsjcBettingItem != null)
                message.zsjcBettingItem = object.zsjcBettingItem | 0;
            if (object.zsjcBettingAmount != null)
                message.zsjcBettingAmount = object.zsjcBettingAmount | 0;
            if (object.vipExpired != null)
                if ($util.Long)
                    (message.vipExpired = $util.Long.fromValue(object.vipExpired)).unsigned = false;
                else if (typeof object.vipExpired === "string")
                    message.vipExpired = parseInt(object.vipExpired, 10);
                else if (typeof object.vipExpired === "number")
                    message.vipExpired = object.vipExpired;
                else if (typeof object.vipExpired === "object")
                    message.vipExpired = new $util.LongBits(object.vipExpired.low >>> 0, object.vipExpired.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a RankingItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RankingItem
         * @static
         * @param {pb.RankingItem} message RankingItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RankingItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.nickname = "";
                object.icon = "";
                object.gender = "";
                object.location = "";
                object.cgsClearance = 0;
                object.cgsNetwin = 0;
                object.cgsProgress = 0;
                object.cgdsAccount = 0;
                object.zsjcCount = 0;
                object.level = 0;
                object.fame = 0;
                object.cgdsCapital = 0;
                object.zsjcBettingItem = 0;
                object.zsjcBettingAmount = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.vipExpired = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.vipExpired = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
            if (message.cgsClearance != null && message.hasOwnProperty("cgsClearance"))
                object.cgsClearance = message.cgsClearance;
            if (message.cgsNetwin != null && message.hasOwnProperty("cgsNetwin"))
                object.cgsNetwin = message.cgsNetwin;
            if (message.cgsProgress != null && message.hasOwnProperty("cgsProgress"))
                object.cgsProgress = message.cgsProgress;
            if (message.cgdsAccount != null && message.hasOwnProperty("cgdsAccount"))
                object.cgdsAccount = message.cgdsAccount;
            if (message.zsjcCount != null && message.hasOwnProperty("zsjcCount"))
                object.zsjcCount = message.zsjcCount;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.fame != null && message.hasOwnProperty("fame"))
                object.fame = message.fame;
            if (message.cgdsCapital != null && message.hasOwnProperty("cgdsCapital"))
                object.cgdsCapital = message.cgdsCapital;
            if (message.zsjcBettingItem != null && message.hasOwnProperty("zsjcBettingItem"))
                object.zsjcBettingItem = message.zsjcBettingItem;
            if (message.zsjcBettingAmount != null && message.hasOwnProperty("zsjcBettingAmount"))
                object.zsjcBettingAmount = message.zsjcBettingAmount;
            if (message.vipExpired != null && message.hasOwnProperty("vipExpired"))
                if (typeof message.vipExpired === "number")
                    object.vipExpired = options.longs === String ? String(message.vipExpired) : message.vipExpired;
                else
                    object.vipExpired = options.longs === String ? $util.Long.prototype.toString.call(message.vipExpired) : options.longs === Number ? new $util.LongBits(message.vipExpired.low >>> 0, message.vipExpired.high >>> 0).toNumber() : message.vipExpired;
            return object;
        };

        /**
         * Converts this RankingItem to JSON.
         * @function toJSON
         * @memberof pb.RankingItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RankingItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RankingItem;
    })();

    pb.RankingList = (function () {

        /**
         * Properties of a RankingList.
         * @memberof pb
         * @interface IRankingList
         * @property {number|null} [id] RankingList id
         * @property {Array.<pb.IRankingItem>|null} [Items] RankingList Items
         */

        /**
         * Constructs a new RankingList.
         * @memberof pb
         * @classdesc Represents a RankingList.
         * @implements IRankingList
         * @constructor
         * @param {pb.IRankingList=} [properties] Properties to set
         */
        function RankingList(properties) {
            this.Items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RankingList id.
         * @member {number} id
         * @memberof pb.RankingList
         * @instance
         */
        RankingList.prototype.id = 0;

        /**
         * RankingList Items.
         * @member {Array.<pb.IRankingItem>} Items
         * @memberof pb.RankingList
         * @instance
         */
        RankingList.prototype.Items = $util.emptyArray;

        /**
         * Creates a new RankingList instance using the specified properties.
         * @function create
         * @memberof pb.RankingList
         * @static
         * @param {pb.IRankingList=} [properties] Properties to set
         * @returns {pb.RankingList} RankingList instance
         */
        RankingList.create = function create(properties) {
            return new RankingList(properties);
        };

        /**
         * Encodes the specified RankingList message. Does not implicitly {@link pb.RankingList.verify|verify} messages.
         * @function encode
         * @memberof pb.RankingList
         * @static
         * @param {pb.IRankingList} message RankingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.Items != null && message.Items.length)
                for (var i = 0; i < message.Items.length; ++i)
                    $root.pb.RankingItem.encode(message.Items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RankingList message, length delimited. Does not implicitly {@link pb.RankingList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RankingList
         * @static
         * @param {pb.IRankingList} message RankingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RankingList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RankingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RankingList} RankingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RankingList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        if (!(message.Items && message.Items.length))
                            message.Items = [];
                        message.Items.push($root.pb.RankingItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RankingList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RankingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RankingList} RankingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RankingList message.
         * @function verify
         * @memberof pb.RankingList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RankingList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.Items != null && message.hasOwnProperty("Items")) {
                if (!Array.isArray(message.Items))
                    return "Items: array expected";
                for (var i = 0; i < message.Items.length; ++i) {
                    var error = $root.pb.RankingItem.verify(message.Items[i]);
                    if (error)
                        return "Items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RankingList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RankingList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RankingList} RankingList
         */
        RankingList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RankingList)
                return object;
            var message = new $root.pb.RankingList();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.Items) {
                if (!Array.isArray(object.Items))
                    throw TypeError(".pb.RankingList.Items: array expected");
                message.Items = [];
                for (var i = 0; i < object.Items.length; ++i) {
                    if (typeof object.Items[i] !== "object")
                        throw TypeError(".pb.RankingList.Items: object expected");
                    message.Items[i] = $root.pb.RankingItem.fromObject(object.Items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RankingList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RankingList
         * @static
         * @param {pb.RankingList} message RankingList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RankingList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Items = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.Items && message.Items.length) {
                object.Items = [];
                for (var j = 0; j < message.Items.length; ++j)
                    object.Items[j] = $root.pb.RankingItem.toObject(message.Items[j], options);
            }
            return object;
        };

        /**
         * Converts this RankingList to JSON.
         * @function toJSON
         * @memberof pb.RankingList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RankingList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RankingList;
    })();

    pb.CmdCgsRanking = (function () {

        /**
         * Properties of a CmdCgsRanking.
         * @memberof pb
         * @interface ICmdCgsRanking
         * @property {number|null} [id] CmdCgsRanking id
         * @property {number|null} [stage] CmdCgsRanking stage
         */

        /**
         * Constructs a new CmdCgsRanking.
         * @memberof pb
         * @classdesc Represents a CmdCgsRanking.
         * @implements ICmdCgsRanking
         * @constructor
         * @param {pb.ICmdCgsRanking=} [properties] Properties to set
         */
        function CmdCgsRanking(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgsRanking id.
         * @member {number} id
         * @memberof pb.CmdCgsRanking
         * @instance
         */
        CmdCgsRanking.prototype.id = 0;

        /**
         * CmdCgsRanking stage.
         * @member {number} stage
         * @memberof pb.CmdCgsRanking
         * @instance
         */
        CmdCgsRanking.prototype.stage = 0;

        /**
         * Creates a new CmdCgsRanking instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {pb.ICmdCgsRanking=} [properties] Properties to set
         * @returns {pb.CmdCgsRanking} CmdCgsRanking instance
         */
        CmdCgsRanking.create = function create(properties) {
            return new CmdCgsRanking(properties);
        };

        /**
         * Encodes the specified CmdCgsRanking message. Does not implicitly {@link pb.CmdCgsRanking.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {pb.ICmdCgsRanking} message CmdCgsRanking message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsRanking.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.stage != null && Object.hasOwnProperty.call(message, "stage"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stage);
            return writer;
        };

        /**
         * Encodes the specified CmdCgsRanking message, length delimited. Does not implicitly {@link pb.CmdCgsRanking.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {pb.ICmdCgsRanking} message CmdCgsRanking message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsRanking.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgsRanking message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgsRanking} CmdCgsRanking
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsRanking.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgsRanking();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.stage = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgsRanking message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgsRanking} CmdCgsRanking
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsRanking.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgsRanking message.
         * @function verify
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgsRanking.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            return null;
        };

        /**
         * Creates a CmdCgsRanking message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgsRanking} CmdCgsRanking
         */
        CmdCgsRanking.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgsRanking)
                return object;
            var message = new $root.pb.CmdCgsRanking();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.stage != null)
                message.stage = object.stage | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdCgsRanking message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgsRanking
         * @static
         * @param {pb.CmdCgsRanking} message CmdCgsRanking
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgsRanking.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.stage = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            return object;
        };

        /**
         * Converts this CmdCgsRanking to JSON.
         * @function toJSON
         * @memberof pb.CmdCgsRanking
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgsRanking.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgsRanking;
    })();

    pb.JjPlayer = (function () {

        /**
         * Properties of a JjPlayer.
         * @memberof pb
         * @interface IJjPlayer
         * @property {pb.IGameData|null} [gd] JjPlayer gd
         * @property {pb.IGameOperations|null} [ops] JjPlayer ops
         * @property {pb.IGameResult|null} [result] JjPlayer result
         */

        /**
         * Constructs a new JjPlayer.
         * @memberof pb
         * @classdesc Represents a JjPlayer.
         * @implements IJjPlayer
         * @constructor
         * @param {pb.IJjPlayer=} [properties] Properties to set
         */
        function JjPlayer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * JjPlayer gd.
         * @member {pb.IGameData|null|undefined} gd
         * @memberof pb.JjPlayer
         * @instance
         */
        JjPlayer.prototype.gd = null;

        /**
         * JjPlayer ops.
         * @member {pb.IGameOperations|null|undefined} ops
         * @memberof pb.JjPlayer
         * @instance
         */
        JjPlayer.prototype.ops = null;

        /**
         * JjPlayer result.
         * @member {pb.IGameResult|null|undefined} result
         * @memberof pb.JjPlayer
         * @instance
         */
        JjPlayer.prototype.result = null;

        /**
         * Creates a new JjPlayer instance using the specified properties.
         * @function create
         * @memberof pb.JjPlayer
         * @static
         * @param {pb.IJjPlayer=} [properties] Properties to set
         * @returns {pb.JjPlayer} JjPlayer instance
         */
        JjPlayer.create = function create(properties) {
            return new JjPlayer(properties);
        };

        /**
         * Encodes the specified JjPlayer message. Does not implicitly {@link pb.JjPlayer.verify|verify} messages.
         * @function encode
         * @memberof pb.JjPlayer
         * @static
         * @param {pb.IJjPlayer} message JjPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JjPlayer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gd != null && Object.hasOwnProperty.call(message, "gd"))
                $root.pb.GameData.encode(message.gd, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ops != null && Object.hasOwnProperty.call(message, "ops"))
                $root.pb.GameOperations.encode(message.ops, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.GameResult.encode(message.result, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified JjPlayer message, length delimited. Does not implicitly {@link pb.JjPlayer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.JjPlayer
         * @static
         * @param {pb.IJjPlayer} message JjPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JjPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a JjPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof pb.JjPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.JjPlayer} JjPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JjPlayer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.JjPlayer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.gd = $root.pb.GameData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.ops = $root.pb.GameOperations.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.result = $root.pb.GameResult.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a JjPlayer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.JjPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.JjPlayer} JjPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JjPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a JjPlayer message.
         * @function verify
         * @memberof pb.JjPlayer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        JjPlayer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gd != null && message.hasOwnProperty("gd")) {
                var error = $root.pb.GameData.verify(message.gd);
                if (error)
                    return "gd." + error;
            }
            if (message.ops != null && message.hasOwnProperty("ops")) {
                var error = $root.pb.GameOperations.verify(message.ops);
                if (error)
                    return "ops." + error;
            }
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.GameResult.verify(message.result);
                if (error)
                    return "result." + error;
            }
            return null;
        };

        /**
         * Creates a JjPlayer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.JjPlayer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.JjPlayer} JjPlayer
         */
        JjPlayer.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.JjPlayer)
                return object;
            var message = new $root.pb.JjPlayer();
            if (object.gd != null) {
                if (typeof object.gd !== "object")
                    throw TypeError(".pb.JjPlayer.gd: object expected");
                message.gd = $root.pb.GameData.fromObject(object.gd);
            }
            if (object.ops != null) {
                if (typeof object.ops !== "object")
                    throw TypeError(".pb.JjPlayer.ops: object expected");
                message.ops = $root.pb.GameOperations.fromObject(object.ops);
            }
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.JjPlayer.result: object expected");
                message.result = $root.pb.GameResult.fromObject(object.result);
            }
            return message;
        };

        /**
         * Creates a plain object from a JjPlayer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.JjPlayer
         * @static
         * @param {pb.JjPlayer} message JjPlayer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        JjPlayer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gd = null;
                object.ops = null;
                object.result = null;
            }
            if (message.gd != null && message.hasOwnProperty("gd"))
                object.gd = $root.pb.GameData.toObject(message.gd, options);
            if (message.ops != null && message.hasOwnProperty("ops"))
                object.ops = $root.pb.GameOperations.toObject(message.ops, options);
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.GameResult.toObject(message.result, options);
            return object;
        };

        /**
         * Converts this JjPlayer to JSON.
         * @function toJSON
         * @memberof pb.JjPlayer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        JjPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return JjPlayer;
    })();

    pb.JjGame = (function () {

        /**
         * Properties of a JjGame.
         * @memberof pb
         * @interface IJjGame
         * @property {number|null} [code] JjGame code
         * @property {pb.KType|null} [ktype] JjGame ktype
         * @property {number|Long|null} [tsQuoteFrom] JjGame tsQuoteFrom
         * @property {number|Long|null} [tsQuoteTo] JjGame tsQuoteTo
         * @property {number|Long|null} [tsQuoteStart] JjGame tsQuoteStart
         * @property {pb.IQuotes|null} [quotes] JjGame quotes
         * @property {pb.IQuotesFuture|null} [quotesFuture] JjGame quotesFuture
         * @property {Array.<pb.IJjPlayer>|null} [players] JjGame players
         * @property {number|null} [capital] JjGame capital
         */

        /**
         * Constructs a new JjGame.
         * @memberof pb
         * @classdesc Represents a JjGame.
         * @implements IJjGame
         * @constructor
         * @param {pb.IJjGame=} [properties] Properties to set
         */
        function JjGame(properties) {
            this.players = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * JjGame code.
         * @member {number} code
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.code = 0;

        /**
         * JjGame ktype.
         * @member {pb.KType} ktype
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.ktype = 0;

        /**
         * JjGame tsQuoteFrom.
         * @member {number|Long} tsQuoteFrom
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.tsQuoteFrom = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * JjGame tsQuoteTo.
         * @member {number|Long} tsQuoteTo
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.tsQuoteTo = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * JjGame tsQuoteStart.
         * @member {number|Long} tsQuoteStart
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.tsQuoteStart = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * JjGame quotes.
         * @member {pb.IQuotes|null|undefined} quotes
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.quotes = null;

        /**
         * JjGame quotesFuture.
         * @member {pb.IQuotesFuture|null|undefined} quotesFuture
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.quotesFuture = null;

        /**
         * JjGame players.
         * @member {Array.<pb.IJjPlayer>} players
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.players = $util.emptyArray;

        /**
         * JjGame capital.
         * @member {number} capital
         * @memberof pb.JjGame
         * @instance
         */
        JjGame.prototype.capital = 0;

        /**
         * Creates a new JjGame instance using the specified properties.
         * @function create
         * @memberof pb.JjGame
         * @static
         * @param {pb.IJjGame=} [properties] Properties to set
         * @returns {pb.JjGame} JjGame instance
         */
        JjGame.create = function create(properties) {
            return new JjGame(properties);
        };

        /**
         * Encodes the specified JjGame message. Does not implicitly {@link pb.JjGame.verify|verify} messages.
         * @function encode
         * @memberof pb.JjGame
         * @static
         * @param {pb.IJjGame} message JjGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JjGame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ktype);
            if (message.tsQuoteFrom != null && Object.hasOwnProperty.call(message, "tsQuoteFrom"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.tsQuoteFrom);
            if (message.tsQuoteTo != null && Object.hasOwnProperty.call(message, "tsQuoteTo"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.tsQuoteTo);
            if (message.tsQuoteStart != null && Object.hasOwnProperty.call(message, "tsQuoteStart"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.tsQuoteStart);
            if (message.quotes != null && Object.hasOwnProperty.call(message, "quotes"))
                $root.pb.Quotes.encode(message.quotes, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.quotesFuture != null && Object.hasOwnProperty.call(message, "quotesFuture"))
                $root.pb.QuotesFuture.encode(message.quotesFuture, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.players != null && message.players.length)
                for (var i = 0; i < message.players.length; ++i)
                    $root.pb.JjPlayer.encode(message.players[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.capital != null && Object.hasOwnProperty.call(message, "capital"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.capital);
            return writer;
        };

        /**
         * Encodes the specified JjGame message, length delimited. Does not implicitly {@link pb.JjGame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.JjGame
         * @static
         * @param {pb.IJjGame} message JjGame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JjGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a JjGame message from the specified reader or buffer.
         * @function decode
         * @memberof pb.JjGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.JjGame} JjGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JjGame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.JjGame();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.ktype = reader.int32();
                        break;
                    case 3:
                        message.tsQuoteFrom = reader.int64();
                        break;
                    case 4:
                        message.tsQuoteTo = reader.int64();
                        break;
                    case 5:
                        message.tsQuoteStart = reader.int64();
                        break;
                    case 6:
                        message.quotes = $root.pb.Quotes.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.quotesFuture = $root.pb.QuotesFuture.decode(reader, reader.uint32());
                        break;
                    case 8:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.JjPlayer.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        message.capital = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a JjGame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.JjGame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.JjGame} JjGame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JjGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a JjGame message.
         * @function verify
         * @memberof pb.JjGame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        JjGame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.tsQuoteFrom != null && message.hasOwnProperty("tsQuoteFrom"))
                if (!$util.isInteger(message.tsQuoteFrom) && !(message.tsQuoteFrom && $util.isInteger(message.tsQuoteFrom.low) && $util.isInteger(message.tsQuoteFrom.high)))
                    return "tsQuoteFrom: integer|Long expected";
            if (message.tsQuoteTo != null && message.hasOwnProperty("tsQuoteTo"))
                if (!$util.isInteger(message.tsQuoteTo) && !(message.tsQuoteTo && $util.isInteger(message.tsQuoteTo.low) && $util.isInteger(message.tsQuoteTo.high)))
                    return "tsQuoteTo: integer|Long expected";
            if (message.tsQuoteStart != null && message.hasOwnProperty("tsQuoteStart"))
                if (!$util.isInteger(message.tsQuoteStart) && !(message.tsQuoteStart && $util.isInteger(message.tsQuoteStart.low) && $util.isInteger(message.tsQuoteStart.high)))
                    return "tsQuoteStart: integer|Long expected";
            if (message.quotes != null && message.hasOwnProperty("quotes")) {
                var error = $root.pb.Quotes.verify(message.quotes);
                if (error)
                    return "quotes." + error;
            }
            if (message.quotesFuture != null && message.hasOwnProperty("quotesFuture")) {
                var error = $root.pb.QuotesFuture.verify(message.quotesFuture);
                if (error)
                    return "quotesFuture." + error;
            }
            if (message.players != null && message.hasOwnProperty("players")) {
                if (!Array.isArray(message.players))
                    return "players: array expected";
                for (var i = 0; i < message.players.length; ++i) {
                    var error = $root.pb.JjPlayer.verify(message.players[i]);
                    if (error)
                        return "players." + error;
                }
            }
            if (message.capital != null && message.hasOwnProperty("capital"))
                if (!$util.isInteger(message.capital))
                    return "capital: integer expected";
            return null;
        };

        /**
         * Creates a JjGame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.JjGame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.JjGame} JjGame
         */
        JjGame.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.JjGame)
                return object;
            var message = new $root.pb.JjGame();
            if (object.code != null)
                message.code = object.code | 0;
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.tsQuoteFrom != null)
                if ($util.Long)
                    (message.tsQuoteFrom = $util.Long.fromValue(object.tsQuoteFrom)).unsigned = false;
                else if (typeof object.tsQuoteFrom === "string")
                    message.tsQuoteFrom = parseInt(object.tsQuoteFrom, 10);
                else if (typeof object.tsQuoteFrom === "number")
                    message.tsQuoteFrom = object.tsQuoteFrom;
                else if (typeof object.tsQuoteFrom === "object")
                    message.tsQuoteFrom = new $util.LongBits(object.tsQuoteFrom.low >>> 0, object.tsQuoteFrom.high >>> 0).toNumber();
            if (object.tsQuoteTo != null)
                if ($util.Long)
                    (message.tsQuoteTo = $util.Long.fromValue(object.tsQuoteTo)).unsigned = false;
                else if (typeof object.tsQuoteTo === "string")
                    message.tsQuoteTo = parseInt(object.tsQuoteTo, 10);
                else if (typeof object.tsQuoteTo === "number")
                    message.tsQuoteTo = object.tsQuoteTo;
                else if (typeof object.tsQuoteTo === "object")
                    message.tsQuoteTo = new $util.LongBits(object.tsQuoteTo.low >>> 0, object.tsQuoteTo.high >>> 0).toNumber();
            if (object.tsQuoteStart != null)
                if ($util.Long)
                    (message.tsQuoteStart = $util.Long.fromValue(object.tsQuoteStart)).unsigned = false;
                else if (typeof object.tsQuoteStart === "string")
                    message.tsQuoteStart = parseInt(object.tsQuoteStart, 10);
                else if (typeof object.tsQuoteStart === "number")
                    message.tsQuoteStart = object.tsQuoteStart;
                else if (typeof object.tsQuoteStart === "object")
                    message.tsQuoteStart = new $util.LongBits(object.tsQuoteStart.low >>> 0, object.tsQuoteStart.high >>> 0).toNumber();
            if (object.quotes != null) {
                if (typeof object.quotes !== "object")
                    throw TypeError(".pb.JjGame.quotes: object expected");
                message.quotes = $root.pb.Quotes.fromObject(object.quotes);
            }
            if (object.quotesFuture != null) {
                if (typeof object.quotesFuture !== "object")
                    throw TypeError(".pb.JjGame.quotesFuture: object expected");
                message.quotesFuture = $root.pb.QuotesFuture.fromObject(object.quotesFuture);
            }
            if (object.players) {
                if (!Array.isArray(object.players))
                    throw TypeError(".pb.JjGame.players: array expected");
                message.players = [];
                for (var i = 0; i < object.players.length; ++i) {
                    if (typeof object.players[i] !== "object")
                        throw TypeError(".pb.JjGame.players: object expected");
                    message.players[i] = $root.pb.JjPlayer.fromObject(object.players[i]);
                }
            }
            if (object.capital != null)
                message.capital = object.capital | 0;
            return message;
        };

        /**
         * Creates a plain object from a JjGame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.JjGame
         * @static
         * @param {pb.JjGame} message JjGame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        JjGame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.players = [];
            if (options.defaults) {
                object.code = 0;
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteFrom = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteFrom = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteTo = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteTo = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsQuoteStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsQuoteStart = options.longs === String ? "0" : 0;
                object.quotes = null;
                object.quotesFuture = null;
                object.capital = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.tsQuoteFrom != null && message.hasOwnProperty("tsQuoteFrom"))
                if (typeof message.tsQuoteFrom === "number")
                    object.tsQuoteFrom = options.longs === String ? String(message.tsQuoteFrom) : message.tsQuoteFrom;
                else
                    object.tsQuoteFrom = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteFrom) : options.longs === Number ? new $util.LongBits(message.tsQuoteFrom.low >>> 0, message.tsQuoteFrom.high >>> 0).toNumber() : message.tsQuoteFrom;
            if (message.tsQuoteTo != null && message.hasOwnProperty("tsQuoteTo"))
                if (typeof message.tsQuoteTo === "number")
                    object.tsQuoteTo = options.longs === String ? String(message.tsQuoteTo) : message.tsQuoteTo;
                else
                    object.tsQuoteTo = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteTo) : options.longs === Number ? new $util.LongBits(message.tsQuoteTo.low >>> 0, message.tsQuoteTo.high >>> 0).toNumber() : message.tsQuoteTo;
            if (message.tsQuoteStart != null && message.hasOwnProperty("tsQuoteStart"))
                if (typeof message.tsQuoteStart === "number")
                    object.tsQuoteStart = options.longs === String ? String(message.tsQuoteStart) : message.tsQuoteStart;
                else
                    object.tsQuoteStart = options.longs === String ? $util.Long.prototype.toString.call(message.tsQuoteStart) : options.longs === Number ? new $util.LongBits(message.tsQuoteStart.low >>> 0, message.tsQuoteStart.high >>> 0).toNumber() : message.tsQuoteStart;
            if (message.quotes != null && message.hasOwnProperty("quotes"))
                object.quotes = $root.pb.Quotes.toObject(message.quotes, options);
            if (message.quotesFuture != null && message.hasOwnProperty("quotesFuture"))
                object.quotesFuture = $root.pb.QuotesFuture.toObject(message.quotesFuture, options);
            if (message.players && message.players.length) {
                object.players = [];
                for (var j = 0; j < message.players.length; ++j)
                    object.players[j] = $root.pb.JjPlayer.toObject(message.players[j], options);
            }
            if (message.capital != null && message.hasOwnProperty("capital"))
                object.capital = message.capital;
            return object;
        };

        /**
         * Converts this JjGame to JSON.
         * @function toJSON
         * @memberof pb.JjGame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        JjGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return JjGame;
    })();

    pb.CmdCgsGetStageAward = (function () {

        /**
         * Properties of a CmdCgsGetStageAward.
         * @memberof pb
         * @interface ICmdCgsGetStageAward
         * @property {number|null} [id] CmdCgsGetStageAward id
         * @property {number|null} [stage] CmdCgsGetStageAward stage
         * @property {boolean|null} [double] CmdCgsGetStageAward double
         */

        /**
         * Constructs a new CmdCgsGetStageAward.
         * @memberof pb
         * @classdesc Represents a CmdCgsGetStageAward.
         * @implements ICmdCgsGetStageAward
         * @constructor
         * @param {pb.ICmdCgsGetStageAward=} [properties] Properties to set
         */
        function CmdCgsGetStageAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgsGetStageAward id.
         * @member {number} id
         * @memberof pb.CmdCgsGetStageAward
         * @instance
         */
        CmdCgsGetStageAward.prototype.id = 0;

        /**
         * CmdCgsGetStageAward stage.
         * @member {number} stage
         * @memberof pb.CmdCgsGetStageAward
         * @instance
         */
        CmdCgsGetStageAward.prototype.stage = 0;

        /**
         * CmdCgsGetStageAward double.
         * @member {boolean} double
         * @memberof pb.CmdCgsGetStageAward
         * @instance
         */
        CmdCgsGetStageAward.prototype.double = false;

        /**
         * Creates a new CmdCgsGetStageAward instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {pb.ICmdCgsGetStageAward=} [properties] Properties to set
         * @returns {pb.CmdCgsGetStageAward} CmdCgsGetStageAward instance
         */
        CmdCgsGetStageAward.create = function create(properties) {
            return new CmdCgsGetStageAward(properties);
        };

        /**
         * Encodes the specified CmdCgsGetStageAward message. Does not implicitly {@link pb.CmdCgsGetStageAward.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {pb.ICmdCgsGetStageAward} message CmdCgsGetStageAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsGetStageAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.stage != null && Object.hasOwnProperty.call(message, "stage"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stage);
            if (message.double != null && Object.hasOwnProperty.call(message, "double"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.double);
            return writer;
        };

        /**
         * Encodes the specified CmdCgsGetStageAward message, length delimited. Does not implicitly {@link pb.CmdCgsGetStageAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {pb.ICmdCgsGetStageAward} message CmdCgsGetStageAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsGetStageAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgsGetStageAward message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgsGetStageAward} CmdCgsGetStageAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsGetStageAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgsGetStageAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.stage = reader.int32();
                        break;
                    case 3:
                        message.double = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgsGetStageAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgsGetStageAward} CmdCgsGetStageAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsGetStageAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgsGetStageAward message.
         * @function verify
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgsGetStageAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            if (message.double != null && message.hasOwnProperty("double"))
                if (typeof message.double !== "boolean")
                    return "double: boolean expected";
            return null;
        };

        /**
         * Creates a CmdCgsGetStageAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgsGetStageAward} CmdCgsGetStageAward
         */
        CmdCgsGetStageAward.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgsGetStageAward)
                return object;
            var message = new $root.pb.CmdCgsGetStageAward();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.stage != null)
                message.stage = object.stage | 0;
            if (object.double != null)
                message.double = Boolean(object.double);
            return message;
        };

        /**
         * Creates a plain object from a CmdCgsGetStageAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgsGetStageAward
         * @static
         * @param {pb.CmdCgsGetStageAward} message CmdCgsGetStageAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgsGetStageAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.stage = 0;
                object.double = false;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            if (message.double != null && message.hasOwnProperty("double"))
                object.double = message.double;
            return object;
        };

        /**
         * Converts this CmdCgsGetStageAward to JSON.
         * @function toJSON
         * @memberof pb.CmdCgsGetStageAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgsGetStageAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgsGetStageAward;
    })();

    pb.CmdStockOrder = (function () {

        /**
         * Properties of a CmdStockOrder.
         * @memberof pb
         * @interface ICmdStockOrder
         * @property {number|null} [code] CmdStockOrder code
         * @property {pb.OrderType|null} [type] CmdStockOrder type
         * @property {number|null} [price] CmdStockOrder price
         * @property {number|null} [volume] CmdStockOrder volume
         * @property {number|null} [amount] CmdStockOrder amount
         * @property {number|null} [uid] CmdStockOrder uid
         * @property {number|null} [id] CmdStockOrder id
         */

        /**
         * Constructs a new CmdStockOrder.
         * @memberof pb
         * @classdesc Represents a CmdStockOrder.
         * @implements ICmdStockOrder
         * @constructor
         * @param {pb.ICmdStockOrder=} [properties] Properties to set
         */
        function CmdStockOrder(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdStockOrder code.
         * @member {number} code
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.code = 0;

        /**
         * CmdStockOrder type.
         * @member {pb.OrderType} type
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.type = 0;

        /**
         * CmdStockOrder price.
         * @member {number} price
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.price = 0;

        /**
         * CmdStockOrder volume.
         * @member {number} volume
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.volume = 0;

        /**
         * CmdStockOrder amount.
         * @member {number} amount
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.amount = 0;

        /**
         * CmdStockOrder uid.
         * @member {number} uid
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.uid = 0;

        /**
         * CmdStockOrder id.
         * @member {number} id
         * @memberof pb.CmdStockOrder
         * @instance
         */
        CmdStockOrder.prototype.id = 0;

        /**
         * Creates a new CmdStockOrder instance using the specified properties.
         * @function create
         * @memberof pb.CmdStockOrder
         * @static
         * @param {pb.ICmdStockOrder=} [properties] Properties to set
         * @returns {pb.CmdStockOrder} CmdStockOrder instance
         */
        CmdStockOrder.create = function create(properties) {
            return new CmdStockOrder(properties);
        };

        /**
         * Encodes the specified CmdStockOrder message. Does not implicitly {@link pb.CmdStockOrder.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdStockOrder
         * @static
         * @param {pb.ICmdStockOrder} message CmdStockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrder.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.price);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.volume);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.amount);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.uid);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdStockOrder message, length delimited. Does not implicitly {@link pb.CmdStockOrder.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdStockOrder
         * @static
         * @param {pb.ICmdStockOrder} message CmdStockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdStockOrder message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdStockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdStockOrder} CmdStockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrder.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdStockOrder();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.price = reader.double();
                        break;
                    case 4:
                        message.volume = reader.int32();
                        break;
                    case 5:
                        message.amount = reader.int32();
                        break;
                    case 6:
                        message.uid = reader.int32();
                        break;
                    case 7:
                        message.id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdStockOrder message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdStockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdStockOrder} CmdStockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdStockOrder message.
         * @function verify
         * @memberof pb.CmdStockOrder
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdStockOrder.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                }
            if (message.price != null && message.hasOwnProperty("price"))
                if (typeof message.price !== "number")
                    return "price: number expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume))
                    return "volume: integer expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdStockOrder message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdStockOrder
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdStockOrder} CmdStockOrder
         */
        CmdStockOrder.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdStockOrder)
                return object;
            var message = new $root.pb.CmdStockOrder();
            if (object.code != null)
                message.code = object.code | 0;
            switch (object.type) {
                case "OrderType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "AskMarket":
                case 1:
                    message.type = 1;
                    break;
                case "BidMarket":
                case 2:
                    message.type = 2;
                    break;
                case "AskLimit":
                case 3:
                    message.type = 3;
                    break;
                case "BidLimit":
                case 4:
                    message.type = 4;
                    break;
                case "AskLimit_Cancel":
                case 5:
                    message.type = 5;
                    break;
                case "BidLimit_Cancel":
                case 6:
                    message.type = 6;
                    break;
                case "BidMarket_Auto":
                case 7:
                    message.type = 7;
                    break;
            }
            if (object.price != null)
                message.price = Number(object.price);
            if (object.volume != null)
                message.volume = object.volume | 0;
            if (object.amount != null)
                message.amount = object.amount | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdStockOrder message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdStockOrder
         * @static
         * @param {pb.CmdStockOrder} message CmdStockOrder
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdStockOrder.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.type = options.enums === String ? "OrderType_NULL" : 0;
                object.price = 0;
                object.volume = 0;
                object.amount = 0;
                object.uid = 0;
                object.id = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.OrderType[message.type] : message.type;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
            if (message.volume != null && message.hasOwnProperty("volume"))
                object.volume = message.volume;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdStockOrder to JSON.
         * @function toJSON
         * @memberof pb.CmdStockOrder
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdStockOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdStockOrder;
    })();

    pb.CmdStockOrderReply = (function () {

        /**
         * Properties of a CmdStockOrderReply.
         * @memberof pb
         * @interface ICmdStockOrderReply
         * @property {number|Long|null} [orderId] CmdStockOrderReply orderId
         * @property {number|null} [node] CmdStockOrderReply node
         * @property {pb.IErrorInfo|null} [result] CmdStockOrderReply result
         */

        /**
         * Constructs a new CmdStockOrderReply.
         * @memberof pb
         * @classdesc Represents a CmdStockOrderReply.
         * @implements ICmdStockOrderReply
         * @constructor
         * @param {pb.ICmdStockOrderReply=} [properties] Properties to set
         */
        function CmdStockOrderReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdStockOrderReply orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdStockOrderReply
         * @instance
         */
        CmdStockOrderReply.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdStockOrderReply node.
         * @member {number} node
         * @memberof pb.CmdStockOrderReply
         * @instance
         */
        CmdStockOrderReply.prototype.node = 0;

        /**
         * CmdStockOrderReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdStockOrderReply
         * @instance
         */
        CmdStockOrderReply.prototype.result = null;

        /**
         * Creates a new CmdStockOrderReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {pb.ICmdStockOrderReply=} [properties] Properties to set
         * @returns {pb.CmdStockOrderReply} CmdStockOrderReply instance
         */
        CmdStockOrderReply.create = function create(properties) {
            return new CmdStockOrderReply(properties);
        };

        /**
         * Encodes the specified CmdStockOrderReply message. Does not implicitly {@link pb.CmdStockOrderReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {pb.ICmdStockOrderReply} message CmdStockOrderReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrderReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.orderId);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.node);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdStockOrderReply message, length delimited. Does not implicitly {@link pb.CmdStockOrderReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {pb.ICmdStockOrderReply} message CmdStockOrderReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrderReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdStockOrderReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdStockOrderReply} CmdStockOrderReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrderReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdStockOrderReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.orderId = reader.int64();
                        break;
                    case 2:
                        message.node = reader.int32();
                        break;
                    case 3:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdStockOrderReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdStockOrderReply} CmdStockOrderReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrderReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdStockOrderReply message.
         * @function verify
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdStockOrderReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            return null;
        };

        /**
         * Creates a CmdStockOrderReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdStockOrderReply} CmdStockOrderReply
         */
        CmdStockOrderReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdStockOrderReply)
                return object;
            var message = new $root.pb.CmdStockOrderReply();
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            if (object.node != null)
                message.node = object.node | 0;
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdStockOrderReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdStockOrderReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdStockOrderReply
         * @static
         * @param {pb.CmdStockOrderReply} message CmdStockOrderReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdStockOrderReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.node = 0;
                object.result = null;
            }
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            return object;
        };

        /**
         * Converts this CmdStockOrderReply to JSON.
         * @function toJSON
         * @memberof pb.CmdStockOrderReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdStockOrderReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdStockOrderReply;
    })();

    pb.CmdStockOrderCancel = (function () {

        /**
         * Properties of a CmdStockOrderCancel.
         * @memberof pb
         * @interface ICmdStockOrderCancel
         * @property {number|Long|null} [orderId] CmdStockOrderCancel orderId
         * @property {pb.OrderType|null} [type] CmdStockOrderCancel type
         * @property {number|null} [code] CmdStockOrderCancel code
         * @property {number|null} [uid] CmdStockOrderCancel uid
         * @property {number|null} [id] CmdStockOrderCancel id
         * @property {number|null} [node] CmdStockOrderCancel node
         */

        /**
         * Constructs a new CmdStockOrderCancel.
         * @memberof pb
         * @classdesc Represents a CmdStockOrderCancel.
         * @implements ICmdStockOrderCancel
         * @constructor
         * @param {pb.ICmdStockOrderCancel=} [properties] Properties to set
         */
        function CmdStockOrderCancel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdStockOrderCancel orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdStockOrderCancel type.
         * @member {pb.OrderType} type
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.type = 0;

        /**
         * CmdStockOrderCancel code.
         * @member {number} code
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.code = 0;

        /**
         * CmdStockOrderCancel uid.
         * @member {number} uid
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.uid = 0;

        /**
         * CmdStockOrderCancel id.
         * @member {number} id
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.id = 0;

        /**
         * CmdStockOrderCancel node.
         * @member {number} node
         * @memberof pb.CmdStockOrderCancel
         * @instance
         */
        CmdStockOrderCancel.prototype.node = 0;

        /**
         * Creates a new CmdStockOrderCancel instance using the specified properties.
         * @function create
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {pb.ICmdStockOrderCancel=} [properties] Properties to set
         * @returns {pb.CmdStockOrderCancel} CmdStockOrderCancel instance
         */
        CmdStockOrderCancel.create = function create(properties) {
            return new CmdStockOrderCancel(properties);
        };

        /**
         * Encodes the specified CmdStockOrderCancel message. Does not implicitly {@link pb.CmdStockOrderCancel.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {pb.ICmdStockOrderCancel} message CmdStockOrderCancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrderCancel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.orderId);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.uid);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.id);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.node);
            return writer;
        };

        /**
         * Encodes the specified CmdStockOrderCancel message, length delimited. Does not implicitly {@link pb.CmdStockOrderCancel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {pb.ICmdStockOrderCancel} message CmdStockOrderCancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdStockOrderCancel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdStockOrderCancel message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdStockOrderCancel} CmdStockOrderCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrderCancel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdStockOrderCancel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.orderId = reader.int64();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.code = reader.int32();
                        break;
                    case 4:
                        message.uid = reader.int32();
                        break;
                    case 5:
                        message.id = reader.int32();
                        break;
                    case 6:
                        message.node = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdStockOrderCancel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdStockOrderCancel} CmdStockOrderCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdStockOrderCancel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdStockOrderCancel message.
         * @function verify
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdStockOrderCancel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            return null;
        };

        /**
         * Creates a CmdStockOrderCancel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdStockOrderCancel} CmdStockOrderCancel
         */
        CmdStockOrderCancel.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdStockOrderCancel)
                return object;
            var message = new $root.pb.CmdStockOrderCancel();
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            switch (object.type) {
                case "OrderType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "AskMarket":
                case 1:
                    message.type = 1;
                    break;
                case "BidMarket":
                case 2:
                    message.type = 2;
                    break;
                case "AskLimit":
                case 3:
                    message.type = 3;
                    break;
                case "BidLimit":
                case 4:
                    message.type = 4;
                    break;
                case "AskLimit_Cancel":
                case 5:
                    message.type = 5;
                    break;
                case "BidLimit_Cancel":
                case 6:
                    message.type = 6;
                    break;
                case "BidMarket_Auto":
                case 7:
                    message.type = 7;
                    break;
            }
            if (object.code != null)
                message.code = object.code | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.id != null)
                message.id = object.id | 0;
            if (object.node != null)
                message.node = object.node | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdStockOrderCancel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdStockOrderCancel
         * @static
         * @param {pb.CmdStockOrderCancel} message CmdStockOrderCancel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdStockOrderCancel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.type = options.enums === String ? "OrderType_NULL" : 0;
                object.code = 0;
                object.uid = 0;
                object.id = 0;
                object.node = 0;
            }
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.OrderType[message.type] : message.type;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            return object;
        };

        /**
         * Converts this CmdStockOrderCancel to JSON.
         * @function toJSON
         * @memberof pb.CmdStockOrderCancel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdStockOrderCancel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdStockOrderCancel;
    })();

    pb.StockOrder = (function () {

        /**
         * Properties of a StockOrder.
         * @memberof pb
         * @interface IStockOrder
         * @property {number|Long|null} [orderId] StockOrder orderId
         * @property {number|null} [code] StockOrder code
         * @property {pb.OrderType|null} [type] StockOrder type
         * @property {pb.OrderState|null} [state] StockOrder state
         * @property {number|null} [price] StockOrder price
         * @property {number|null} [volume] StockOrder volume
         * @property {number|null} [uid] StockOrder uid
         * @property {number|Long|null} [ts] StockOrder ts
         * @property {number|null} [id] StockOrder id
         * @property {number|null} [node] StockOrder node
         * @property {number|null} [cost] StockOrder cost
         */

        /**
         * Constructs a new StockOrder.
         * @memberof pb
         * @classdesc Represents a StockOrder.
         * @implements IStockOrder
         * @constructor
         * @param {pb.IStockOrder=} [properties] Properties to set
         */
        function StockOrder(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StockOrder orderId.
         * @member {number|Long} orderId
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * StockOrder code.
         * @member {number} code
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.code = 0;

        /**
         * StockOrder type.
         * @member {pb.OrderType} type
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.type = 0;

        /**
         * StockOrder state.
         * @member {pb.OrderState} state
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.state = 0;

        /**
         * StockOrder price.
         * @member {number} price
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.price = 0;

        /**
         * StockOrder volume.
         * @member {number} volume
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.volume = 0;

        /**
         * StockOrder uid.
         * @member {number} uid
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.uid = 0;

        /**
         * StockOrder ts.
         * @member {number|Long} ts
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * StockOrder id.
         * @member {number} id
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.id = 0;

        /**
         * StockOrder node.
         * @member {number} node
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.node = 0;

        /**
         * StockOrder cost.
         * @member {number} cost
         * @memberof pb.StockOrder
         * @instance
         */
        StockOrder.prototype.cost = 0;

        /**
         * Creates a new StockOrder instance using the specified properties.
         * @function create
         * @memberof pb.StockOrder
         * @static
         * @param {pb.IStockOrder=} [properties] Properties to set
         * @returns {pb.StockOrder} StockOrder instance
         */
        StockOrder.create = function create(properties) {
            return new StockOrder(properties);
        };

        /**
         * Encodes the specified StockOrder message. Does not implicitly {@link pb.StockOrder.verify|verify} messages.
         * @function encode
         * @memberof pb.StockOrder
         * @static
         * @param {pb.IStockOrder} message StockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrder.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.orderId);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);
            if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.price);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.volume);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.uid);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.ts);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.id);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.node);
            if (message.cost != null && Object.hasOwnProperty.call(message, "cost"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.cost);
            return writer;
        };

        /**
         * Encodes the specified StockOrder message, length delimited. Does not implicitly {@link pb.StockOrder.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.StockOrder
         * @static
         * @param {pb.IStockOrder} message StockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StockOrder message from the specified reader or buffer.
         * @function decode
         * @memberof pb.StockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.StockOrder} StockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrder.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.StockOrder();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.orderId = reader.int64();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.state = reader.int32();
                        break;
                    case 5:
                        message.price = reader.double();
                        break;
                    case 6:
                        message.volume = reader.int32();
                        break;
                    case 7:
                        message.uid = reader.int32();
                        break;
                    case 8:
                        message.ts = reader.int64();
                        break;
                    case 9:
                        message.id = reader.int32();
                        break;
                    case 10:
                        message.node = reader.int32();
                        break;
                    case 11:
                        message.cost = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a StockOrder message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.StockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.StockOrder} StockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StockOrder message.
         * @function verify
         * @memberof pb.StockOrder
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StockOrder.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                }
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                }
            if (message.price != null && message.hasOwnProperty("price"))
                if (typeof message.price !== "number")
                    return "price: number expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume))
                    return "volume: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (typeof message.cost !== "number")
                    return "cost: number expected";
            return null;
        };

        /**
         * Creates a StockOrder message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.StockOrder
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.StockOrder} StockOrder
         */
        StockOrder.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.StockOrder)
                return object;
            var message = new $root.pb.StockOrder();
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            if (object.code != null)
                message.code = object.code | 0;
            switch (object.type) {
                case "OrderType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "AskMarket":
                case 1:
                    message.type = 1;
                    break;
                case "BidMarket":
                case 2:
                    message.type = 2;
                    break;
                case "AskLimit":
                case 3:
                    message.type = 3;
                    break;
                case "BidLimit":
                case 4:
                    message.type = 4;
                    break;
                case "AskLimit_Cancel":
                case 5:
                    message.type = 5;
                    break;
                case "BidLimit_Cancel":
                case 6:
                    message.type = 6;
                    break;
                case "BidMarket_Auto":
                case 7:
                    message.type = 7;
                    break;
            }
            switch (object.state) {
                case "Init":
                case 0:
                    message.state = 0;
                    break;
                case "Partial":
                case 1:
                    message.state = 1;
                    break;
                case "Done":
                case 2:
                    message.state = 2;
                    break;
                case "ManulCancel":
                case 3:
                    message.state = 3;
                    break;
                case "AutoCancel":
                case 4:
                    message.state = 4;
                    break;
            }
            if (object.price != null)
                message.price = Number(object.price);
            if (object.volume != null)
                message.volume = object.volume | 0;
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.node != null)
                message.node = object.node | 0;
            if (object.cost != null)
                message.cost = Number(object.cost);
            return message;
        };

        /**
         * Creates a plain object from a StockOrder message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.StockOrder
         * @static
         * @param {pb.StockOrder} message StockOrder
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StockOrder.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.code = 0;
                object.type = options.enums === String ? "OrderType_NULL" : 0;
                object.state = options.enums === String ? "Init" : 0;
                object.price = 0;
                object.volume = 0;
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.id = 0;
                object.node = 0;
                object.cost = 0;
            }
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.OrderType[message.type] : message.type;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.pb.OrderState[message.state] : message.state;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
            if (message.volume != null && message.hasOwnProperty("volume"))
                object.volume = message.volume;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            if (message.cost != null && message.hasOwnProperty("cost"))
                object.cost = options.json && !isFinite(message.cost) ? String(message.cost) : message.cost;
            return object;
        };

        /**
         * Converts this StockOrder to JSON.
         * @function toJSON
         * @memberof pb.StockOrder
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StockOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StockOrder;
    })();

    pb.StockOrderList = (function () {

        /**
         * Properties of a StockOrderList.
         * @memberof pb
         * @interface IStockOrderList
         * @property {Array.<pb.IStockOrder>|null} [items] StockOrderList items
         */

        /**
         * Constructs a new StockOrderList.
         * @memberof pb
         * @classdesc Represents a StockOrderList.
         * @implements IStockOrderList
         * @constructor
         * @param {pb.IStockOrderList=} [properties] Properties to set
         */
        function StockOrderList(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StockOrderList items.
         * @member {Array.<pb.IStockOrder>} items
         * @memberof pb.StockOrderList
         * @instance
         */
        StockOrderList.prototype.items = $util.emptyArray;

        /**
         * Creates a new StockOrderList instance using the specified properties.
         * @function create
         * @memberof pb.StockOrderList
         * @static
         * @param {pb.IStockOrderList=} [properties] Properties to set
         * @returns {pb.StockOrderList} StockOrderList instance
         */
        StockOrderList.create = function create(properties) {
            return new StockOrderList(properties);
        };

        /**
         * Encodes the specified StockOrderList message. Does not implicitly {@link pb.StockOrderList.verify|verify} messages.
         * @function encode
         * @memberof pb.StockOrderList
         * @static
         * @param {pb.IStockOrderList} message StockOrderList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrderList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.StockOrder.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StockOrderList message, length delimited. Does not implicitly {@link pb.StockOrderList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.StockOrderList
         * @static
         * @param {pb.IStockOrderList} message StockOrderList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrderList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StockOrderList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.StockOrderList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.StockOrderList} StockOrderList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrderList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.StockOrderList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.StockOrder.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a StockOrderList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.StockOrderList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.StockOrderList} StockOrderList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrderList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StockOrderList message.
         * @function verify
         * @memberof pb.StockOrderList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StockOrderList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.StockOrder.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a StockOrderList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.StockOrderList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.StockOrderList} StockOrderList
         */
        StockOrderList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.StockOrderList)
                return object;
            var message = new $root.pb.StockOrderList();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.StockOrderList.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.StockOrderList.items: object expected");
                    message.items[i] = $root.pb.StockOrder.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a StockOrderList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.StockOrderList
         * @static
         * @param {pb.StockOrderList} message StockOrderList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StockOrderList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.StockOrder.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this StockOrderList to JSON.
         * @function toJSON
         * @memberof pb.StockOrderList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StockOrderList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StockOrderList;
    })();

    pb.StockOrderResult = (function () {

        /**
         * Properties of a StockOrderResult.
         * @memberof pb
         * @interface IStockOrderResult
         * @property {pb.IErrorInfo|null} [result] StockOrderResult result
         * @property {pb.IStockOrder|null} [order] StockOrderResult order
         */

        /**
         * Constructs a new StockOrderResult.
         * @memberof pb
         * @classdesc Represents a StockOrderResult.
         * @implements IStockOrderResult
         * @constructor
         * @param {pb.IStockOrderResult=} [properties] Properties to set
         */
        function StockOrderResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StockOrderResult result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.StockOrderResult
         * @instance
         */
        StockOrderResult.prototype.result = null;

        /**
         * StockOrderResult order.
         * @member {pb.IStockOrder|null|undefined} order
         * @memberof pb.StockOrderResult
         * @instance
         */
        StockOrderResult.prototype.order = null;

        /**
         * Creates a new StockOrderResult instance using the specified properties.
         * @function create
         * @memberof pb.StockOrderResult
         * @static
         * @param {pb.IStockOrderResult=} [properties] Properties to set
         * @returns {pb.StockOrderResult} StockOrderResult instance
         */
        StockOrderResult.create = function create(properties) {
            return new StockOrderResult(properties);
        };

        /**
         * Encodes the specified StockOrderResult message. Does not implicitly {@link pb.StockOrderResult.verify|verify} messages.
         * @function encode
         * @memberof pb.StockOrderResult
         * @static
         * @param {pb.IStockOrderResult} message StockOrderResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrderResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.order != null && Object.hasOwnProperty.call(message, "order"))
                $root.pb.StockOrder.encode(message.order, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StockOrderResult message, length delimited. Does not implicitly {@link pb.StockOrderResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.StockOrderResult
         * @static
         * @param {pb.IStockOrderResult} message StockOrderResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockOrderResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StockOrderResult message from the specified reader or buffer.
         * @function decode
         * @memberof pb.StockOrderResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.StockOrderResult} StockOrderResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrderResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.StockOrderResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.order = $root.pb.StockOrder.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a StockOrderResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.StockOrderResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.StockOrderResult} StockOrderResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockOrderResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StockOrderResult message.
         * @function verify
         * @memberof pb.StockOrderResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StockOrderResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.order != null && message.hasOwnProperty("order")) {
                var error = $root.pb.StockOrder.verify(message.order);
                if (error)
                    return "order." + error;
            }
            return null;
        };

        /**
         * Creates a StockOrderResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.StockOrderResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.StockOrderResult} StockOrderResult
         */
        StockOrderResult.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.StockOrderResult)
                return object;
            var message = new $root.pb.StockOrderResult();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.StockOrderResult.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.order != null) {
                if (typeof object.order !== "object")
                    throw TypeError(".pb.StockOrderResult.order: object expected");
                message.order = $root.pb.StockOrder.fromObject(object.order);
            }
            return message;
        };

        /**
         * Creates a plain object from a StockOrderResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.StockOrderResult
         * @static
         * @param {pb.StockOrderResult} message StockOrderResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StockOrderResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.order = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.order != null && message.hasOwnProperty("order"))
                object.order = $root.pb.StockOrder.toObject(message.order, options);
            return object;
        };

        /**
         * Converts this StockOrderResult to JSON.
         * @function toJSON
         * @memberof pb.StockOrderResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StockOrderResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StockOrderResult;
    })();

    pb.StockPosition = (function () {

        /**
         * Properties of a StockPosition.
         * @memberof pb
         * @interface IStockPosition
         * @property {number|null} [code] StockPosition code
         * @property {number|null} [volumeFree] StockPosition volumeFree
         * @property {number|null} [volume] StockPosition volume
         * @property {number|null} [priceCost] StockPosition priceCost
         */

        /**
         * Constructs a new StockPosition.
         * @memberof pb
         * @classdesc Represents a StockPosition.
         * @implements IStockPosition
         * @constructor
         * @param {pb.IStockPosition=} [properties] Properties to set
         */
        function StockPosition(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StockPosition code.
         * @member {number} code
         * @memberof pb.StockPosition
         * @instance
         */
        StockPosition.prototype.code = 0;

        /**
         * StockPosition volumeFree.
         * @member {number} volumeFree
         * @memberof pb.StockPosition
         * @instance
         */
        StockPosition.prototype.volumeFree = 0;

        /**
         * StockPosition volume.
         * @member {number} volume
         * @memberof pb.StockPosition
         * @instance
         */
        StockPosition.prototype.volume = 0;

        /**
         * StockPosition priceCost.
         * @member {number} priceCost
         * @memberof pb.StockPosition
         * @instance
         */
        StockPosition.prototype.priceCost = 0;

        /**
         * Creates a new StockPosition instance using the specified properties.
         * @function create
         * @memberof pb.StockPosition
         * @static
         * @param {pb.IStockPosition=} [properties] Properties to set
         * @returns {pb.StockPosition} StockPosition instance
         */
        StockPosition.create = function create(properties) {
            return new StockPosition(properties);
        };

        /**
         * Encodes the specified StockPosition message. Does not implicitly {@link pb.StockPosition.verify|verify} messages.
         * @function encode
         * @memberof pb.StockPosition
         * @static
         * @param {pb.IStockPosition} message StockPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockPosition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.volumeFree != null && Object.hasOwnProperty.call(message, "volumeFree"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.volumeFree);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.volume);
            if (message.priceCost != null && Object.hasOwnProperty.call(message, "priceCost"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.priceCost);
            return writer;
        };

        /**
         * Encodes the specified StockPosition message, length delimited. Does not implicitly {@link pb.StockPosition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.StockPosition
         * @static
         * @param {pb.IStockPosition} message StockPosition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockPosition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StockPosition message from the specified reader or buffer.
         * @function decode
         * @memberof pb.StockPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.StockPosition} StockPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockPosition.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.StockPosition();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.volumeFree = reader.int32();
                        break;
                    case 3:
                        message.volume = reader.int32();
                        break;
                    case 4:
                        message.priceCost = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a StockPosition message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.StockPosition
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.StockPosition} StockPosition
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockPosition.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StockPosition message.
         * @function verify
         * @memberof pb.StockPosition
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StockPosition.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.volumeFree != null && message.hasOwnProperty("volumeFree"))
                if (!$util.isInteger(message.volumeFree))
                    return "volumeFree: integer expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume))
                    return "volume: integer expected";
            if (message.priceCost != null && message.hasOwnProperty("priceCost"))
                if (typeof message.priceCost !== "number")
                    return "priceCost: number expected";
            return null;
        };

        /**
         * Creates a StockPosition message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.StockPosition
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.StockPosition} StockPosition
         */
        StockPosition.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.StockPosition)
                return object;
            var message = new $root.pb.StockPosition();
            if (object.code != null)
                message.code = object.code | 0;
            if (object.volumeFree != null)
                message.volumeFree = object.volumeFree | 0;
            if (object.volume != null)
                message.volume = object.volume | 0;
            if (object.priceCost != null)
                message.priceCost = Number(object.priceCost);
            return message;
        };

        /**
         * Creates a plain object from a StockPosition message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.StockPosition
         * @static
         * @param {pb.StockPosition} message StockPosition
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StockPosition.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.volumeFree = 0;
                object.volume = 0;
                object.priceCost = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.volumeFree != null && message.hasOwnProperty("volumeFree"))
                object.volumeFree = message.volumeFree;
            if (message.volume != null && message.hasOwnProperty("volume"))
                object.volume = message.volume;
            if (message.priceCost != null && message.hasOwnProperty("priceCost"))
                object.priceCost = options.json && !isFinite(message.priceCost) ? String(message.priceCost) : message.priceCost;
            return object;
        };

        /**
         * Converts this StockPosition to JSON.
         * @function toJSON
         * @memberof pb.StockPosition
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StockPosition.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StockPosition;
    })();

    pb.StockPositionList = (function () {

        /**
         * Properties of a StockPositionList.
         * @memberof pb
         * @interface IStockPositionList
         * @property {Array.<pb.IStockPosition>|null} [items] StockPositionList items
         */

        /**
         * Constructs a new StockPositionList.
         * @memberof pb
         * @classdesc Represents a StockPositionList.
         * @implements IStockPositionList
         * @constructor
         * @param {pb.IStockPositionList=} [properties] Properties to set
         */
        function StockPositionList(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StockPositionList items.
         * @member {Array.<pb.IStockPosition>} items
         * @memberof pb.StockPositionList
         * @instance
         */
        StockPositionList.prototype.items = $util.emptyArray;

        /**
         * Creates a new StockPositionList instance using the specified properties.
         * @function create
         * @memberof pb.StockPositionList
         * @static
         * @param {pb.IStockPositionList=} [properties] Properties to set
         * @returns {pb.StockPositionList} StockPositionList instance
         */
        StockPositionList.create = function create(properties) {
            return new StockPositionList(properties);
        };

        /**
         * Encodes the specified StockPositionList message. Does not implicitly {@link pb.StockPositionList.verify|verify} messages.
         * @function encode
         * @memberof pb.StockPositionList
         * @static
         * @param {pb.IStockPositionList} message StockPositionList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockPositionList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.StockPosition.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StockPositionList message, length delimited. Does not implicitly {@link pb.StockPositionList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.StockPositionList
         * @static
         * @param {pb.IStockPositionList} message StockPositionList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StockPositionList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StockPositionList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.StockPositionList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.StockPositionList} StockPositionList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockPositionList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.StockPositionList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.StockPosition.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a StockPositionList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.StockPositionList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.StockPositionList} StockPositionList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StockPositionList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StockPositionList message.
         * @function verify
         * @memberof pb.StockPositionList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StockPositionList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.StockPosition.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a StockPositionList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.StockPositionList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.StockPositionList} StockPositionList
         */
        StockPositionList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.StockPositionList)
                return object;
            var message = new $root.pb.StockPositionList();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.StockPositionList.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.StockPositionList.items: object expected");
                    message.items[i] = $root.pb.StockPosition.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a StockPositionList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.StockPositionList
         * @static
         * @param {pb.StockPositionList} message StockPositionList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StockPositionList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.StockPosition.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this StockPositionList to JSON.
         * @function toJSON
         * @memberof pb.StockPositionList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StockPositionList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StockPositionList;
    })();

    pb.CmdMncgExchange = (function () {

        /**
         * Properties of a CmdMncgExchange.
         * @memberof pb
         * @interface ICmdMncgExchange
         * @property {pb.ExchangeDirection|null} [direction] CmdMncgExchange direction
         * @property {number|Long|null} [amount] CmdMncgExchange amount
         */

        /**
         * Constructs a new CmdMncgExchange.
         * @memberof pb
         * @classdesc Represents a CmdMncgExchange.
         * @implements ICmdMncgExchange
         * @constructor
         * @param {pb.ICmdMncgExchange=} [properties] Properties to set
         */
        function CmdMncgExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdMncgExchange direction.
         * @member {pb.ExchangeDirection} direction
         * @memberof pb.CmdMncgExchange
         * @instance
         */
        CmdMncgExchange.prototype.direction = 0;

        /**
         * CmdMncgExchange amount.
         * @member {number|Long} amount
         * @memberof pb.CmdMncgExchange
         * @instance
         */
        CmdMncgExchange.prototype.amount = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdMncgExchange instance using the specified properties.
         * @function create
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {pb.ICmdMncgExchange=} [properties] Properties to set
         * @returns {pb.CmdMncgExchange} CmdMncgExchange instance
         */
        CmdMncgExchange.create = function create(properties) {
            return new CmdMncgExchange(properties);
        };

        /**
         * Encodes the specified CmdMncgExchange message. Does not implicitly {@link pb.CmdMncgExchange.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {pb.ICmdMncgExchange} message CmdMncgExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.direction != null && Object.hasOwnProperty.call(message, "direction"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.direction);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.amount);
            return writer;
        };

        /**
         * Encodes the specified CmdMncgExchange message, length delimited. Does not implicitly {@link pb.CmdMncgExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {pb.ICmdMncgExchange} message CmdMncgExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdMncgExchange message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdMncgExchange} CmdMncgExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdMncgExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.direction = reader.int32();
                        break;
                    case 2:
                        message.amount = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdMncgExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdMncgExchange} CmdMncgExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdMncgExchange message.
         * @function verify
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdMncgExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.direction != null && message.hasOwnProperty("direction"))
                switch (message.direction) {
                    default:
                        return "direction: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                    return "amount: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdMncgExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdMncgExchange} CmdMncgExchange
         */
        CmdMncgExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdMncgExchange)
                return object;
            var message = new $root.pb.CmdMncgExchange();
            switch (object.direction) {
                case "ExchangeDirection_NULL":
                case 0:
                    message.direction = 0;
                    break;
                case "Forward":
                case 1:
                    message.direction = 1;
                    break;
                case "Reverse":
                case 2:
                    message.direction = 2;
                    break;
            }
            if (object.amount != null)
                if ($util.Long)
                    (message.amount = $util.Long.fromValue(object.amount)).unsigned = false;
                else if (typeof object.amount === "string")
                    message.amount = parseInt(object.amount, 10);
                else if (typeof object.amount === "number")
                    message.amount = object.amount;
                else if (typeof object.amount === "object")
                    message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdMncgExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdMncgExchange
         * @static
         * @param {pb.CmdMncgExchange} message CmdMncgExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdMncgExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.direction = options.enums === String ? "ExchangeDirection_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.amount = options.longs === String ? "0" : 0;
            }
            if (message.direction != null && message.hasOwnProperty("direction"))
                object.direction = options.enums === String ? $root.pb.ExchangeDirection[message.direction] : message.direction;
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (typeof message.amount === "number")
                    object.amount = options.longs === String ? String(message.amount) : message.amount;
                else
                    object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber() : message.amount;
            return object;
        };

        /**
         * Converts this CmdMncgExchange to JSON.
         * @function toJSON
         * @memberof pb.CmdMncgExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdMncgExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdMncgExchange;
    })();

    pb.CmdMncgExchangeReply = (function () {

        /**
         * Properties of a CmdMncgExchangeReply.
         * @memberof pb
         * @interface ICmdMncgExchangeReply
         * @property {pb.IErrorInfo|null} [result] CmdMncgExchangeReply result
         * @property {number|null} [account] CmdMncgExchangeReply account
         */

        /**
         * Constructs a new CmdMncgExchangeReply.
         * @memberof pb
         * @classdesc Represents a CmdMncgExchangeReply.
         * @implements ICmdMncgExchangeReply
         * @constructor
         * @param {pb.ICmdMncgExchangeReply=} [properties] Properties to set
         */
        function CmdMncgExchangeReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdMncgExchangeReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdMncgExchangeReply
         * @instance
         */
        CmdMncgExchangeReply.prototype.result = null;

        /**
         * CmdMncgExchangeReply account.
         * @member {number} account
         * @memberof pb.CmdMncgExchangeReply
         * @instance
         */
        CmdMncgExchangeReply.prototype.account = 0;

        /**
         * Creates a new CmdMncgExchangeReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {pb.ICmdMncgExchangeReply=} [properties] Properties to set
         * @returns {pb.CmdMncgExchangeReply} CmdMncgExchangeReply instance
         */
        CmdMncgExchangeReply.create = function create(properties) {
            return new CmdMncgExchangeReply(properties);
        };

        /**
         * Encodes the specified CmdMncgExchangeReply message. Does not implicitly {@link pb.CmdMncgExchangeReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {pb.ICmdMncgExchangeReply} message CmdMncgExchangeReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgExchangeReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.account);
            return writer;
        };

        /**
         * Encodes the specified CmdMncgExchangeReply message, length delimited. Does not implicitly {@link pb.CmdMncgExchangeReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {pb.ICmdMncgExchangeReply} message CmdMncgExchangeReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgExchangeReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdMncgExchangeReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdMncgExchangeReply} CmdMncgExchangeReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgExchangeReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdMncgExchangeReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.account = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdMncgExchangeReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdMncgExchangeReply} CmdMncgExchangeReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgExchangeReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdMncgExchangeReply message.
         * @function verify
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdMncgExchangeReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                if (typeof message.account !== "number")
                    return "account: number expected";
            return null;
        };

        /**
         * Creates a CmdMncgExchangeReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdMncgExchangeReply} CmdMncgExchangeReply
         */
        CmdMncgExchangeReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdMncgExchangeReply)
                return object;
            var message = new $root.pb.CmdMncgExchangeReply();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdMncgExchangeReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.account != null)
                message.account = Number(object.account);
            return message;
        };

        /**
         * Creates a plain object from a CmdMncgExchangeReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdMncgExchangeReply
         * @static
         * @param {pb.CmdMncgExchangeReply} message CmdMncgExchangeReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdMncgExchangeReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.account = 0;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = options.json && !isFinite(message.account) ? String(message.account) : message.account;
            return object;
        };

        /**
         * Converts this CmdMncgExchangeReply to JSON.
         * @function toJSON
         * @memberof pb.CmdMncgExchangeReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdMncgExchangeReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdMncgExchangeReply;
    })();

    pb.CmdMncgEditStock = (function () {

        /**
         * Properties of a CmdMncgEditStock.
         * @memberof pb
         * @interface ICmdMncgEditStock
         * @property {boolean|null} [removed] CmdMncgEditStock removed
         * @property {number|null} [code] CmdMncgEditStock code
         * @property {number|null} [id] CmdMncgEditStock id
         * @property {boolean|null} [isAiStock] CmdMncgEditStock isAiStock
         */

        /**
         * Constructs a new CmdMncgEditStock.
         * @memberof pb
         * @classdesc Represents a CmdMncgEditStock.
         * @implements ICmdMncgEditStock
         * @constructor
         * @param {pb.ICmdMncgEditStock=} [properties] Properties to set
         */
        function CmdMncgEditStock(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdMncgEditStock removed.
         * @member {boolean} removed
         * @memberof pb.CmdMncgEditStock
         * @instance
         */
        CmdMncgEditStock.prototype.removed = false;

        /**
         * CmdMncgEditStock code.
         * @member {number} code
         * @memberof pb.CmdMncgEditStock
         * @instance
         */
        CmdMncgEditStock.prototype.code = 0;

        /**
         * CmdMncgEditStock id.
         * @member {number} id
         * @memberof pb.CmdMncgEditStock
         * @instance
         */
        CmdMncgEditStock.prototype.id = 0;

        /**
         * CmdMncgEditStock isAiStock.
         * @member {boolean} isAiStock
         * @memberof pb.CmdMncgEditStock
         * @instance
         */
        CmdMncgEditStock.prototype.isAiStock = false;

        /**
         * Creates a new CmdMncgEditStock instance using the specified properties.
         * @function create
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {pb.ICmdMncgEditStock=} [properties] Properties to set
         * @returns {pb.CmdMncgEditStock} CmdMncgEditStock instance
         */
        CmdMncgEditStock.create = function create(properties) {
            return new CmdMncgEditStock(properties);
        };

        /**
         * Encodes the specified CmdMncgEditStock message. Does not implicitly {@link pb.CmdMncgEditStock.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {pb.ICmdMncgEditStock} message CmdMncgEditStock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgEditStock.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.removed != null && Object.hasOwnProperty.call(message, "removed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.removed);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.id);
            if (message.isAiStock != null && Object.hasOwnProperty.call(message, "isAiStock"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAiStock);
            return writer;
        };

        /**
         * Encodes the specified CmdMncgEditStock message, length delimited. Does not implicitly {@link pb.CmdMncgEditStock.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {pb.ICmdMncgEditStock} message CmdMncgEditStock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMncgEditStock.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdMncgEditStock message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdMncgEditStock} CmdMncgEditStock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgEditStock.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdMncgEditStock();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.removed = reader.bool();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.id = reader.int32();
                        break;
                    case 4:
                        message.isAiStock = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdMncgEditStock message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdMncgEditStock} CmdMncgEditStock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMncgEditStock.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdMncgEditStock message.
         * @function verify
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdMncgEditStock.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.removed != null && message.hasOwnProperty("removed"))
                if (typeof message.removed !== "boolean")
                    return "removed: boolean expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.isAiStock != null && message.hasOwnProperty("isAiStock"))
                if (typeof message.isAiStock !== "boolean")
                    return "isAiStock: boolean expected";
            return null;
        };

        /**
         * Creates a CmdMncgEditStock message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdMncgEditStock} CmdMncgEditStock
         */
        CmdMncgEditStock.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdMncgEditStock)
                return object;
            var message = new $root.pb.CmdMncgEditStock();
            if (object.removed != null)
                message.removed = Boolean(object.removed);
            if (object.code != null)
                message.code = object.code | 0;
            if (object.id != null)
                message.id = object.id | 0;
            if (object.isAiStock != null)
                message.isAiStock = Boolean(object.isAiStock);
            return message;
        };

        /**
         * Creates a plain object from a CmdMncgEditStock message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdMncgEditStock
         * @static
         * @param {pb.CmdMncgEditStock} message CmdMncgEditStock
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdMncgEditStock.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.removed = false;
                object.code = 0;
                object.id = 0;
                object.isAiStock = false;
            }
            if (message.removed != null && message.hasOwnProperty("removed"))
                object.removed = message.removed;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.isAiStock != null && message.hasOwnProperty("isAiStock"))
                object.isAiStock = message.isAiStock;
            return object;
        };

        /**
         * Converts this CmdMncgEditStock to JSON.
         * @function toJSON
         * @memberof pb.CmdMncgEditStock
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdMncgEditStock.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdMncgEditStock;
    })();

    pb.CmdQueryStockOrder = (function () {

        /**
         * Properties of a CmdQueryStockOrder.
         * @memberof pb
         * @interface ICmdQueryStockOrder
         * @property {number|null} [uid] CmdQueryStockOrder uid
         * @property {number|Long|null} [from] CmdQueryStockOrder from
         * @property {number|Long|null} [to] CmdQueryStockOrder to
         * @property {number|null} [pageSize] CmdQueryStockOrder pageSize
         * @property {number|Long|null} [orderId] CmdQueryStockOrder orderId
         * @property {number|null} [id] CmdQueryStockOrder id
         */

        /**
         * Constructs a new CmdQueryStockOrder.
         * @memberof pb
         * @classdesc Represents a CmdQueryStockOrder.
         * @implements ICmdQueryStockOrder
         * @constructor
         * @param {pb.ICmdQueryStockOrder=} [properties] Properties to set
         */
        function CmdQueryStockOrder(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryStockOrder uid.
         * @member {number} uid
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.uid = 0;

        /**
         * CmdQueryStockOrder from.
         * @member {number|Long} from
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryStockOrder to.
         * @member {number|Long} to
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryStockOrder pageSize.
         * @member {number} pageSize
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.pageSize = 0;

        /**
         * CmdQueryStockOrder orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryStockOrder id.
         * @member {number} id
         * @memberof pb.CmdQueryStockOrder
         * @instance
         */
        CmdQueryStockOrder.prototype.id = 0;

        /**
         * Creates a new CmdQueryStockOrder instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {pb.ICmdQueryStockOrder=} [properties] Properties to set
         * @returns {pb.CmdQueryStockOrder} CmdQueryStockOrder instance
         */
        CmdQueryStockOrder.create = function create(properties) {
            return new CmdQueryStockOrder(properties);
        };

        /**
         * Encodes the specified CmdQueryStockOrder message. Does not implicitly {@link pb.CmdQueryStockOrder.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {pb.ICmdQueryStockOrder} message CmdQueryStockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryStockOrder.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.to);
            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pageSize);
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.orderId);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdQueryStockOrder message, length delimited. Does not implicitly {@link pb.CmdQueryStockOrder.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {pb.ICmdQueryStockOrder} message CmdQueryStockOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryStockOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryStockOrder message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryStockOrder} CmdQueryStockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryStockOrder.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryStockOrder();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.from = reader.int64();
                        break;
                    case 3:
                        message.to = reader.int64();
                        break;
                    case 4:
                        message.pageSize = reader.int32();
                        break;
                    case 5:
                        message.orderId = reader.int64();
                        break;
                    case 6:
                        message.id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryStockOrder message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryStockOrder} CmdQueryStockOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryStockOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryStockOrder message.
         * @function verify
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryStockOrder.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                if (!$util.isInteger(message.pageSize))
                    return "pageSize: integer expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdQueryStockOrder message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryStockOrder} CmdQueryStockOrder
         */
        CmdQueryStockOrder.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryStockOrder)
                return object;
            var message = new $root.pb.CmdQueryStockOrder();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryStockOrder message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryStockOrder
         * @static
         * @param {pb.CmdQueryStockOrder} message CmdQueryStockOrder
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryStockOrder.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.pageSize = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.id = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdQueryStockOrder to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryStockOrder
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryStockOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryStockOrder;
    })();

    pb.CgdsConf = (function () {

        /**
         * Properties of a CgdsConf.
         * @memberof pb
         * @interface ICgdsConf
         * @property {number|null} [id] CgdsConf id
         * @property {number|Long|null} [regTo] CgdsConf regTo
         * @property {number|Long|null} [from] CgdsConf from
         * @property {number|Long|null} [to] CgdsConf to
         * @property {string|null} [conf] CgdsConf conf
         * @property {string|null} [award] CgdsConf award
         * @property {number|null} [status] CgdsConf status
         * @property {string|null} [title] CgdsConf title
         * @property {string|null} [logo] CgdsConf logo
         * @property {string|null} [url] CgdsConf url
         */

        /**
         * Constructs a new CgdsConf.
         * @memberof pb
         * @classdesc Represents a CgdsConf.
         * @implements ICgdsConf
         * @constructor
         * @param {pb.ICgdsConf=} [properties] Properties to set
         */
        function CgdsConf(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgdsConf id.
         * @member {number} id
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.id = 0;

        /**
         * CgdsConf regTo.
         * @member {number|Long} regTo
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.regTo = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgdsConf from.
         * @member {number|Long} from
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgdsConf to.
         * @member {number|Long} to
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CgdsConf conf.
         * @member {string} conf
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.conf = "";

        /**
         * CgdsConf award.
         * @member {string} award
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.award = "";

        /**
         * CgdsConf status.
         * @member {number} status
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.status = 0;

        /**
         * CgdsConf title.
         * @member {string} title
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.title = "";

        /**
         * CgdsConf logo.
         * @member {string} logo
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.logo = "";

        /**
         * CgdsConf url.
         * @member {string} url
         * @memberof pb.CgdsConf
         * @instance
         */
        CgdsConf.prototype.url = "";

        /**
         * Creates a new CgdsConf instance using the specified properties.
         * @function create
         * @memberof pb.CgdsConf
         * @static
         * @param {pb.ICgdsConf=} [properties] Properties to set
         * @returns {pb.CgdsConf} CgdsConf instance
         */
        CgdsConf.create = function create(properties) {
            return new CgdsConf(properties);
        };

        /**
         * Encodes the specified CgdsConf message. Does not implicitly {@link pb.CgdsConf.verify|verify} messages.
         * @function encode
         * @memberof pb.CgdsConf
         * @static
         * @param {pb.ICgdsConf} message CgdsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsConf.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.regTo != null && Object.hasOwnProperty.call(message, "regTo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.regTo);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.to);
            if (message.conf != null && Object.hasOwnProperty.call(message, "conf"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.conf);
            if (message.award != null && Object.hasOwnProperty.call(message, "award"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.award);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.status);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.title);
            if (message.logo != null && Object.hasOwnProperty.call(message, "logo"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.logo);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.url);
            return writer;
        };

        /**
         * Encodes the specified CgdsConf message, length delimited. Does not implicitly {@link pb.CgdsConf.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgdsConf
         * @static
         * @param {pb.ICgdsConf} message CgdsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsConf.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgdsConf message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgdsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgdsConf} CgdsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsConf.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgdsConf();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.regTo = reader.int64();
                        break;
                    case 3:
                        message.from = reader.int64();
                        break;
                    case 4:
                        message.to = reader.int64();
                        break;
                    case 5:
                        message.conf = reader.string();
                        break;
                    case 6:
                        message.award = reader.string();
                        break;
                    case 7:
                        message.status = reader.int32();
                        break;
                    case 8:
                        message.title = reader.string();
                        break;
                    case 9:
                        message.logo = reader.string();
                        break;
                    case 10:
                        message.url = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgdsConf message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgdsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgdsConf} CgdsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsConf.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgdsConf message.
         * @function verify
         * @memberof pb.CgdsConf
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgdsConf.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.regTo != null && message.hasOwnProperty("regTo"))
                if (!$util.isInteger(message.regTo) && !(message.regTo && $util.isInteger(message.regTo.low) && $util.isInteger(message.regTo.high)))
                    return "regTo: integer|Long expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.conf != null && message.hasOwnProperty("conf"))
                if (!$util.isString(message.conf))
                    return "conf: string expected";
            if (message.award != null && message.hasOwnProperty("award"))
                if (!$util.isString(message.award))
                    return "award: string expected";
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.logo != null && message.hasOwnProperty("logo"))
                if (!$util.isString(message.logo))
                    return "logo: string expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };

        /**
         * Creates a CgdsConf message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgdsConf
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgdsConf} CgdsConf
         */
        CgdsConf.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgdsConf)
                return object;
            var message = new $root.pb.CgdsConf();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.regTo != null)
                if ($util.Long)
                    (message.regTo = $util.Long.fromValue(object.regTo)).unsigned = false;
                else if (typeof object.regTo === "string")
                    message.regTo = parseInt(object.regTo, 10);
                else if (typeof object.regTo === "number")
                    message.regTo = object.regTo;
                else if (typeof object.regTo === "object")
                    message.regTo = new $util.LongBits(object.regTo.low >>> 0, object.regTo.high >>> 0).toNumber();
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.conf != null)
                message.conf = String(object.conf);
            if (object.award != null)
                message.award = String(object.award);
            if (object.status != null)
                message.status = object.status | 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.logo != null)
                message.logo = String(object.logo);
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };

        /**
         * Creates a plain object from a CgdsConf message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgdsConf
         * @static
         * @param {pb.CgdsConf} message CgdsConf
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgdsConf.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.regTo = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.regTo = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.conf = "";
                object.award = "";
                object.status = 0;
                object.title = "";
                object.logo = "";
                object.url = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.regTo != null && message.hasOwnProperty("regTo"))
                if (typeof message.regTo === "number")
                    object.regTo = options.longs === String ? String(message.regTo) : message.regTo;
                else
                    object.regTo = options.longs === String ? $util.Long.prototype.toString.call(message.regTo) : options.longs === Number ? new $util.LongBits(message.regTo.low >>> 0, message.regTo.high >>> 0).toNumber() : message.regTo;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.conf != null && message.hasOwnProperty("conf"))
                object.conf = message.conf;
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = message.award;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.logo != null && message.hasOwnProperty("logo"))
                object.logo = message.logo;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };

        /**
         * Converts this CgdsConf to JSON.
         * @function toJSON
         * @memberof pb.CgdsConf
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgdsConf.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgdsConf;
    })();

    pb.CgdsList = (function () {

        /**
         * Properties of a CgdsList.
         * @memberof pb
         * @interface ICgdsList
         * @property {Array.<pb.ICgdsConf>|null} [items] CgdsList items
         */

        /**
         * Constructs a new CgdsList.
         * @memberof pb
         * @classdesc Represents a CgdsList.
         * @implements ICgdsList
         * @constructor
         * @param {pb.ICgdsList=} [properties] Properties to set
         */
        function CgdsList(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CgdsList items.
         * @member {Array.<pb.ICgdsConf>} items
         * @memberof pb.CgdsList
         * @instance
         */
        CgdsList.prototype.items = $util.emptyArray;

        /**
         * Creates a new CgdsList instance using the specified properties.
         * @function create
         * @memberof pb.CgdsList
         * @static
         * @param {pb.ICgdsList=} [properties] Properties to set
         * @returns {pb.CgdsList} CgdsList instance
         */
        CgdsList.create = function create(properties) {
            return new CgdsList(properties);
        };

        /**
         * Encodes the specified CgdsList message. Does not implicitly {@link pb.CgdsList.verify|verify} messages.
         * @function encode
         * @memberof pb.CgdsList
         * @static
         * @param {pb.ICgdsList} message CgdsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.CgdsConf.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CgdsList message, length delimited. Does not implicitly {@link pb.CgdsList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CgdsList
         * @static
         * @param {pb.ICgdsList} message CgdsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CgdsList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CgdsList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CgdsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CgdsList} CgdsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CgdsList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.CgdsConf.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CgdsList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CgdsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CgdsList} CgdsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CgdsList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CgdsList message.
         * @function verify
         * @memberof pb.CgdsList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CgdsList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.CgdsConf.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CgdsList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CgdsList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CgdsList} CgdsList
         */
        CgdsList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CgdsList)
                return object;
            var message = new $root.pb.CgdsList();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.CgdsList.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.CgdsList.items: object expected");
                    message.items[i] = $root.pb.CgdsConf.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CgdsList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CgdsList
         * @static
         * @param {pb.CgdsList} message CgdsList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CgdsList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.CgdsConf.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CgdsList to JSON.
         * @function toJSON
         * @memberof pb.CgdsList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CgdsList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CgdsList;
    })();

    pb.CmdCgdsReg = (function () {

        /**
         * Properties of a CmdCgdsReg.
         * @memberof pb
         * @interface ICmdCgdsReg
         * @property {number|null} [id] CmdCgdsReg id
         */

        /**
         * Constructs a new CmdCgdsReg.
         * @memberof pb
         * @classdesc Represents a CmdCgdsReg.
         * @implements ICmdCgdsReg
         * @constructor
         * @param {pb.ICmdCgdsReg=} [properties] Properties to set
         */
        function CmdCgdsReg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgdsReg id.
         * @member {number} id
         * @memberof pb.CmdCgdsReg
         * @instance
         */
        CmdCgdsReg.prototype.id = 0;

        /**
         * Creates a new CmdCgdsReg instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {pb.ICmdCgdsReg=} [properties] Properties to set
         * @returns {pb.CmdCgdsReg} CmdCgdsReg instance
         */
        CmdCgdsReg.create = function create(properties) {
            return new CmdCgdsReg(properties);
        };

        /**
         * Encodes the specified CmdCgdsReg message. Does not implicitly {@link pb.CmdCgdsReg.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {pb.ICmdCgdsReg} message CmdCgdsReg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsReg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdCgdsReg message, length delimited. Does not implicitly {@link pb.CmdCgdsReg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {pb.ICmdCgdsReg} message CmdCgdsReg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsReg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgdsReg message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgdsReg} CmdCgdsReg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsReg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgdsReg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgdsReg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgdsReg} CmdCgdsReg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsReg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgdsReg message.
         * @function verify
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgdsReg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdCgdsReg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgdsReg} CmdCgdsReg
         */
        CmdCgdsReg.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgdsReg)
                return object;
            var message = new $root.pb.CmdCgdsReg();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdCgdsReg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgdsReg
         * @static
         * @param {pb.CmdCgdsReg} message CmdCgdsReg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgdsReg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdCgdsReg to JSON.
         * @function toJSON
         * @memberof pb.CmdCgdsReg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgdsReg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgdsReg;
    })();

    pb.CmdCgdsRegReply = (function () {

        /**
         * Properties of a CmdCgdsRegReply.
         * @memberof pb
         * @interface ICmdCgdsRegReply
         * @property {pb.IErrorInfo|null} [result] CmdCgdsRegReply result
         * @property {pb.ICgdsStateItem|null} [cgdsStateItem] CmdCgdsRegReply cgdsStateItem
         */

        /**
         * Constructs a new CmdCgdsRegReply.
         * @memberof pb
         * @classdesc Represents a CmdCgdsRegReply.
         * @implements ICmdCgdsRegReply
         * @constructor
         * @param {pb.ICmdCgdsRegReply=} [properties] Properties to set
         */
        function CmdCgdsRegReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgdsRegReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdCgdsRegReply
         * @instance
         */
        CmdCgdsRegReply.prototype.result = null;

        /**
         * CmdCgdsRegReply cgdsStateItem.
         * @member {pb.ICgdsStateItem|null|undefined} cgdsStateItem
         * @memberof pb.CmdCgdsRegReply
         * @instance
         */
        CmdCgdsRegReply.prototype.cgdsStateItem = null;

        /**
         * Creates a new CmdCgdsRegReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {pb.ICmdCgdsRegReply=} [properties] Properties to set
         * @returns {pb.CmdCgdsRegReply} CmdCgdsRegReply instance
         */
        CmdCgdsRegReply.create = function create(properties) {
            return new CmdCgdsRegReply(properties);
        };

        /**
         * Encodes the specified CmdCgdsRegReply message. Does not implicitly {@link pb.CmdCgdsRegReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {pb.ICmdCgdsRegReply} message CmdCgdsRegReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsRegReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.cgdsStateItem != null && Object.hasOwnProperty.call(message, "cgdsStateItem"))
                $root.pb.CgdsStateItem.encode(message.cgdsStateItem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdCgdsRegReply message, length delimited. Does not implicitly {@link pb.CmdCgdsRegReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {pb.ICmdCgdsRegReply} message CmdCgdsRegReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsRegReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgdsRegReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgdsRegReply} CmdCgdsRegReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsRegReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgdsRegReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.cgdsStateItem = $root.pb.CgdsStateItem.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgdsRegReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgdsRegReply} CmdCgdsRegReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsRegReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgdsRegReply message.
         * @function verify
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgdsRegReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.cgdsStateItem != null && message.hasOwnProperty("cgdsStateItem")) {
                var error = $root.pb.CgdsStateItem.verify(message.cgdsStateItem);
                if (error)
                    return "cgdsStateItem." + error;
            }
            return null;
        };

        /**
         * Creates a CmdCgdsRegReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgdsRegReply} CmdCgdsRegReply
         */
        CmdCgdsRegReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgdsRegReply)
                return object;
            var message = new $root.pb.CmdCgdsRegReply();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdCgdsRegReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.cgdsStateItem != null) {
                if (typeof object.cgdsStateItem !== "object")
                    throw TypeError(".pb.CmdCgdsRegReply.cgdsStateItem: object expected");
                message.cgdsStateItem = $root.pb.CgdsStateItem.fromObject(object.cgdsStateItem);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdCgdsRegReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgdsRegReply
         * @static
         * @param {pb.CmdCgdsRegReply} message CmdCgdsRegReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgdsRegReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.cgdsStateItem = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.cgdsStateItem != null && message.hasOwnProperty("cgdsStateItem"))
                object.cgdsStateItem = $root.pb.CgdsStateItem.toObject(message.cgdsStateItem, options);
            return object;
        };

        /**
         * Converts this CmdCgdsRegReply to JSON.
         * @function toJSON
         * @memberof pb.CmdCgdsRegReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgdsRegReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgdsRegReply;
    })();

    pb.CmdCgdsRanking = (function () {

        /**
         * Properties of a CmdCgdsRanking.
         * @memberof pb
         * @interface ICmdCgdsRanking
         * @property {number|null} [id] CmdCgdsRanking id
         */

        /**
         * Constructs a new CmdCgdsRanking.
         * @memberof pb
         * @classdesc Represents a CmdCgdsRanking.
         * @implements ICmdCgdsRanking
         * @constructor
         * @param {pb.ICmdCgdsRanking=} [properties] Properties to set
         */
        function CmdCgdsRanking(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgdsRanking id.
         * @member {number} id
         * @memberof pb.CmdCgdsRanking
         * @instance
         */
        CmdCgdsRanking.prototype.id = 0;

        /**
         * Creates a new CmdCgdsRanking instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {pb.ICmdCgdsRanking=} [properties] Properties to set
         * @returns {pb.CmdCgdsRanking} CmdCgdsRanking instance
         */
        CmdCgdsRanking.create = function create(properties) {
            return new CmdCgdsRanking(properties);
        };

        /**
         * Encodes the specified CmdCgdsRanking message. Does not implicitly {@link pb.CmdCgdsRanking.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {pb.ICmdCgdsRanking} message CmdCgdsRanking message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsRanking.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdCgdsRanking message, length delimited. Does not implicitly {@link pb.CmdCgdsRanking.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {pb.ICmdCgdsRanking} message CmdCgdsRanking message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgdsRanking.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgdsRanking message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgdsRanking} CmdCgdsRanking
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsRanking.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgdsRanking();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgdsRanking message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgdsRanking} CmdCgdsRanking
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgdsRanking.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgdsRanking message.
         * @function verify
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgdsRanking.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdCgdsRanking message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgdsRanking} CmdCgdsRanking
         */
        CmdCgdsRanking.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgdsRanking)
                return object;
            var message = new $root.pb.CmdCgdsRanking();
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdCgdsRanking message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgdsRanking
         * @static
         * @param {pb.CmdCgdsRanking} message CmdCgdsRanking
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgdsRanking.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdCgdsRanking to JSON.
         * @function toJSON
         * @memberof pb.CmdCgdsRanking
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgdsRanking.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgdsRanking;
    })();

    /**
     * PriceType enum.
     * @name pb.PriceType
     * @enum {number}
     * @property {number} PriceType_NULL=0 PriceType_NULL value
     * @property {number} Open=1 Open value
     * @property {number} Close=2 Close value
     * @property {number} High=3 High value
     * @property {number} Low=4 Low value
     */
    pb.PriceType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PriceType_NULL"] = 0;
        values[valuesById[1] = "Open"] = 1;
        values[valuesById[2] = "Close"] = 2;
        values[valuesById[3] = "High"] = 3;
        values[valuesById[4] = "Low"] = 4;
        return values;
    })();

    /**
     * ZsjcGameType enum.
     * @name pb.ZsjcGameType
     * @enum {number}
     * @property {number} kpjc=0 kpjc value
     * @property {number} drjc=1 drjc value
     * @property {number} spjc=2 spjc value
     */
    pb.ZsjcGameType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "kpjc"] = 0;
        values[valuesById[1] = "drjc"] = 1;
        values[valuesById[2] = "spjc"] = 2;
        return values;
    })();

    pb.ZsjcOption = (function () {

        /**
         * Properties of a ZsjcOption.
         * @memberof pb
         * @interface IZsjcOption
         * @property {number|Long|null} [ts] ZsjcOption ts
         * @property {pb.PriceType|null} [pt] ZsjcOption pt
         * @property {number|null} [money] ZsjcOption money
         */

        /**
         * Constructs a new ZsjcOption.
         * @memberof pb
         * @classdesc Represents a ZsjcOption.
         * @implements IZsjcOption
         * @constructor
         * @param {pb.IZsjcOption=} [properties] Properties to set
         */
        function ZsjcOption(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcOption ts.
         * @member {number|Long} ts
         * @memberof pb.ZsjcOption
         * @instance
         */
        ZsjcOption.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * ZsjcOption pt.
         * @member {pb.PriceType} pt
         * @memberof pb.ZsjcOption
         * @instance
         */
        ZsjcOption.prototype.pt = 0;

        /**
         * ZsjcOption money.
         * @member {number} money
         * @memberof pb.ZsjcOption
         * @instance
         */
        ZsjcOption.prototype.money = 0;

        /**
         * Creates a new ZsjcOption instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcOption
         * @static
         * @param {pb.IZsjcOption=} [properties] Properties to set
         * @returns {pb.ZsjcOption} ZsjcOption instance
         */
        ZsjcOption.create = function create(properties) {
            return new ZsjcOption(properties);
        };

        /**
         * Encodes the specified ZsjcOption message. Does not implicitly {@link pb.ZsjcOption.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcOption
         * @static
         * @param {pb.IZsjcOption} message ZsjcOption message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcOption.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
            if (message.pt != null && Object.hasOwnProperty.call(message, "pt"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pt);
            if (message.money != null && Object.hasOwnProperty.call(message, "money"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.money);
            return writer;
        };

        /**
         * Encodes the specified ZsjcOption message, length delimited. Does not implicitly {@link pb.ZsjcOption.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcOption
         * @static
         * @param {pb.IZsjcOption} message ZsjcOption message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcOption.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcOption message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcOption
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcOption} ZsjcOption
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcOption.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcOption();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ts = reader.int64();
                        break;
                    case 2:
                        message.pt = reader.int32();
                        break;
                    case 3:
                        message.money = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcOption message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcOption
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcOption} ZsjcOption
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcOption.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcOption message.
         * @function verify
         * @memberof pb.ZsjcOption
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcOption.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.pt != null && message.hasOwnProperty("pt"))
                switch (message.pt) {
                    default:
                        return "pt: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                }
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            return null;
        };

        /**
         * Creates a ZsjcOption message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcOption
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcOption} ZsjcOption
         */
        ZsjcOption.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcOption)
                return object;
            var message = new $root.pb.ZsjcOption();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            switch (object.pt) {
                case "PriceType_NULL":
                case 0:
                    message.pt = 0;
                    break;
                case "Open":
                case 1:
                    message.pt = 1;
                    break;
                case "Close":
                case 2:
                    message.pt = 2;
                    break;
                case "High":
                case 3:
                    message.pt = 3;
                    break;
                case "Low":
                case 4:
                    message.pt = 4;
                    break;
            }
            if (object.money != null)
                message.money = object.money | 0;
            return message;
        };

        /**
         * Creates a plain object from a ZsjcOption message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcOption
         * @static
         * @param {pb.ZsjcOption} message ZsjcOption
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcOption.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.pt = options.enums === String ? "PriceType_NULL" : 0;
                object.money = 0;
            }
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.pt != null && message.hasOwnProperty("pt"))
                object.pt = options.enums === String ? $root.pb.PriceType[message.pt] : message.pt;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            return object;
        };

        /**
         * Converts this ZsjcOption to JSON.
         * @function toJSON
         * @memberof pb.ZsjcOption
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcOption.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcOption;
    })();

    pb.ZsjcGameData = (function () {

        /**
         * Properties of a ZsjcGameData.
         * @memberof pb
         * @interface IZsjcGameData
         * @property {pb.ZsjcGameType|null} [gameType] ZsjcGameData gameType
         * @property {number|null} [code] ZsjcGameData code
         * @property {number|Long|null} [tsSettling] ZsjcGameData tsSettling
         * @property {boolean|null} [settled] ZsjcGameData settled
         * @property {pb.IZsjcOption|null} [first] ZsjcGameData first
         * @property {pb.IZsjcOption|null} [second] ZsjcGameData second
         */

        /**
         * Constructs a new ZsjcGameData.
         * @memberof pb
         * @classdesc Represents a ZsjcGameData.
         * @implements IZsjcGameData
         * @constructor
         * @param {pb.IZsjcGameData=} [properties] Properties to set
         */
        function ZsjcGameData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcGameData gameType.
         * @member {pb.ZsjcGameType} gameType
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.gameType = 0;

        /**
         * ZsjcGameData code.
         * @member {number} code
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.code = 0;

        /**
         * ZsjcGameData tsSettling.
         * @member {number|Long} tsSettling
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.tsSettling = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * ZsjcGameData settled.
         * @member {boolean} settled
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.settled = false;

        /**
         * ZsjcGameData first.
         * @member {pb.IZsjcOption|null|undefined} first
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.first = null;

        /**
         * ZsjcGameData second.
         * @member {pb.IZsjcOption|null|undefined} second
         * @memberof pb.ZsjcGameData
         * @instance
         */
        ZsjcGameData.prototype.second = null;

        /**
         * Creates a new ZsjcGameData instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcGameData
         * @static
         * @param {pb.IZsjcGameData=} [properties] Properties to set
         * @returns {pb.ZsjcGameData} ZsjcGameData instance
         */
        ZsjcGameData.create = function create(properties) {
            return new ZsjcGameData(properties);
        };

        /**
         * Encodes the specified ZsjcGameData message. Does not implicitly {@link pb.ZsjcGameData.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcGameData
         * @static
         * @param {pb.IZsjcGameData} message ZsjcGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcGameData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameType != null && Object.hasOwnProperty.call(message, "gameType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameType);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.tsSettling != null && Object.hasOwnProperty.call(message, "tsSettling"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.tsSettling);
            if (message.settled != null && Object.hasOwnProperty.call(message, "settled"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.settled);
            if (message.first != null && Object.hasOwnProperty.call(message, "first"))
                $root.pb.ZsjcOption.encode(message.first, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.second != null && Object.hasOwnProperty.call(message, "second"))
                $root.pb.ZsjcOption.encode(message.second, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ZsjcGameData message, length delimited. Does not implicitly {@link pb.ZsjcGameData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcGameData
         * @static
         * @param {pb.IZsjcGameData} message ZsjcGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcGameData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcGameData message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcGameData} ZsjcGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcGameData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcGameData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.gameType = reader.int32();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.tsSettling = reader.int64();
                        break;
                    case 4:
                        message.settled = reader.bool();
                        break;
                    case 5:
                        message.first = $root.pb.ZsjcOption.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.second = $root.pb.ZsjcOption.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcGameData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcGameData} ZsjcGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcGameData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcGameData message.
         * @function verify
         * @memberof pb.ZsjcGameData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcGameData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                switch (message.gameType) {
                    default:
                        return "gameType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.tsSettling != null && message.hasOwnProperty("tsSettling"))
                if (!$util.isInteger(message.tsSettling) && !(message.tsSettling && $util.isInteger(message.tsSettling.low) && $util.isInteger(message.tsSettling.high)))
                    return "tsSettling: integer|Long expected";
            if (message.settled != null && message.hasOwnProperty("settled"))
                if (typeof message.settled !== "boolean")
                    return "settled: boolean expected";
            if (message.first != null && message.hasOwnProperty("first")) {
                var error = $root.pb.ZsjcOption.verify(message.first);
                if (error)
                    return "first." + error;
            }
            if (message.second != null && message.hasOwnProperty("second")) {
                var error = $root.pb.ZsjcOption.verify(message.second);
                if (error)
                    return "second." + error;
            }
            return null;
        };

        /**
         * Creates a ZsjcGameData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcGameData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcGameData} ZsjcGameData
         */
        ZsjcGameData.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcGameData)
                return object;
            var message = new $root.pb.ZsjcGameData();
            switch (object.gameType) {
                case "kpjc":
                case 0:
                    message.gameType = 0;
                    break;
                case "drjc":
                case 1:
                    message.gameType = 1;
                    break;
                case "spjc":
                case 2:
                    message.gameType = 2;
                    break;
            }
            if (object.code != null)
                message.code = object.code | 0;
            if (object.tsSettling != null)
                if ($util.Long)
                    (message.tsSettling = $util.Long.fromValue(object.tsSettling)).unsigned = false;
                else if (typeof object.tsSettling === "string")
                    message.tsSettling = parseInt(object.tsSettling, 10);
                else if (typeof object.tsSettling === "number")
                    message.tsSettling = object.tsSettling;
                else if (typeof object.tsSettling === "object")
                    message.tsSettling = new $util.LongBits(object.tsSettling.low >>> 0, object.tsSettling.high >>> 0).toNumber();
            if (object.settled != null)
                message.settled = Boolean(object.settled);
            if (object.first != null) {
                if (typeof object.first !== "object")
                    throw TypeError(".pb.ZsjcGameData.first: object expected");
                message.first = $root.pb.ZsjcOption.fromObject(object.first);
            }
            if (object.second != null) {
                if (typeof object.second !== "object")
                    throw TypeError(".pb.ZsjcGameData.second: object expected");
                message.second = $root.pb.ZsjcOption.fromObject(object.second);
            }
            return message;
        };

        /**
         * Creates a plain object from a ZsjcGameData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcGameData
         * @static
         * @param {pb.ZsjcGameData} message ZsjcGameData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcGameData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameType = options.enums === String ? "kpjc" : 0;
                object.code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsSettling = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsSettling = options.longs === String ? "0" : 0;
                object.settled = false;
                object.first = null;
                object.second = null;
            }
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                object.gameType = options.enums === String ? $root.pb.ZsjcGameType[message.gameType] : message.gameType;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.tsSettling != null && message.hasOwnProperty("tsSettling"))
                if (typeof message.tsSettling === "number")
                    object.tsSettling = options.longs === String ? String(message.tsSettling) : message.tsSettling;
                else
                    object.tsSettling = options.longs === String ? $util.Long.prototype.toString.call(message.tsSettling) : options.longs === Number ? new $util.LongBits(message.tsSettling.low >>> 0, message.tsSettling.high >>> 0).toNumber() : message.tsSettling;
            if (message.settled != null && message.hasOwnProperty("settled"))
                object.settled = message.settled;
            if (message.first != null && message.hasOwnProperty("first"))
                object.first = $root.pb.ZsjcOption.toObject(message.first, options);
            if (message.second != null && message.hasOwnProperty("second"))
                object.second = $root.pb.ZsjcOption.toObject(message.second, options);
            return object;
        };

        /**
         * Converts this ZsjcGameData to JSON.
         * @function toJSON
         * @memberof pb.ZsjcGameData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcGameData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcGameData;
    })();

    pb.ZsjcGameList = (function () {

        /**
         * Properties of a ZsjcGameList.
         * @memberof pb
         * @interface IZsjcGameList
         * @property {Array.<pb.IZsjcGameData>|null} [items] ZsjcGameList items
         */

        /**
         * Constructs a new ZsjcGameList.
         * @memberof pb
         * @classdesc Represents a ZsjcGameList.
         * @implements IZsjcGameList
         * @constructor
         * @param {pb.IZsjcGameList=} [properties] Properties to set
         */
        function ZsjcGameList(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcGameList items.
         * @member {Array.<pb.IZsjcGameData>} items
         * @memberof pb.ZsjcGameList
         * @instance
         */
        ZsjcGameList.prototype.items = $util.emptyArray;

        /**
         * Creates a new ZsjcGameList instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcGameList
         * @static
         * @param {pb.IZsjcGameList=} [properties] Properties to set
         * @returns {pb.ZsjcGameList} ZsjcGameList instance
         */
        ZsjcGameList.create = function create(properties) {
            return new ZsjcGameList(properties);
        };

        /**
         * Encodes the specified ZsjcGameList message. Does not implicitly {@link pb.ZsjcGameList.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcGameList
         * @static
         * @param {pb.IZsjcGameList} message ZsjcGameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcGameList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.ZsjcGameData.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ZsjcGameList message, length delimited. Does not implicitly {@link pb.ZsjcGameList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcGameList
         * @static
         * @param {pb.IZsjcGameList} message ZsjcGameList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcGameList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcGameList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcGameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcGameList} ZsjcGameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcGameList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcGameList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.ZsjcGameData.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcGameList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcGameList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcGameList} ZsjcGameList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcGameList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcGameList message.
         * @function verify
         * @memberof pb.ZsjcGameList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcGameList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.ZsjcGameData.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ZsjcGameList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcGameList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcGameList} ZsjcGameList
         */
        ZsjcGameList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcGameList)
                return object;
            var message = new $root.pb.ZsjcGameList();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.ZsjcGameList.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.ZsjcGameList.items: object expected");
                    message.items[i] = $root.pb.ZsjcGameData.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ZsjcGameList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcGameList
         * @static
         * @param {pb.ZsjcGameList} message ZsjcGameList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcGameList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.ZsjcGameData.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ZsjcGameList to JSON.
         * @function toJSON
         * @memberof pb.ZsjcGameList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcGameList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcGameList;
    })();

    pb.CmdBet = (function () {

        /**
         * Properties of a CmdBet.
         * @memberof pb
         * @interface ICmdBet
         * @property {number|null} [uid] CmdBet uid
         * @property {number|null} [money] CmdBet money
         * @property {number|null} [gameIndex] CmdBet gameIndex
         * @property {number|null} [betting] CmdBet betting
         * @property {string|null} [nickname] CmdBet nickname
         * @property {string|null} [icon] CmdBet icon
         * @property {string|null} [gender] CmdBet gender
         */

        /**
         * Constructs a new CmdBet.
         * @memberof pb
         * @classdesc Represents a CmdBet.
         * @implements ICmdBet
         * @constructor
         * @param {pb.ICmdBet=} [properties] Properties to set
         */
        function CmdBet(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdBet uid.
         * @member {number} uid
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.uid = 0;

        /**
         * CmdBet money.
         * @member {number} money
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.money = 0;

        /**
         * CmdBet gameIndex.
         * @member {number} gameIndex
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.gameIndex = 0;

        /**
         * CmdBet betting.
         * @member {number} betting
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.betting = 0;

        /**
         * CmdBet nickname.
         * @member {string} nickname
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.nickname = "";

        /**
         * CmdBet icon.
         * @member {string} icon
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.icon = "";

        /**
         * CmdBet gender.
         * @member {string} gender
         * @memberof pb.CmdBet
         * @instance
         */
        CmdBet.prototype.gender = "";

        /**
         * Creates a new CmdBet instance using the specified properties.
         * @function create
         * @memberof pb.CmdBet
         * @static
         * @param {pb.ICmdBet=} [properties] Properties to set
         * @returns {pb.CmdBet} CmdBet instance
         */
        CmdBet.create = function create(properties) {
            return new CmdBet(properties);
        };

        /**
         * Encodes the specified CmdBet message. Does not implicitly {@link pb.CmdBet.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdBet
         * @static
         * @param {pb.ICmdBet} message CmdBet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdBet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.money != null && Object.hasOwnProperty.call(message, "money"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.money);
            if (message.gameIndex != null && Object.hasOwnProperty.call(message, "gameIndex"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameIndex);
            if (message.betting != null && Object.hasOwnProperty.call(message, "betting"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.betting);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.nickname);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.icon);
            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.gender);
            return writer;
        };

        /**
         * Encodes the specified CmdBet message, length delimited. Does not implicitly {@link pb.CmdBet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdBet
         * @static
         * @param {pb.ICmdBet} message CmdBet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdBet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdBet message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdBet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdBet} CmdBet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdBet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdBet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.money = reader.int32();
                        break;
                    case 3:
                        message.gameIndex = reader.int32();
                        break;
                    case 4:
                        message.betting = reader.int32();
                        break;
                    case 5:
                        message.nickname = reader.string();
                        break;
                    case 6:
                        message.icon = reader.string();
                        break;
                    case 7:
                        message.gender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdBet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdBet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdBet} CmdBet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdBet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdBet message.
         * @function verify
         * @memberof pb.CmdBet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdBet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            if (message.gameIndex != null && message.hasOwnProperty("gameIndex"))
                if (!$util.isInteger(message.gameIndex))
                    return "gameIndex: integer expected";
            if (message.betting != null && message.hasOwnProperty("betting"))
                if (!$util.isInteger(message.betting))
                    return "betting: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (!$util.isString(message.gender))
                    return "gender: string expected";
            return null;
        };

        /**
         * Creates a CmdBet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdBet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdBet} CmdBet
         */
        CmdBet.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdBet)
                return object;
            var message = new $root.pb.CmdBet();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.money != null)
                message.money = object.money | 0;
            if (object.gameIndex != null)
                message.gameIndex = object.gameIndex | 0;
            if (object.betting != null)
                message.betting = object.betting | 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.gender != null)
                message.gender = String(object.gender);
            return message;
        };

        /**
         * Creates a plain object from a CmdBet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdBet
         * @static
         * @param {pb.CmdBet} message CmdBet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdBet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.money = 0;
                object.gameIndex = 0;
                object.betting = 0;
                object.nickname = "";
                object.icon = "";
                object.gender = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            if (message.gameIndex != null && message.hasOwnProperty("gameIndex"))
                object.gameIndex = message.gameIndex;
            if (message.betting != null && message.hasOwnProperty("betting"))
                object.betting = message.betting;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            return object;
        };

        /**
         * Converts this CmdBet to JSON.
         * @function toJSON
         * @memberof pb.CmdBet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdBet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdBet;
    })();

    pb.CmdZsjcPlayerBettingList = (function () {

        /**
         * Properties of a CmdZsjcPlayerBettingList.
         * @memberof pb
         * @interface ICmdZsjcPlayerBettingList
         * @property {number|null} [code] CmdZsjcPlayerBettingList code
         * @property {number|null} [gametype] CmdZsjcPlayerBettingList gametype
         */

        /**
         * Constructs a new CmdZsjcPlayerBettingList.
         * @memberof pb
         * @classdesc Represents a CmdZsjcPlayerBettingList.
         * @implements ICmdZsjcPlayerBettingList
         * @constructor
         * @param {pb.ICmdZsjcPlayerBettingList=} [properties] Properties to set
         */
        function CmdZsjcPlayerBettingList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdZsjcPlayerBettingList code.
         * @member {number} code
         * @memberof pb.CmdZsjcPlayerBettingList
         * @instance
         */
        CmdZsjcPlayerBettingList.prototype.code = 0;

        /**
         * CmdZsjcPlayerBettingList gametype.
         * @member {number} gametype
         * @memberof pb.CmdZsjcPlayerBettingList
         * @instance
         */
        CmdZsjcPlayerBettingList.prototype.gametype = 0;

        /**
         * Creates a new CmdZsjcPlayerBettingList instance using the specified properties.
         * @function create
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {pb.ICmdZsjcPlayerBettingList=} [properties] Properties to set
         * @returns {pb.CmdZsjcPlayerBettingList} CmdZsjcPlayerBettingList instance
         */
        CmdZsjcPlayerBettingList.create = function create(properties) {
            return new CmdZsjcPlayerBettingList(properties);
        };

        /**
         * Encodes the specified CmdZsjcPlayerBettingList message. Does not implicitly {@link pb.CmdZsjcPlayerBettingList.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {pb.ICmdZsjcPlayerBettingList} message CmdZsjcPlayerBettingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdZsjcPlayerBettingList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.gametype != null && Object.hasOwnProperty.call(message, "gametype"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gametype);
            return writer;
        };

        /**
         * Encodes the specified CmdZsjcPlayerBettingList message, length delimited. Does not implicitly {@link pb.CmdZsjcPlayerBettingList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {pb.ICmdZsjcPlayerBettingList} message CmdZsjcPlayerBettingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdZsjcPlayerBettingList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdZsjcPlayerBettingList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdZsjcPlayerBettingList} CmdZsjcPlayerBettingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdZsjcPlayerBettingList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdZsjcPlayerBettingList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.gametype = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdZsjcPlayerBettingList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdZsjcPlayerBettingList} CmdZsjcPlayerBettingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdZsjcPlayerBettingList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdZsjcPlayerBettingList message.
         * @function verify
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdZsjcPlayerBettingList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                if (!$util.isInteger(message.gametype))
                    return "gametype: integer expected";
            return null;
        };

        /**
         * Creates a CmdZsjcPlayerBettingList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdZsjcPlayerBettingList} CmdZsjcPlayerBettingList
         */
        CmdZsjcPlayerBettingList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdZsjcPlayerBettingList)
                return object;
            var message = new $root.pb.CmdZsjcPlayerBettingList();
            if (object.code != null)
                message.code = object.code | 0;
            if (object.gametype != null)
                message.gametype = object.gametype | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdZsjcPlayerBettingList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdZsjcPlayerBettingList
         * @static
         * @param {pb.CmdZsjcPlayerBettingList} message CmdZsjcPlayerBettingList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdZsjcPlayerBettingList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.gametype = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                object.gametype = message.gametype;
            return object;
        };

        /**
         * Converts this CmdZsjcPlayerBettingList to JSON.
         * @function toJSON
         * @memberof pb.CmdZsjcPlayerBettingList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdZsjcPlayerBettingList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdZsjcPlayerBettingList;
    })();

    pb.ZsjcPlayerBettingList = (function () {

        /**
         * Properties of a ZsjcPlayerBettingList.
         * @memberof pb
         * @interface IZsjcPlayerBettingList
         * @property {number|null} [code] ZsjcPlayerBettingList code
         * @property {number|null} [gametype] ZsjcPlayerBettingList gametype
         * @property {Array.<pb.IRankingItem>|null} [Items] ZsjcPlayerBettingList Items
         */

        /**
         * Constructs a new ZsjcPlayerBettingList.
         * @memberof pb
         * @classdesc Represents a ZsjcPlayerBettingList.
         * @implements IZsjcPlayerBettingList
         * @constructor
         * @param {pb.IZsjcPlayerBettingList=} [properties] Properties to set
         */
        function ZsjcPlayerBettingList(properties) {
            this.Items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcPlayerBettingList code.
         * @member {number} code
         * @memberof pb.ZsjcPlayerBettingList
         * @instance
         */
        ZsjcPlayerBettingList.prototype.code = 0;

        /**
         * ZsjcPlayerBettingList gametype.
         * @member {number} gametype
         * @memberof pb.ZsjcPlayerBettingList
         * @instance
         */
        ZsjcPlayerBettingList.prototype.gametype = 0;

        /**
         * ZsjcPlayerBettingList Items.
         * @member {Array.<pb.IRankingItem>} Items
         * @memberof pb.ZsjcPlayerBettingList
         * @instance
         */
        ZsjcPlayerBettingList.prototype.Items = $util.emptyArray;

        /**
         * Creates a new ZsjcPlayerBettingList instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {pb.IZsjcPlayerBettingList=} [properties] Properties to set
         * @returns {pb.ZsjcPlayerBettingList} ZsjcPlayerBettingList instance
         */
        ZsjcPlayerBettingList.create = function create(properties) {
            return new ZsjcPlayerBettingList(properties);
        };

        /**
         * Encodes the specified ZsjcPlayerBettingList message. Does not implicitly {@link pb.ZsjcPlayerBettingList.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {pb.IZsjcPlayerBettingList} message ZsjcPlayerBettingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcPlayerBettingList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.gametype != null && Object.hasOwnProperty.call(message, "gametype"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gametype);
            if (message.Items != null && message.Items.length)
                for (var i = 0; i < message.Items.length; ++i)
                    $root.pb.RankingItem.encode(message.Items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ZsjcPlayerBettingList message, length delimited. Does not implicitly {@link pb.ZsjcPlayerBettingList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {pb.IZsjcPlayerBettingList} message ZsjcPlayerBettingList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcPlayerBettingList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcPlayerBettingList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcPlayerBettingList} ZsjcPlayerBettingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcPlayerBettingList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcPlayerBettingList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.gametype = reader.int32();
                        break;
                    case 3:
                        if (!(message.Items && message.Items.length))
                            message.Items = [];
                        message.Items.push($root.pb.RankingItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcPlayerBettingList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcPlayerBettingList} ZsjcPlayerBettingList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcPlayerBettingList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcPlayerBettingList message.
         * @function verify
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcPlayerBettingList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                if (!$util.isInteger(message.gametype))
                    return "gametype: integer expected";
            if (message.Items != null && message.hasOwnProperty("Items")) {
                if (!Array.isArray(message.Items))
                    return "Items: array expected";
                for (var i = 0; i < message.Items.length; ++i) {
                    var error = $root.pb.RankingItem.verify(message.Items[i]);
                    if (error)
                        return "Items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ZsjcPlayerBettingList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcPlayerBettingList} ZsjcPlayerBettingList
         */
        ZsjcPlayerBettingList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcPlayerBettingList)
                return object;
            var message = new $root.pb.ZsjcPlayerBettingList();
            if (object.code != null)
                message.code = object.code | 0;
            if (object.gametype != null)
                message.gametype = object.gametype | 0;
            if (object.Items) {
                if (!Array.isArray(object.Items))
                    throw TypeError(".pb.ZsjcPlayerBettingList.Items: array expected");
                message.Items = [];
                for (var i = 0; i < object.Items.length; ++i) {
                    if (typeof object.Items[i] !== "object")
                        throw TypeError(".pb.ZsjcPlayerBettingList.Items: object expected");
                    message.Items[i] = $root.pb.RankingItem.fromObject(object.Items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ZsjcPlayerBettingList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcPlayerBettingList
         * @static
         * @param {pb.ZsjcPlayerBettingList} message ZsjcPlayerBettingList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcPlayerBettingList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Items = [];
            if (options.defaults) {
                object.code = 0;
                object.gametype = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                object.gametype = message.gametype;
            if (message.Items && message.Items.length) {
                object.Items = [];
                for (var j = 0; j < message.Items.length; ++j)
                    object.Items[j] = $root.pb.RankingItem.toObject(message.Items[j], options);
            }
            return object;
        };

        /**
         * Converts this ZsjcPlayerBettingList to JSON.
         * @function toJSON
         * @memberof pb.ZsjcPlayerBettingList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcPlayerBettingList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcPlayerBettingList;
    })();

    pb.CmdZsjcBettingResultList = (function () {

        /**
         * Properties of a CmdZsjcBettingResultList.
         * @memberof pb
         * @interface ICmdZsjcBettingResultList
         * @property {number|null} [uid] CmdZsjcBettingResultList uid
         * @property {number|null} [code] CmdZsjcBettingResultList code
         * @property {number|null} [gametype] CmdZsjcBettingResultList gametype
         * @property {number|Long|null} [from] CmdZsjcBettingResultList from
         * @property {number|Long|null} [to] CmdZsjcBettingResultList to
         * @property {number|null} [total] CmdZsjcBettingResultList total
         */

        /**
         * Constructs a new CmdZsjcBettingResultList.
         * @memberof pb
         * @classdesc Represents a CmdZsjcBettingResultList.
         * @implements ICmdZsjcBettingResultList
         * @constructor
         * @param {pb.ICmdZsjcBettingResultList=} [properties] Properties to set
         */
        function CmdZsjcBettingResultList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdZsjcBettingResultList uid.
         * @member {number} uid
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.uid = 0;

        /**
         * CmdZsjcBettingResultList code.
         * @member {number} code
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.code = 0;

        /**
         * CmdZsjcBettingResultList gametype.
         * @member {number} gametype
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.gametype = 0;

        /**
         * CmdZsjcBettingResultList from.
         * @member {number|Long} from
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdZsjcBettingResultList to.
         * @member {number|Long} to
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdZsjcBettingResultList total.
         * @member {number} total
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         */
        CmdZsjcBettingResultList.prototype.total = 0;

        /**
         * Creates a new CmdZsjcBettingResultList instance using the specified properties.
         * @function create
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {pb.ICmdZsjcBettingResultList=} [properties] Properties to set
         * @returns {pb.CmdZsjcBettingResultList} CmdZsjcBettingResultList instance
         */
        CmdZsjcBettingResultList.create = function create(properties) {
            return new CmdZsjcBettingResultList(properties);
        };

        /**
         * Encodes the specified CmdZsjcBettingResultList message. Does not implicitly {@link pb.CmdZsjcBettingResultList.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {pb.ICmdZsjcBettingResultList} message CmdZsjcBettingResultList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdZsjcBettingResultList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.gametype != null && Object.hasOwnProperty.call(message, "gametype"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gametype);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.to);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.total);
            return writer;
        };

        /**
         * Encodes the specified CmdZsjcBettingResultList message, length delimited. Does not implicitly {@link pb.CmdZsjcBettingResultList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {pb.ICmdZsjcBettingResultList} message CmdZsjcBettingResultList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdZsjcBettingResultList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdZsjcBettingResultList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdZsjcBettingResultList} CmdZsjcBettingResultList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdZsjcBettingResultList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdZsjcBettingResultList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.gametype = reader.int32();
                        break;
                    case 4:
                        message.from = reader.int64();
                        break;
                    case 5:
                        message.to = reader.int64();
                        break;
                    case 6:
                        message.total = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdZsjcBettingResultList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdZsjcBettingResultList} CmdZsjcBettingResultList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdZsjcBettingResultList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdZsjcBettingResultList message.
         * @function verify
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdZsjcBettingResultList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                if (!$util.isInteger(message.gametype))
                    return "gametype: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            return null;
        };

        /**
         * Creates a CmdZsjcBettingResultList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdZsjcBettingResultList} CmdZsjcBettingResultList
         */
        CmdZsjcBettingResultList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdZsjcBettingResultList)
                return object;
            var message = new $root.pb.CmdZsjcBettingResultList();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.code != null)
                message.code = object.code | 0;
            if (object.gametype != null)
                message.gametype = object.gametype | 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdZsjcBettingResultList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdZsjcBettingResultList
         * @static
         * @param {pb.CmdZsjcBettingResultList} message CmdZsjcBettingResultList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdZsjcBettingResultList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.code = 0;
                object.gametype = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.total = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                object.gametype = message.gametype;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            return object;
        };

        /**
         * Converts this CmdZsjcBettingResultList to JSON.
         * @function toJSON
         * @memberof pb.CmdZsjcBettingResultList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdZsjcBettingResultList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdZsjcBettingResultList;
    })();

    pb.ZsjcBettingResultItem = (function () {

        /**
         * Properties of a ZsjcBettingResultItem.
         * @memberof pb
         * @interface IZsjcBettingResultItem
         * @property {number|null} [uid] ZsjcBettingResultItem uid
         * @property {number|null} [code] ZsjcBettingResultItem code
         * @property {number|null} [gametype] ZsjcBettingResultItem gametype
         * @property {number|null} [betting] ZsjcBettingResultItem betting
         * @property {number|null} [money] ZsjcBettingResultItem money
         * @property {number|null} [bonus] ZsjcBettingResultItem bonus
         * @property {number|Long|null} [tsBetting] ZsjcBettingResultItem tsBetting
         * @property {number|Long|null} [tsSettling] ZsjcBettingResultItem tsSettling
         */

        /**
         * Constructs a new ZsjcBettingResultItem.
         * @memberof pb
         * @classdesc Represents a ZsjcBettingResultItem.
         * @implements IZsjcBettingResultItem
         * @constructor
         * @param {pb.IZsjcBettingResultItem=} [properties] Properties to set
         */
        function ZsjcBettingResultItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcBettingResultItem uid.
         * @member {number} uid
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.uid = 0;

        /**
         * ZsjcBettingResultItem code.
         * @member {number} code
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.code = 0;

        /**
         * ZsjcBettingResultItem gametype.
         * @member {number} gametype
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.gametype = 0;

        /**
         * ZsjcBettingResultItem betting.
         * @member {number} betting
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.betting = 0;

        /**
         * ZsjcBettingResultItem money.
         * @member {number} money
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.money = 0;

        /**
         * ZsjcBettingResultItem bonus.
         * @member {number} bonus
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.bonus = 0;

        /**
         * ZsjcBettingResultItem tsBetting.
         * @member {number|Long} tsBetting
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.tsBetting = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * ZsjcBettingResultItem tsSettling.
         * @member {number|Long} tsSettling
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         */
        ZsjcBettingResultItem.prototype.tsSettling = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new ZsjcBettingResultItem instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {pb.IZsjcBettingResultItem=} [properties] Properties to set
         * @returns {pb.ZsjcBettingResultItem} ZsjcBettingResultItem instance
         */
        ZsjcBettingResultItem.create = function create(properties) {
            return new ZsjcBettingResultItem(properties);
        };

        /**
         * Encodes the specified ZsjcBettingResultItem message. Does not implicitly {@link pb.ZsjcBettingResultItem.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {pb.IZsjcBettingResultItem} message ZsjcBettingResultItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcBettingResultItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.gametype != null && Object.hasOwnProperty.call(message, "gametype"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gametype);
            if (message.betting != null && Object.hasOwnProperty.call(message, "betting"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.betting);
            if (message.money != null && Object.hasOwnProperty.call(message, "money"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.money);
            if (message.bonus != null && Object.hasOwnProperty.call(message, "bonus"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.bonus);
            if (message.tsSettling != null && Object.hasOwnProperty.call(message, "tsSettling"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.tsSettling);
            if (message.tsBetting != null && Object.hasOwnProperty.call(message, "tsBetting"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.tsBetting);
            return writer;
        };

        /**
         * Encodes the specified ZsjcBettingResultItem message, length delimited. Does not implicitly {@link pb.ZsjcBettingResultItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {pb.IZsjcBettingResultItem} message ZsjcBettingResultItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcBettingResultItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcBettingResultItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcBettingResultItem} ZsjcBettingResultItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcBettingResultItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcBettingResultItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.gametype = reader.int32();
                        break;
                    case 4:
                        message.betting = reader.int32();
                        break;
                    case 5:
                        message.money = reader.int32();
                        break;
                    case 6:
                        message.bonus = reader.int32();
                        break;
                    case 8:
                        message.tsBetting = reader.int64();
                        break;
                    case 7:
                        message.tsSettling = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcBettingResultItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcBettingResultItem} ZsjcBettingResultItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcBettingResultItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcBettingResultItem message.
         * @function verify
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcBettingResultItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                if (!$util.isInteger(message.gametype))
                    return "gametype: integer expected";
            if (message.betting != null && message.hasOwnProperty("betting"))
                if (!$util.isInteger(message.betting))
                    return "betting: integer expected";
            if (message.money != null && message.hasOwnProperty("money"))
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
            if (message.bonus != null && message.hasOwnProperty("bonus"))
                if (!$util.isInteger(message.bonus))
                    return "bonus: integer expected";
            if (message.tsBetting != null && message.hasOwnProperty("tsBetting"))
                if (!$util.isInteger(message.tsBetting) && !(message.tsBetting && $util.isInteger(message.tsBetting.low) && $util.isInteger(message.tsBetting.high)))
                    return "tsBetting: integer|Long expected";
            if (message.tsSettling != null && message.hasOwnProperty("tsSettling"))
                if (!$util.isInteger(message.tsSettling) && !(message.tsSettling && $util.isInteger(message.tsSettling.low) && $util.isInteger(message.tsSettling.high)))
                    return "tsSettling: integer|Long expected";
            return null;
        };

        /**
         * Creates a ZsjcBettingResultItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcBettingResultItem} ZsjcBettingResultItem
         */
        ZsjcBettingResultItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcBettingResultItem)
                return object;
            var message = new $root.pb.ZsjcBettingResultItem();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.code != null)
                message.code = object.code | 0;
            if (object.gametype != null)
                message.gametype = object.gametype | 0;
            if (object.betting != null)
                message.betting = object.betting | 0;
            if (object.money != null)
                message.money = object.money | 0;
            if (object.bonus != null)
                message.bonus = object.bonus | 0;
            if (object.tsBetting != null)
                if ($util.Long)
                    (message.tsBetting = $util.Long.fromValue(object.tsBetting)).unsigned = false;
                else if (typeof object.tsBetting === "string")
                    message.tsBetting = parseInt(object.tsBetting, 10);
                else if (typeof object.tsBetting === "number")
                    message.tsBetting = object.tsBetting;
                else if (typeof object.tsBetting === "object")
                    message.tsBetting = new $util.LongBits(object.tsBetting.low >>> 0, object.tsBetting.high >>> 0).toNumber();
            if (object.tsSettling != null)
                if ($util.Long)
                    (message.tsSettling = $util.Long.fromValue(object.tsSettling)).unsigned = false;
                else if (typeof object.tsSettling === "string")
                    message.tsSettling = parseInt(object.tsSettling, 10);
                else if (typeof object.tsSettling === "number")
                    message.tsSettling = object.tsSettling;
                else if (typeof object.tsSettling === "object")
                    message.tsSettling = new $util.LongBits(object.tsSettling.low >>> 0, object.tsSettling.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a ZsjcBettingResultItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcBettingResultItem
         * @static
         * @param {pb.ZsjcBettingResultItem} message ZsjcBettingResultItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcBettingResultItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.code = 0;
                object.gametype = 0;
                object.betting = 0;
                object.money = 0;
                object.bonus = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsSettling = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsSettling = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsBetting = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsBetting = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.gametype != null && message.hasOwnProperty("gametype"))
                object.gametype = message.gametype;
            if (message.betting != null && message.hasOwnProperty("betting"))
                object.betting = message.betting;
            if (message.money != null && message.hasOwnProperty("money"))
                object.money = message.money;
            if (message.bonus != null && message.hasOwnProperty("bonus"))
                object.bonus = message.bonus;
            if (message.tsSettling != null && message.hasOwnProperty("tsSettling"))
                if (typeof message.tsSettling === "number")
                    object.tsSettling = options.longs === String ? String(message.tsSettling) : message.tsSettling;
                else
                    object.tsSettling = options.longs === String ? $util.Long.prototype.toString.call(message.tsSettling) : options.longs === Number ? new $util.LongBits(message.tsSettling.low >>> 0, message.tsSettling.high >>> 0).toNumber() : message.tsSettling;
            if (message.tsBetting != null && message.hasOwnProperty("tsBetting"))
                if (typeof message.tsBetting === "number")
                    object.tsBetting = options.longs === String ? String(message.tsBetting) : message.tsBetting;
                else
                    object.tsBetting = options.longs === String ? $util.Long.prototype.toString.call(message.tsBetting) : options.longs === Number ? new $util.LongBits(message.tsBetting.low >>> 0, message.tsBetting.high >>> 0).toNumber() : message.tsBetting;
            return object;
        };

        /**
         * Converts this ZsjcBettingResultItem to JSON.
         * @function toJSON
         * @memberof pb.ZsjcBettingResultItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcBettingResultItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcBettingResultItem;
    })();

    pb.ZsjcBettingResult = (function () {

        /**
         * Properties of a ZsjcBettingResult.
         * @memberof pb
         * @interface IZsjcBettingResult
         * @property {Array.<pb.IZsjcBettingResultItem>|null} [Items] ZsjcBettingResult Items
         */

        /**
         * Constructs a new ZsjcBettingResult.
         * @memberof pb
         * @classdesc Represents a ZsjcBettingResult.
         * @implements IZsjcBettingResult
         * @constructor
         * @param {pb.IZsjcBettingResult=} [properties] Properties to set
         */
        function ZsjcBettingResult(properties) {
            this.Items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ZsjcBettingResult Items.
         * @member {Array.<pb.IZsjcBettingResultItem>} Items
         * @memberof pb.ZsjcBettingResult
         * @instance
         */
        ZsjcBettingResult.prototype.Items = $util.emptyArray;

        /**
         * Creates a new ZsjcBettingResult instance using the specified properties.
         * @function create
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {pb.IZsjcBettingResult=} [properties] Properties to set
         * @returns {pb.ZsjcBettingResult} ZsjcBettingResult instance
         */
        ZsjcBettingResult.create = function create(properties) {
            return new ZsjcBettingResult(properties);
        };

        /**
         * Encodes the specified ZsjcBettingResult message. Does not implicitly {@link pb.ZsjcBettingResult.verify|verify} messages.
         * @function encode
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {pb.IZsjcBettingResult} message ZsjcBettingResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcBettingResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Items != null && message.Items.length)
                for (var i = 0; i < message.Items.length; ++i)
                    $root.pb.ZsjcBettingResultItem.encode(message.Items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ZsjcBettingResult message, length delimited. Does not implicitly {@link pb.ZsjcBettingResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {pb.IZsjcBettingResult} message ZsjcBettingResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ZsjcBettingResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ZsjcBettingResult message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ZsjcBettingResult} ZsjcBettingResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcBettingResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ZsjcBettingResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.Items && message.Items.length))
                            message.Items = [];
                        message.Items.push($root.pb.ZsjcBettingResultItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ZsjcBettingResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ZsjcBettingResult} ZsjcBettingResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ZsjcBettingResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ZsjcBettingResult message.
         * @function verify
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ZsjcBettingResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Items != null && message.hasOwnProperty("Items")) {
                if (!Array.isArray(message.Items))
                    return "Items: array expected";
                for (var i = 0; i < message.Items.length; ++i) {
                    var error = $root.pb.ZsjcBettingResultItem.verify(message.Items[i]);
                    if (error)
                        return "Items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ZsjcBettingResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ZsjcBettingResult} ZsjcBettingResult
         */
        ZsjcBettingResult.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ZsjcBettingResult)
                return object;
            var message = new $root.pb.ZsjcBettingResult();
            if (object.Items) {
                if (!Array.isArray(object.Items))
                    throw TypeError(".pb.ZsjcBettingResult.Items: array expected");
                message.Items = [];
                for (var i = 0; i < object.Items.length; ++i) {
                    if (typeof object.Items[i] !== "object")
                        throw TypeError(".pb.ZsjcBettingResult.Items: object expected");
                    message.Items[i] = $root.pb.ZsjcBettingResultItem.fromObject(object.Items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ZsjcBettingResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ZsjcBettingResult
         * @static
         * @param {pb.ZsjcBettingResult} message ZsjcBettingResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ZsjcBettingResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.Items = [];
            if (message.Items && message.Items.length) {
                object.Items = [];
                for (var j = 0; j < message.Items.length; ++j)
                    object.Items[j] = $root.pb.ZsjcBettingResultItem.toObject(message.Items[j], options);
            }
            return object;
        };

        /**
         * Converts this ZsjcBettingResult to JSON.
         * @function toJSON
         * @memberof pb.ZsjcBettingResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ZsjcBettingResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ZsjcBettingResult;
    })();

    pb.CmdGetWeeklyAward = (function () {

        /**
         * Properties of a CmdGetWeeklyAward.
         * @memberof pb
         * @interface ICmdGetWeeklyAward
         * @property {string|null} [code] CmdGetWeeklyAward code
         */

        /**
         * Constructs a new CmdGetWeeklyAward.
         * @memberof pb
         * @classdesc Represents a CmdGetWeeklyAward.
         * @implements ICmdGetWeeklyAward
         * @constructor
         * @param {pb.ICmdGetWeeklyAward=} [properties] Properties to set
         */
        function CmdGetWeeklyAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetWeeklyAward code.
         * @member {string} code
         * @memberof pb.CmdGetWeeklyAward
         * @instance
         */
        CmdGetWeeklyAward.prototype.code = "";

        /**
         * Creates a new CmdGetWeeklyAward instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {pb.ICmdGetWeeklyAward=} [properties] Properties to set
         * @returns {pb.CmdGetWeeklyAward} CmdGetWeeklyAward instance
         */
        CmdGetWeeklyAward.create = function create(properties) {
            return new CmdGetWeeklyAward(properties);
        };

        /**
         * Encodes the specified CmdGetWeeklyAward message. Does not implicitly {@link pb.CmdGetWeeklyAward.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {pb.ICmdGetWeeklyAward} message CmdGetWeeklyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetWeeklyAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified CmdGetWeeklyAward message, length delimited. Does not implicitly {@link pb.CmdGetWeeklyAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {pb.ICmdGetWeeklyAward} message CmdGetWeeklyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetWeeklyAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetWeeklyAward message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetWeeklyAward} CmdGetWeeklyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetWeeklyAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetWeeklyAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetWeeklyAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetWeeklyAward} CmdGetWeeklyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetWeeklyAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetWeeklyAward message.
         * @function verify
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetWeeklyAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };

        /**
         * Creates a CmdGetWeeklyAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetWeeklyAward} CmdGetWeeklyAward
         */
        CmdGetWeeklyAward.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetWeeklyAward)
                return object;
            var message = new $root.pb.CmdGetWeeklyAward();
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a CmdGetWeeklyAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetWeeklyAward
         * @static
         * @param {pb.CmdGetWeeklyAward} message CmdGetWeeklyAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetWeeklyAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.code = "";
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this CmdGetWeeklyAward to JSON.
         * @function toJSON
         * @memberof pb.CmdGetWeeklyAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetWeeklyAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetWeeklyAward;
    })();

    pb.CmdGetWeeklyAwardReply = (function () {

        /**
         * Properties of a CmdGetWeeklyAwardReply.
         * @memberof pb
         * @interface ICmdGetWeeklyAwardReply
         * @property {pb.IErrorInfo|null} [result] CmdGetWeeklyAwardReply result
         * @property {pb.IGameProperties|null} [award] CmdGetWeeklyAwardReply award
         */

        /**
         * Constructs a new CmdGetWeeklyAwardReply.
         * @memberof pb
         * @classdesc Represents a CmdGetWeeklyAwardReply.
         * @implements ICmdGetWeeklyAwardReply
         * @constructor
         * @param {pb.ICmdGetWeeklyAwardReply=} [properties] Properties to set
         */
        function CmdGetWeeklyAwardReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetWeeklyAwardReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdGetWeeklyAwardReply
         * @instance
         */
        CmdGetWeeklyAwardReply.prototype.result = null;

        /**
         * CmdGetWeeklyAwardReply award.
         * @member {pb.IGameProperties|null|undefined} award
         * @memberof pb.CmdGetWeeklyAwardReply
         * @instance
         */
        CmdGetWeeklyAwardReply.prototype.award = null;

        /**
         * Creates a new CmdGetWeeklyAwardReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {pb.ICmdGetWeeklyAwardReply=} [properties] Properties to set
         * @returns {pb.CmdGetWeeklyAwardReply} CmdGetWeeklyAwardReply instance
         */
        CmdGetWeeklyAwardReply.create = function create(properties) {
            return new CmdGetWeeklyAwardReply(properties);
        };

        /**
         * Encodes the specified CmdGetWeeklyAwardReply message. Does not implicitly {@link pb.CmdGetWeeklyAwardReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {pb.ICmdGetWeeklyAwardReply} message CmdGetWeeklyAwardReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetWeeklyAwardReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.award != null && Object.hasOwnProperty.call(message, "award"))
                $root.pb.GameProperties.encode(message.award, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdGetWeeklyAwardReply message, length delimited. Does not implicitly {@link pb.CmdGetWeeklyAwardReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {pb.ICmdGetWeeklyAwardReply} message CmdGetWeeklyAwardReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetWeeklyAwardReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetWeeklyAwardReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetWeeklyAwardReply} CmdGetWeeklyAwardReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetWeeklyAwardReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetWeeklyAwardReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.award = $root.pb.GameProperties.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetWeeklyAwardReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetWeeklyAwardReply} CmdGetWeeklyAwardReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetWeeklyAwardReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetWeeklyAwardReply message.
         * @function verify
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetWeeklyAwardReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.award != null && message.hasOwnProperty("award")) {
                var error = $root.pb.GameProperties.verify(message.award);
                if (error)
                    return "award." + error;
            }
            return null;
        };

        /**
         * Creates a CmdGetWeeklyAwardReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetWeeklyAwardReply} CmdGetWeeklyAwardReply
         */
        CmdGetWeeklyAwardReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetWeeklyAwardReply)
                return object;
            var message = new $root.pb.CmdGetWeeklyAwardReply();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdGetWeeklyAwardReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.award != null) {
                if (typeof object.award !== "object")
                    throw TypeError(".pb.CmdGetWeeklyAwardReply.award: object expected");
                message.award = $root.pb.GameProperties.fromObject(object.award);
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdGetWeeklyAwardReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetWeeklyAwardReply
         * @static
         * @param {pb.CmdGetWeeklyAwardReply} message CmdGetWeeklyAwardReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetWeeklyAwardReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                object.award = null;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = $root.pb.GameProperties.toObject(message.award, options);
            return object;
        };

        /**
         * Converts this CmdGetWeeklyAwardReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGetWeeklyAwardReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetWeeklyAwardReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetWeeklyAwardReply;
    })();

    pb.CmdQueryEventLog = (function () {

        /**
         * Properties of a CmdQueryEventLog.
         * @memberof pb
         * @interface ICmdQueryEventLog
         * @property {pb.EventId|null} [eventId] CmdQueryEventLog eventId
         * @property {number|null} [uid] CmdQueryEventLog uid
         * @property {number|Long|null} [from] CmdQueryEventLog from
         * @property {number|Long|null} [to] CmdQueryEventLog to
         * @property {number|null} [total] CmdQueryEventLog total
         */

        /**
         * Constructs a new CmdQueryEventLog.
         * @memberof pb
         * @classdesc Represents a CmdQueryEventLog.
         * @implements ICmdQueryEventLog
         * @constructor
         * @param {pb.ICmdQueryEventLog=} [properties] Properties to set
         */
        function CmdQueryEventLog(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryEventLog eventId.
         * @member {pb.EventId} eventId
         * @memberof pb.CmdQueryEventLog
         * @instance
         */
        CmdQueryEventLog.prototype.eventId = 0;

        /**
         * CmdQueryEventLog uid.
         * @member {number} uid
         * @memberof pb.CmdQueryEventLog
         * @instance
         */
        CmdQueryEventLog.prototype.uid = 0;

        /**
         * CmdQueryEventLog from.
         * @member {number|Long} from
         * @memberof pb.CmdQueryEventLog
         * @instance
         */
        CmdQueryEventLog.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryEventLog to.
         * @member {number|Long} to
         * @memberof pb.CmdQueryEventLog
         * @instance
         */
        CmdQueryEventLog.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryEventLog total.
         * @member {number} total
         * @memberof pb.CmdQueryEventLog
         * @instance
         */
        CmdQueryEventLog.prototype.total = 0;

        /**
         * Creates a new CmdQueryEventLog instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {pb.ICmdQueryEventLog=} [properties] Properties to set
         * @returns {pb.CmdQueryEventLog} CmdQueryEventLog instance
         */
        CmdQueryEventLog.create = function create(properties) {
            return new CmdQueryEventLog(properties);
        };

        /**
         * Encodes the specified CmdQueryEventLog message. Does not implicitly {@link pb.CmdQueryEventLog.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {pb.ICmdQueryEventLog} message CmdQueryEventLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryEventLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventId != null && Object.hasOwnProperty.call(message, "eventId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventId);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.to);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.total);
            return writer;
        };

        /**
         * Encodes the specified CmdQueryEventLog message, length delimited. Does not implicitly {@link pb.CmdQueryEventLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {pb.ICmdQueryEventLog} message CmdQueryEventLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryEventLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryEventLog message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryEventLog} CmdQueryEventLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryEventLog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryEventLog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.eventId = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.from = reader.int64();
                        break;
                    case 4:
                        message.to = reader.int64();
                        break;
                    case 5:
                        message.total = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryEventLog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryEventLog} CmdQueryEventLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryEventLog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryEventLog message.
         * @function verify
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryEventLog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                switch (message.eventId) {
                    default:
                        return "eventId: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            return null;
        };

        /**
         * Creates a CmdQueryEventLog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryEventLog} CmdQueryEventLog
         */
        CmdQueryEventLog.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryEventLog)
                return object;
            var message = new $root.pb.CmdQueryEventLog();
            switch (object.eventId) {
                case "EventId_NULL":
                case 0:
                    message.eventId = 0;
                    break;
                case "EventId_WeeklyAward":
                case 1:
                    message.eventId = 1;
                    break;
                case "EventId_Zsjc":
                case 2:
                    message.eventId = 2;
                    break;
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryEventLog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryEventLog
         * @static
         * @param {pb.CmdQueryEventLog} message CmdQueryEventLog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryEventLog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventId = options.enums === String ? "EventId_NULL" : 0;
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.total = 0;
            }
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                object.eventId = options.enums === String ? $root.pb.EventId[message.eventId] : message.eventId;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            return object;
        };

        /**
         * Converts this CmdQueryEventLog to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryEventLog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryEventLog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryEventLog;
    })();

    pb.EventLog = (function () {

        /**
         * Properties of an EventLog.
         * @memberof pb
         * @interface IEventLog
         * @property {pb.EventId|null} [eventId] EventLog eventId
         * @property {number|null} [uid] EventLog uid
         * @property {number|Long|null} [ts] EventLog ts
         * @property {string|null} [log] EventLog log
         */

        /**
         * Constructs a new EventLog.
         * @memberof pb
         * @classdesc Represents an EventLog.
         * @implements IEventLog
         * @constructor
         * @param {pb.IEventLog=} [properties] Properties to set
         */
        function EventLog(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventLog eventId.
         * @member {pb.EventId} eventId
         * @memberof pb.EventLog
         * @instance
         */
        EventLog.prototype.eventId = 0;

        /**
         * EventLog uid.
         * @member {number} uid
         * @memberof pb.EventLog
         * @instance
         */
        EventLog.prototype.uid = 0;

        /**
         * EventLog ts.
         * @member {number|Long} ts
         * @memberof pb.EventLog
         * @instance
         */
        EventLog.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * EventLog log.
         * @member {string} log
         * @memberof pb.EventLog
         * @instance
         */
        EventLog.prototype.log = "";

        /**
         * Creates a new EventLog instance using the specified properties.
         * @function create
         * @memberof pb.EventLog
         * @static
         * @param {pb.IEventLog=} [properties] Properties to set
         * @returns {pb.EventLog} EventLog instance
         */
        EventLog.create = function create(properties) {
            return new EventLog(properties);
        };

        /**
         * Encodes the specified EventLog message. Does not implicitly {@link pb.EventLog.verify|verify} messages.
         * @function encode
         * @memberof pb.EventLog
         * @static
         * @param {pb.IEventLog} message EventLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventId != null && Object.hasOwnProperty.call(message, "eventId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventId);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.ts);
            if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.log);
            return writer;
        };

        /**
         * Encodes the specified EventLog message, length delimited. Does not implicitly {@link pb.EventLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.EventLog
         * @static
         * @param {pb.IEventLog} message EventLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventLog message from the specified reader or buffer.
         * @function decode
         * @memberof pb.EventLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.EventLog} EventLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventLog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.EventLog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.eventId = reader.int32();
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.ts = reader.int64();
                        break;
                    case 4:
                        message.log = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventLog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.EventLog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.EventLog} EventLog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventLog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventLog message.
         * @function verify
         * @memberof pb.EventLog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventLog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                switch (message.eventId) {
                    default:
                        return "eventId: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.log != null && message.hasOwnProperty("log"))
                if (!$util.isString(message.log))
                    return "log: string expected";
            return null;
        };

        /**
         * Creates an EventLog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.EventLog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.EventLog} EventLog
         */
        EventLog.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.EventLog)
                return object;
            var message = new $root.pb.EventLog();
            switch (object.eventId) {
                case "EventId_NULL":
                case 0:
                    message.eventId = 0;
                    break;
                case "EventId_WeeklyAward":
                case 1:
                    message.eventId = 1;
                    break;
                case "EventId_Zsjc":
                case 2:
                    message.eventId = 2;
                    break;
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.log != null)
                message.log = String(object.log);
            return message;
        };

        /**
         * Creates a plain object from an EventLog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.EventLog
         * @static
         * @param {pb.EventLog} message EventLog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventLog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventId = options.enums === String ? "EventId_NULL" : 0;
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.log = "";
            }
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                object.eventId = options.enums === String ? $root.pb.EventId[message.eventId] : message.eventId;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.log != null && message.hasOwnProperty("log"))
                object.log = message.log;
            return object;
        };

        /**
         * Converts this EventLog to JSON.
         * @function toJSON
         * @memberof pb.EventLog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventLog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventLog;
    })();

    pb.Events = (function () {

        /**
         * Properties of an Events.
         * @memberof pb
         * @interface IEvents
         * @property {Array.<pb.IEventLog>|null} [items] Events items
         */

        /**
         * Constructs a new Events.
         * @memberof pb
         * @classdesc Represents an Events.
         * @implements IEvents
         * @constructor
         * @param {pb.IEvents=} [properties] Properties to set
         */
        function Events(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Events items.
         * @member {Array.<pb.IEventLog>} items
         * @memberof pb.Events
         * @instance
         */
        Events.prototype.items = $util.emptyArray;

        /**
         * Creates a new Events instance using the specified properties.
         * @function create
         * @memberof pb.Events
         * @static
         * @param {pb.IEvents=} [properties] Properties to set
         * @returns {pb.Events} Events instance
         */
        Events.create = function create(properties) {
            return new Events(properties);
        };

        /**
         * Encodes the specified Events message. Does not implicitly {@link pb.Events.verify|verify} messages.
         * @function encode
         * @memberof pb.Events
         * @static
         * @param {pb.IEvents} message Events message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Events.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.EventLog.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Events message, length delimited. Does not implicitly {@link pb.Events.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Events
         * @static
         * @param {pb.IEvents} message Events message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Events.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Events message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Events
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Events} Events
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Events.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Events();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.EventLog.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an Events message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Events
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Events} Events
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Events.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Events message.
         * @function verify
         * @memberof pb.Events
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Events.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.EventLog.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates an Events message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Events
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Events} Events
         */
        Events.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Events)
                return object;
            var message = new $root.pb.Events();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.Events.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.Events.items: object expected");
                    message.items[i] = $root.pb.EventLog.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an Events message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Events
         * @static
         * @param {pb.Events} message Events
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Events.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.EventLog.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this Events to JSON.
         * @function toJSON
         * @memberof pb.Events
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Events.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Events;
    })();

    pb.ItemOrder = (function () {

        /**
         * Properties of an ItemOrder.
         * @memberof pb
         * @interface IItemOrder
         * @property {number|null} [itemId] ItemOrder itemId
         * @property {number|null} [activityId] ItemOrder activityId
         * @property {number|null} [count] ItemOrder count
         * @property {pb.AppFrom|null} [from] ItemOrder from
         */

        /**
         * Constructs a new ItemOrder.
         * @memberof pb
         * @classdesc Represents an ItemOrder.
         * @implements IItemOrder
         * @constructor
         * @param {pb.IItemOrder=} [properties] Properties to set
         */
        function ItemOrder(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemOrder itemId.
         * @member {number} itemId
         * @memberof pb.ItemOrder
         * @instance
         */
        ItemOrder.prototype.itemId = 0;

        /**
         * ItemOrder activityId.
         * @member {number} activityId
         * @memberof pb.ItemOrder
         * @instance
         */
        ItemOrder.prototype.activityId = 0;

        /**
         * ItemOrder count.
         * @member {number} count
         * @memberof pb.ItemOrder
         * @instance
         */
        ItemOrder.prototype.count = 0;

        /**
         * ItemOrder from.
         * @member {pb.AppFrom} from
         * @memberof pb.ItemOrder
         * @instance
         */
        ItemOrder.prototype.from = 0;

        /**
         * Creates a new ItemOrder instance using the specified properties.
         * @function create
         * @memberof pb.ItemOrder
         * @static
         * @param {pb.IItemOrder=} [properties] Properties to set
         * @returns {pb.ItemOrder} ItemOrder instance
         */
        ItemOrder.create = function create(properties) {
            return new ItemOrder(properties);
        };

        /**
         * Encodes the specified ItemOrder message. Does not implicitly {@link pb.ItemOrder.verify|verify} messages.
         * @function encode
         * @memberof pb.ItemOrder
         * @static
         * @param {pb.IItemOrder} message ItemOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemOrder.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemId);
            if (message.activityId != null && Object.hasOwnProperty.call(message, "activityId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activityId);
            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.from);
            return writer;
        };

        /**
         * Encodes the specified ItemOrder message, length delimited. Does not implicitly {@link pb.ItemOrder.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ItemOrder
         * @static
         * @param {pb.IItemOrder} message ItemOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemOrder message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ItemOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ItemOrder} ItemOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemOrder.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ItemOrder();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.itemId = reader.int32();
                        break;
                    case 2:
                        message.activityId = reader.int32();
                        break;
                    case 3:
                        message.count = reader.int32();
                        break;
                    case 4:
                        message.from = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemOrder message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ItemOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ItemOrder} ItemOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemOrder message.
         * @function verify
         * @memberof pb.ItemOrder
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemOrder.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                if (!$util.isInteger(message.activityId))
                    return "activityId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            return null;
        };

        /**
         * Creates an ItemOrder message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ItemOrder
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ItemOrder} ItemOrder
         */
        ItemOrder.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ItemOrder)
                return object;
            var message = new $root.pb.ItemOrder();
            if (object.itemId != null)
                message.itemId = object.itemId | 0;
            if (object.activityId != null)
                message.activityId = object.activityId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            return message;
        };

        /**
         * Creates a plain object from an ItemOrder message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ItemOrder
         * @static
         * @param {pb.ItemOrder} message ItemOrder
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemOrder.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemId = 0;
                object.activityId = 0;
                object.count = 0;
                object.from = options.enums === String ? "Ios_000" : 0;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                object.activityId = message.activityId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            return object;
        };

        /**
         * Converts this ItemOrder to JSON.
         * @function toJSON
         * @memberof pb.ItemOrder
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemOrder;
    })();

    pb.CmdShopOrderReply = (function () {

        /**
         * Properties of a CmdShopOrderReply.
         * @memberof pb
         * @interface ICmdShopOrderReply
         * @property {pb.IErrorInfo|null} [result] CmdShopOrderReply result
         * @property {number|Long|null} [orderId] CmdShopOrderReply orderId
         * @property {string|null} [wxXml] CmdShopOrderReply wxXml
         * @property {pb.PaymentType|null} [payType] CmdShopOrderReply payType
         */

        /**
         * Constructs a new CmdShopOrderReply.
         * @memberof pb
         * @classdesc Represents a CmdShopOrderReply.
         * @implements ICmdShopOrderReply
         * @constructor
         * @param {pb.ICmdShopOrderReply=} [properties] Properties to set
         */
        function CmdShopOrderReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdShopOrderReply result.
         * @member {pb.IErrorInfo|null|undefined} result
         * @memberof pb.CmdShopOrderReply
         * @instance
         */
        CmdShopOrderReply.prototype.result = null;

        /**
         * CmdShopOrderReply orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdShopOrderReply
         * @instance
         */
        CmdShopOrderReply.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdShopOrderReply wxXml.
         * @member {string} wxXml
         * @memberof pb.CmdShopOrderReply
         * @instance
         */
        CmdShopOrderReply.prototype.wxXml = "";

        /**
         * CmdShopOrderReply payType.
         * @member {pb.PaymentType} payType
         * @memberof pb.CmdShopOrderReply
         * @instance
         */
        CmdShopOrderReply.prototype.payType = 0;

        /**
         * Creates a new CmdShopOrderReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {pb.ICmdShopOrderReply=} [properties] Properties to set
         * @returns {pb.CmdShopOrderReply} CmdShopOrderReply instance
         */
        CmdShopOrderReply.create = function create(properties) {
            return new CmdShopOrderReply(properties);
        };

        /**
         * Encodes the specified CmdShopOrderReply message. Does not implicitly {@link pb.CmdShopOrderReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {pb.ICmdShopOrderReply} message CmdShopOrderReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdShopOrderReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                $root.pb.ErrorInfo.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.orderId);
            if (message.wxXml != null && Object.hasOwnProperty.call(message, "wxXml"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.wxXml);
            if (message.payType != null && Object.hasOwnProperty.call(message, "payType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.payType);
            return writer;
        };

        /**
         * Encodes the specified CmdShopOrderReply message, length delimited. Does not implicitly {@link pb.CmdShopOrderReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {pb.ICmdShopOrderReply} message CmdShopOrderReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdShopOrderReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdShopOrderReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdShopOrderReply} CmdShopOrderReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdShopOrderReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdShopOrderReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.result = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.orderId = reader.int64();
                        break;
                    case 3:
                        message.wxXml = reader.string();
                        break;
                    case 4:
                        message.payType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdShopOrderReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdShopOrderReply} CmdShopOrderReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdShopOrderReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdShopOrderReply message.
         * @function verify
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdShopOrderReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result")) {
                var error = $root.pb.ErrorInfo.verify(message.result);
                if (error)
                    return "result." + error;
            }
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.wxXml != null && message.hasOwnProperty("wxXml"))
                if (!$util.isString(message.wxXml))
                    return "wxXml: string expected";
            if (message.payType != null && message.hasOwnProperty("payType"))
                switch (message.payType) {
                    default:
                        return "payType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                }
            return null;
        };

        /**
         * Creates a CmdShopOrderReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdShopOrderReply} CmdShopOrderReply
         */
        CmdShopOrderReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdShopOrderReply)
                return object;
            var message = new $root.pb.CmdShopOrderReply();
            if (object.result != null) {
                if (typeof object.result !== "object")
                    throw TypeError(".pb.CmdShopOrderReply.result: object expected");
                message.result = $root.pb.ErrorInfo.fromObject(object.result);
            }
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            if (object.wxXml != null)
                message.wxXml = String(object.wxXml);
            switch (object.payType) {
                case "PaymentType_NULL":
                case 0:
                    message.payType = 0;
                    break;
                case "WechatPay":
                case 1:
                    message.payType = 1;
                    break;
                case "ApplePay":
                case 2:
                    message.payType = 2;
                    break;
                case "WechatMiniPay":
                case 3:
                    message.payType = 3;
                    break;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdShopOrderReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdShopOrderReply
         * @static
         * @param {pb.CmdShopOrderReply} message CmdShopOrderReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdShopOrderReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.wxXml = "";
                object.payType = options.enums === String ? "PaymentType_NULL" : 0;
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = $root.pb.ErrorInfo.toObject(message.result, options);
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.wxXml != null && message.hasOwnProperty("wxXml"))
                object.wxXml = message.wxXml;
            if (message.payType != null && message.hasOwnProperty("payType"))
                object.payType = options.enums === String ? $root.pb.PaymentType[message.payType] : message.payType;
            return object;
        };

        /**
         * Converts this CmdShopOrderReply to JSON.
         * @function toJSON
         * @memberof pb.CmdShopOrderReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdShopOrderReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdShopOrderReply;
    })();

    pb.CmdShopOrderQuery = (function () {

        /**
         * Properties of a CmdShopOrderQuery.
         * @memberof pb
         * @interface ICmdShopOrderQuery
         * @property {number|null} [uid] CmdShopOrderQuery uid
         * @property {number|Long|null} [orderId] CmdShopOrderQuery orderId
         * @property {pb.AppFrom|null} [from] CmdShopOrderQuery from
         * @property {string|null} [wxResult] CmdShopOrderQuery wxResult
         */

        /**
         * Constructs a new CmdShopOrderQuery.
         * @memberof pb
         * @classdesc Represents a CmdShopOrderQuery.
         * @implements ICmdShopOrderQuery
         * @constructor
         * @param {pb.ICmdShopOrderQuery=} [properties] Properties to set
         */
        function CmdShopOrderQuery(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdShopOrderQuery uid.
         * @member {number} uid
         * @memberof pb.CmdShopOrderQuery
         * @instance
         */
        CmdShopOrderQuery.prototype.uid = 0;

        /**
         * CmdShopOrderQuery orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdShopOrderQuery
         * @instance
         */
        CmdShopOrderQuery.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdShopOrderQuery from.
         * @member {pb.AppFrom} from
         * @memberof pb.CmdShopOrderQuery
         * @instance
         */
        CmdShopOrderQuery.prototype.from = 0;

        /**
         * CmdShopOrderQuery wxResult.
         * @member {string} wxResult
         * @memberof pb.CmdShopOrderQuery
         * @instance
         */
        CmdShopOrderQuery.prototype.wxResult = "";

        /**
         * Creates a new CmdShopOrderQuery instance using the specified properties.
         * @function create
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {pb.ICmdShopOrderQuery=} [properties] Properties to set
         * @returns {pb.CmdShopOrderQuery} CmdShopOrderQuery instance
         */
        CmdShopOrderQuery.create = function create(properties) {
            return new CmdShopOrderQuery(properties);
        };

        /**
         * Encodes the specified CmdShopOrderQuery message. Does not implicitly {@link pb.CmdShopOrderQuery.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {pb.ICmdShopOrderQuery} message CmdShopOrderQuery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdShopOrderQuery.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.orderId);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.from);
            if (message.wxResult != null && Object.hasOwnProperty.call(message, "wxResult"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.wxResult);
            return writer;
        };

        /**
         * Encodes the specified CmdShopOrderQuery message, length delimited. Does not implicitly {@link pb.CmdShopOrderQuery.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {pb.ICmdShopOrderQuery} message CmdShopOrderQuery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdShopOrderQuery.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdShopOrderQuery message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdShopOrderQuery} CmdShopOrderQuery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdShopOrderQuery.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdShopOrderQuery();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.orderId = reader.int64();
                        break;
                    case 3:
                        message.from = reader.int32();
                        break;
                    case 4:
                        message.wxResult = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdShopOrderQuery message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdShopOrderQuery} CmdShopOrderQuery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdShopOrderQuery.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdShopOrderQuery message.
         * @function verify
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdShopOrderQuery.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            if (message.wxResult != null && message.hasOwnProperty("wxResult"))
                if (!$util.isString(message.wxResult))
                    return "wxResult: string expected";
            return null;
        };

        /**
         * Creates a CmdShopOrderQuery message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdShopOrderQuery} CmdShopOrderQuery
         */
        CmdShopOrderQuery.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdShopOrderQuery)
                return object;
            var message = new $root.pb.CmdShopOrderQuery();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            if (object.wxResult != null)
                message.wxResult = String(object.wxResult);
            return message;
        };

        /**
         * Creates a plain object from a CmdShopOrderQuery message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdShopOrderQuery
         * @static
         * @param {pb.CmdShopOrderQuery} message CmdShopOrderQuery
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdShopOrderQuery.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
                object.from = options.enums === String ? "Ios_000" : 0;
                object.wxResult = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            if (message.wxResult != null && message.hasOwnProperty("wxResult"))
                object.wxResult = message.wxResult;
            return object;
        };

        /**
         * Converts this CmdShopOrderQuery to JSON.
         * @function toJSON
         * @memberof pb.CmdShopOrderQuery
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdShopOrderQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdShopOrderQuery;
    })();

    pb.CmdMobileBind = (function () {

        /**
         * Properties of a CmdMobileBind.
         * @memberof pb
         * @interface ICmdMobileBind
         * @property {string|null} [mobile] CmdMobileBind mobile
         * @property {string|null} [smsCode] CmdMobileBind smsCode
         */

        /**
         * Constructs a new CmdMobileBind.
         * @memberof pb
         * @classdesc Represents a CmdMobileBind.
         * @implements ICmdMobileBind
         * @constructor
         * @param {pb.ICmdMobileBind=} [properties] Properties to set
         */
        function CmdMobileBind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdMobileBind mobile.
         * @member {string} mobile
         * @memberof pb.CmdMobileBind
         * @instance
         */
        CmdMobileBind.prototype.mobile = "";

        /**
         * CmdMobileBind smsCode.
         * @member {string} smsCode
         * @memberof pb.CmdMobileBind
         * @instance
         */
        CmdMobileBind.prototype.smsCode = "";

        /**
         * Creates a new CmdMobileBind instance using the specified properties.
         * @function create
         * @memberof pb.CmdMobileBind
         * @static
         * @param {pb.ICmdMobileBind=} [properties] Properties to set
         * @returns {pb.CmdMobileBind} CmdMobileBind instance
         */
        CmdMobileBind.create = function create(properties) {
            return new CmdMobileBind(properties);
        };

        /**
         * Encodes the specified CmdMobileBind message. Does not implicitly {@link pb.CmdMobileBind.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdMobileBind
         * @static
         * @param {pb.ICmdMobileBind} message CmdMobileBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMobileBind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mobile != null && Object.hasOwnProperty.call(message, "mobile"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.mobile);
            if (message.smsCode != null && Object.hasOwnProperty.call(message, "smsCode"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.smsCode);
            return writer;
        };

        /**
         * Encodes the specified CmdMobileBind message, length delimited. Does not implicitly {@link pb.CmdMobileBind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdMobileBind
         * @static
         * @param {pb.ICmdMobileBind} message CmdMobileBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdMobileBind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdMobileBind message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdMobileBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdMobileBind} CmdMobileBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMobileBind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdMobileBind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.mobile = reader.string();
                        break;
                    case 2:
                        message.smsCode = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdMobileBind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdMobileBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdMobileBind} CmdMobileBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdMobileBind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdMobileBind message.
         * @function verify
         * @memberof pb.CmdMobileBind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdMobileBind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mobile != null && message.hasOwnProperty("mobile"))
                if (!$util.isString(message.mobile))
                    return "mobile: string expected";
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                if (!$util.isString(message.smsCode))
                    return "smsCode: string expected";
            return null;
        };

        /**
         * Creates a CmdMobileBind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdMobileBind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdMobileBind} CmdMobileBind
         */
        CmdMobileBind.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdMobileBind)
                return object;
            var message = new $root.pb.CmdMobileBind();
            if (object.mobile != null)
                message.mobile = String(object.mobile);
            if (object.smsCode != null)
                message.smsCode = String(object.smsCode);
            return message;
        };

        /**
         * Creates a plain object from a CmdMobileBind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdMobileBind
         * @static
         * @param {pb.CmdMobileBind} message CmdMobileBind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdMobileBind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mobile = "";
                object.smsCode = "";
            }
            if (message.mobile != null && message.hasOwnProperty("mobile"))
                object.mobile = message.mobile;
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                object.smsCode = message.smsCode;
            return object;
        };

        /**
         * Converts this CmdMobileBind to JSON.
         * @function toJSON
         * @memberof pb.CmdMobileBind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdMobileBind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdMobileBind;
    })();

    pb.ActivityItem = (function () {

        /**
         * Properties of an ActivityItem.
         * @memberof pb
         * @interface IActivityItem
         * @property {number|null} [id] ActivityItem id
         * @property {string|null} [title] ActivityItem title
         * @property {string|null} [icon] ActivityItem icon
         * @property {string|null} [image] ActivityItem image
         * @property {number|Long|null} [from] ActivityItem from
         * @property {number|Long|null} [to] ActivityItem to
         * @property {number|null} [itemId] ActivityItem itemId
         */

        /**
         * Constructs a new ActivityItem.
         * @memberof pb
         * @classdesc Represents an ActivityItem.
         * @implements IActivityItem
         * @constructor
         * @param {pb.IActivityItem=} [properties] Properties to set
         */
        function ActivityItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActivityItem id.
         * @member {number} id
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.id = 0;

        /**
         * ActivityItem title.
         * @member {string} title
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.title = "";

        /**
         * ActivityItem icon.
         * @member {string} icon
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.icon = "";

        /**
         * ActivityItem image.
         * @member {string} image
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.image = "";

        /**
         * ActivityItem from.
         * @member {number|Long} from
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * ActivityItem to.
         * @member {number|Long} to
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * ActivityItem itemId.
         * @member {number} itemId
         * @memberof pb.ActivityItem
         * @instance
         */
        ActivityItem.prototype.itemId = 0;

        /**
         * Creates a new ActivityItem instance using the specified properties.
         * @function create
         * @memberof pb.ActivityItem
         * @static
         * @param {pb.IActivityItem=} [properties] Properties to set
         * @returns {pb.ActivityItem} ActivityItem instance
         */
        ActivityItem.create = function create(properties) {
            return new ActivityItem(properties);
        };

        /**
         * Encodes the specified ActivityItem message. Does not implicitly {@link pb.ActivityItem.verify|verify} messages.
         * @function encode
         * @memberof pb.ActivityItem
         * @static
         * @param {pb.IActivityItem} message ActivityItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.image);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.from);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.to);
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.itemId);
            return writer;
        };

        /**
         * Encodes the specified ActivityItem message, length delimited. Does not implicitly {@link pb.ActivityItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ActivityItem
         * @static
         * @param {pb.IActivityItem} message ActivityItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActivityItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ActivityItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ActivityItem} ActivityItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ActivityItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.title = reader.string();
                        break;
                    case 3:
                        message.icon = reader.string();
                        break;
                    case 4:
                        message.image = reader.string();
                        break;
                    case 5:
                        message.from = reader.int64();
                        break;
                    case 6:
                        message.to = reader.int64();
                        break;
                    case 7:
                        message.itemId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an ActivityItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ActivityItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ActivityItem} ActivityItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActivityItem message.
         * @function verify
         * @memberof pb.ActivityItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActivityItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.image != null && message.hasOwnProperty("image"))
                if (!$util.isString(message.image))
                    return "image: string expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            return null;
        };

        /**
         * Creates an ActivityItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ActivityItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ActivityItem} ActivityItem
         */
        ActivityItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ActivityItem)
                return object;
            var message = new $root.pb.ActivityItem();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.image != null)
                message.image = String(object.image);
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.itemId != null)
                message.itemId = object.itemId | 0;
            return message;
        };

        /**
         * Creates a plain object from an ActivityItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ActivityItem
         * @static
         * @param {pb.ActivityItem} message ActivityItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActivityItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.title = "";
                object.icon = "";
                object.image = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.itemId = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.image != null && message.hasOwnProperty("image"))
                object.image = message.image;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            return object;
        };

        /**
         * Converts this ActivityItem to JSON.
         * @function toJSON
         * @memberof pb.ActivityItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActivityItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActivityItem;
    })();

    pb.ActivityConf = (function () {

        /**
         * Properties of an ActivityConf.
         * @memberof pb
         * @interface IActivityConf
         * @property {Array.<pb.IActivityItem>|null} [items] ActivityConf items
         */

        /**
         * Constructs a new ActivityConf.
         * @memberof pb
         * @classdesc Represents an ActivityConf.
         * @implements IActivityConf
         * @constructor
         * @param {pb.IActivityConf=} [properties] Properties to set
         */
        function ActivityConf(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActivityConf items.
         * @member {Array.<pb.IActivityItem>} items
         * @memberof pb.ActivityConf
         * @instance
         */
        ActivityConf.prototype.items = $util.emptyArray;

        /**
         * Creates a new ActivityConf instance using the specified properties.
         * @function create
         * @memberof pb.ActivityConf
         * @static
         * @param {pb.IActivityConf=} [properties] Properties to set
         * @returns {pb.ActivityConf} ActivityConf instance
         */
        ActivityConf.create = function create(properties) {
            return new ActivityConf(properties);
        };

        /**
         * Encodes the specified ActivityConf message. Does not implicitly {@link pb.ActivityConf.verify|verify} messages.
         * @function encode
         * @memberof pb.ActivityConf
         * @static
         * @param {pb.IActivityConf} message ActivityConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityConf.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.ActivityItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ActivityConf message, length delimited. Does not implicitly {@link pb.ActivityConf.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ActivityConf
         * @static
         * @param {pb.IActivityConf} message ActivityConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityConf.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActivityConf message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ActivityConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ActivityConf} ActivityConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityConf.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ActivityConf();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.ActivityItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an ActivityConf message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ActivityConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ActivityConf} ActivityConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityConf.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActivityConf message.
         * @function verify
         * @memberof pb.ActivityConf
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActivityConf.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.ActivityItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ActivityConf message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ActivityConf
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ActivityConf} ActivityConf
         */
        ActivityConf.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ActivityConf)
                return object;
            var message = new $root.pb.ActivityConf();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.ActivityConf.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.ActivityConf.items: object expected");
                    message.items[i] = $root.pb.ActivityItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ActivityConf message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ActivityConf
         * @static
         * @param {pb.ActivityConf} message ActivityConf
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActivityConf.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.ActivityItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this ActivityConf to JSON.
         * @function toJSON
         * @memberof pb.ActivityConf
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActivityConf.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActivityConf;
    })();

    pb.ActivityLogs = (function () {

        /**
         * Properties of an ActivityLogs.
         * @memberof pb
         * @interface IActivityLogs
         * @property {Array.<number>|null} [ids] ActivityLogs ids
         */

        /**
         * Constructs a new ActivityLogs.
         * @memberof pb
         * @classdesc Represents an ActivityLogs.
         * @implements IActivityLogs
         * @constructor
         * @param {pb.IActivityLogs=} [properties] Properties to set
         */
        function ActivityLogs(properties) {
            this.ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActivityLogs ids.
         * @member {Array.<number>} ids
         * @memberof pb.ActivityLogs
         * @instance
         */
        ActivityLogs.prototype.ids = $util.emptyArray;

        /**
         * Creates a new ActivityLogs instance using the specified properties.
         * @function create
         * @memberof pb.ActivityLogs
         * @static
         * @param {pb.IActivityLogs=} [properties] Properties to set
         * @returns {pb.ActivityLogs} ActivityLogs instance
         */
        ActivityLogs.create = function create(properties) {
            return new ActivityLogs(properties);
        };

        /**
         * Encodes the specified ActivityLogs message. Does not implicitly {@link pb.ActivityLogs.verify|verify} messages.
         * @function encode
         * @memberof pb.ActivityLogs
         * @static
         * @param {pb.IActivityLogs} message ActivityLogs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityLogs.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ids != null && message.ids.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.ids.length; ++i)
                    writer.int32(message.ids[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified ActivityLogs message, length delimited. Does not implicitly {@link pb.ActivityLogs.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ActivityLogs
         * @static
         * @param {pb.IActivityLogs} message ActivityLogs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityLogs.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActivityLogs message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ActivityLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ActivityLogs} ActivityLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityLogs.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ActivityLogs();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.ids && message.ids.length))
                            message.ids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ids.push(reader.int32());
                        } else
                            message.ids.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an ActivityLogs message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ActivityLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ActivityLogs} ActivityLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityLogs.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActivityLogs message.
         * @function verify
         * @memberof pb.ActivityLogs
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActivityLogs.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ids != null && message.hasOwnProperty("ids")) {
                if (!Array.isArray(message.ids))
                    return "ids: array expected";
                for (var i = 0; i < message.ids.length; ++i)
                    if (!$util.isInteger(message.ids[i]))
                        return "ids: integer[] expected";
            }
            return null;
        };

        /**
         * Creates an ActivityLogs message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ActivityLogs
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ActivityLogs} ActivityLogs
         */
        ActivityLogs.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ActivityLogs)
                return object;
            var message = new $root.pb.ActivityLogs();
            if (object.ids) {
                if (!Array.isArray(object.ids))
                    throw TypeError(".pb.ActivityLogs.ids: array expected");
                message.ids = [];
                for (var i = 0; i < object.ids.length; ++i)
                    message.ids[i] = object.ids[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from an ActivityLogs message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ActivityLogs
         * @static
         * @param {pb.ActivityLogs} message ActivityLogs
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActivityLogs.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ids = [];
            if (message.ids && message.ids.length) {
                object.ids = [];
                for (var j = 0; j < message.ids.length; ++j)
                    object.ids[j] = message.ids[j];
            }
            return object;
        };

        /**
         * Converts this ActivityLogs to JSON.
         * @function toJSON
         * @memberof pb.ActivityLogs
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActivityLogs.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActivityLogs;
    })();

    pb.CmdGoldAwardPrompt = (function () {

        /**
         * Properties of a CmdGoldAwardPrompt.
         * @memberof pb
         * @interface ICmdGoldAwardPrompt
         * @property {string|null} [text] CmdGoldAwardPrompt text
         * @property {number|null} [gold] CmdGoldAwardPrompt gold
         */

        /**
         * Constructs a new CmdGoldAwardPrompt.
         * @memberof pb
         * @classdesc Represents a CmdGoldAwardPrompt.
         * @implements ICmdGoldAwardPrompt
         * @constructor
         * @param {pb.ICmdGoldAwardPrompt=} [properties] Properties to set
         */
        function CmdGoldAwardPrompt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGoldAwardPrompt text.
         * @member {string} text
         * @memberof pb.CmdGoldAwardPrompt
         * @instance
         */
        CmdGoldAwardPrompt.prototype.text = "";

        /**
         * CmdGoldAwardPrompt gold.
         * @member {number} gold
         * @memberof pb.CmdGoldAwardPrompt
         * @instance
         */
        CmdGoldAwardPrompt.prototype.gold = 0;

        /**
         * Creates a new CmdGoldAwardPrompt instance using the specified properties.
         * @function create
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {pb.ICmdGoldAwardPrompt=} [properties] Properties to set
         * @returns {pb.CmdGoldAwardPrompt} CmdGoldAwardPrompt instance
         */
        CmdGoldAwardPrompt.create = function create(properties) {
            return new CmdGoldAwardPrompt(properties);
        };

        /**
         * Encodes the specified CmdGoldAwardPrompt message. Does not implicitly {@link pb.CmdGoldAwardPrompt.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {pb.ICmdGoldAwardPrompt} message CmdGoldAwardPrompt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGoldAwardPrompt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
            if (message.gold != null && Object.hasOwnProperty.call(message, "gold"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gold);
            return writer;
        };

        /**
         * Encodes the specified CmdGoldAwardPrompt message, length delimited. Does not implicitly {@link pb.CmdGoldAwardPrompt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {pb.ICmdGoldAwardPrompt} message CmdGoldAwardPrompt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGoldAwardPrompt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGoldAwardPrompt message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGoldAwardPrompt} CmdGoldAwardPrompt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGoldAwardPrompt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGoldAwardPrompt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.text = reader.string();
                        break;
                    case 2:
                        message.gold = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGoldAwardPrompt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGoldAwardPrompt} CmdGoldAwardPrompt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGoldAwardPrompt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGoldAwardPrompt message.
         * @function verify
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGoldAwardPrompt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            return null;
        };

        /**
         * Creates a CmdGoldAwardPrompt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGoldAwardPrompt} CmdGoldAwardPrompt
         */
        CmdGoldAwardPrompt.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGoldAwardPrompt)
                return object;
            var message = new $root.pb.CmdGoldAwardPrompt();
            if (object.text != null)
                message.text = String(object.text);
            if (object.gold != null)
                message.gold = object.gold | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdGoldAwardPrompt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGoldAwardPrompt
         * @static
         * @param {pb.CmdGoldAwardPrompt} message CmdGoldAwardPrompt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGoldAwardPrompt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.text = "";
                object.gold = 0;
            }
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            return object;
        };

        /**
         * Converts this CmdGoldAwardPrompt to JSON.
         * @function toJSON
         * @memberof pb.CmdGoldAwardPrompt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGoldAwardPrompt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGoldAwardPrompt;
    })();

    pb.CmdExchange = (function () {

        /**
         * Properties of a CmdExchange.
         * @memberof pb
         * @interface ICmdExchange
         * @property {pb.ExchangeType|null} [type] CmdExchange type
         * @property {number|Long|null} [amount] CmdExchange amount
         * @property {number|Long|null} [uid] CmdExchange uid
         */

        /**
         * Constructs a new CmdExchange.
         * @memberof pb
         * @classdesc Represents a CmdExchange.
         * @implements ICmdExchange
         * @constructor
         * @param {pb.ICmdExchange=} [properties] Properties to set
         */
        function CmdExchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdExchange type.
         * @member {pb.ExchangeType} type
         * @memberof pb.CmdExchange
         * @instance
         */
        CmdExchange.prototype.type = 0;

        /**
         * CmdExchange amount.
         * @member {number|Long} amount
         * @memberof pb.CmdExchange
         * @instance
         */
        CmdExchange.prototype.amount = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdExchange uid.
         * @member {number|Long} uid
         * @memberof pb.CmdExchange
         * @instance
         */
        CmdExchange.prototype.uid = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdExchange instance using the specified properties.
         * @function create
         * @memberof pb.CmdExchange
         * @static
         * @param {pb.ICmdExchange=} [properties] Properties to set
         * @returns {pb.CmdExchange} CmdExchange instance
         */
        CmdExchange.create = function create(properties) {
            return new CmdExchange(properties);
        };

        /**
         * Encodes the specified CmdExchange message. Does not implicitly {@link pb.CmdExchange.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdExchange
         * @static
         * @param {pb.ICmdExchange} message CmdExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.amount);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdExchange message, length delimited. Does not implicitly {@link pb.CmdExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdExchange
         * @static
         * @param {pb.ICmdExchange} message CmdExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdExchange message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdExchange} CmdExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdExchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdExchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.amount = reader.int64();
                        break;
                    case 3:
                        message.uid = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdExchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdExchange} CmdExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdExchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdExchange message.
         * @function verify
         * @memberof pb.CmdExchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdExchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                    return "amount: integer|Long expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdExchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdExchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdExchange} CmdExchange
         */
        CmdExchange.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdExchange)
                return object;
            var message = new $root.pb.CmdExchange();
            switch (object.type) {
                case "ExchangeType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "ExchangeType_K2Coupon":
                case 1:
                    message.type = 1;
                    break;
                case "ExchangeType_K2Capital":
                case 2:
                    message.type = 2;
                    break;
            }
            if (object.amount != null)
                if ($util.Long)
                    (message.amount = $util.Long.fromValue(object.amount)).unsigned = false;
                else if (typeof object.amount === "string")
                    message.amount = parseInt(object.amount, 10);
                else if (typeof object.amount === "number")
                    message.amount = object.amount;
                else if (typeof object.amount === "object")
                    message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber();
            if (object.uid != null)
                if ($util.Long)
                    (message.uid = $util.Long.fromValue(object.uid)).unsigned = false;
                else if (typeof object.uid === "string")
                    message.uid = parseInt(object.uid, 10);
                else if (typeof object.uid === "number")
                    message.uid = object.uid;
                else if (typeof object.uid === "object")
                    message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdExchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdExchange
         * @static
         * @param {pb.CmdExchange} message CmdExchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdExchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = options.enums === String ? "ExchangeType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.amount = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uid = options.longs === String ? "0" : 0;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.ExchangeType[message.type] : message.type;
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (typeof message.amount === "number")
                    object.amount = options.longs === String ? String(message.amount) : message.amount;
                else
                    object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber() : message.amount;
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (typeof message.uid === "number")
                    object.uid = options.longs === String ? String(message.uid) : message.uid;
                else
                    object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber() : message.uid;
            return object;
        };

        /**
         * Converts this CmdExchange to JSON.
         * @function toJSON
         * @memberof pb.CmdExchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdExchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdExchange;
    })();

    /**
     * KType enum.
     * @name pb.KType
     * @enum {number}
     * @property {number} KType_NULL=0 KType_NULL value
     * @property {number} Real=1 Real value
     * @property {number} Min=2 Min value
     * @property {number} MinToday=3 MinToday value
     * @property {number} Min5=4 Min5 value
     * @property {number} Min15=5 Min15 value
     * @property {number} Min30=6 Min30 value
     * @property {number} Min60=7 Min60 value
     * @property {number} Day=10 Day value
     * @property {number} Day7=11 Day7 value
     * @property {number} Day30=12 Day30 value
     */
    pb.KType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "KType_NULL"] = 0;
        values[valuesById[1] = "Real"] = 1;
        values[valuesById[2] = "Min"] = 2;
        values[valuesById[3] = "MinToday"] = 3;
        values[valuesById[4] = "Min5"] = 4;
        values[valuesById[5] = "Min15"] = 5;
        values[valuesById[6] = "Min30"] = 6;
        values[valuesById[7] = "Min60"] = 7;
        values[valuesById[10] = "Day"] = 10;
        values[valuesById[11] = "Day7"] = 11;
        values[valuesById[12] = "Day30"] = 12;
        return values;
    })();

    /**
     * KStyle enum.
     * @name pb.KStyle
     * @enum {number}
     * @property {number} Random=0 Random value
     * @property {number} Wave=1 Wave value
     * @property {number} Up=2 Up value
     * @property {number} Down=3 Down value
     */
    pb.KStyle = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Random"] = 0;
        values[valuesById[1] = "Wave"] = 1;
        values[valuesById[2] = "Up"] = 2;
        values[valuesById[3] = "Down"] = 3;
        return values;
    })();

    pb.CmdQuoteQuery = (function () {

        /**
         * Properties of a CmdQuoteQuery.
         * @memberof pb
         * @interface ICmdQuoteQuery
         * @property {pb.KType|null} [ktype] CmdQuoteQuery ktype
         * @property {number|null} [code] CmdQuoteQuery code
         * @property {number|Long|null} [from] CmdQuoteQuery from
         * @property {number|null} [total] CmdQuoteQuery total
         * @property {number|Long|null} [to] CmdQuoteQuery to
         * @property {pb.KStyle|null} [kstyle] CmdQuoteQuery kstyle
         * @property {number|null} [reserve] CmdQuoteQuery reserve
         */

        /**
         * Constructs a new CmdQuoteQuery.
         * @memberof pb
         * @classdesc Represents a CmdQuoteQuery.
         * @implements ICmdQuoteQuery
         * @constructor
         * @param {pb.ICmdQuoteQuery=} [properties] Properties to set
         */
        function CmdQuoteQuery(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQuoteQuery ktype.
         * @member {pb.KType} ktype
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.ktype = 0;

        /**
         * CmdQuoteQuery code.
         * @member {number} code
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.code = 0;

        /**
         * CmdQuoteQuery from.
         * @member {number|Long} from
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQuoteQuery total.
         * @member {number} total
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.total = 0;

        /**
         * CmdQuoteQuery to.
         * @member {number|Long} to
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQuoteQuery kstyle.
         * @member {pb.KStyle} kstyle
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.kstyle = 0;

        /**
         * CmdQuoteQuery reserve.
         * @member {number} reserve
         * @memberof pb.CmdQuoteQuery
         * @instance
         */
        CmdQuoteQuery.prototype.reserve = 0;

        /**
         * Creates a new CmdQuoteQuery instance using the specified properties.
         * @function create
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {pb.ICmdQuoteQuery=} [properties] Properties to set
         * @returns {pb.CmdQuoteQuery} CmdQuoteQuery instance
         */
        CmdQuoteQuery.create = function create(properties) {
            return new CmdQuoteQuery(properties);
        };

        /**
         * Encodes the specified CmdQuoteQuery message. Does not implicitly {@link pb.CmdQuoteQuery.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {pb.ICmdQuoteQuery} message CmdQuoteQuery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteQuery.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ktype);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.from);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.total);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.to);
            if (message.kstyle != null && Object.hasOwnProperty.call(message, "kstyle"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kstyle);
            if (message.reserve != null && Object.hasOwnProperty.call(message, "reserve"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.reserve);
            return writer;
        };

        /**
         * Encodes the specified CmdQuoteQuery message, length delimited. Does not implicitly {@link pb.CmdQuoteQuery.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {pb.ICmdQuoteQuery} message CmdQuoteQuery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteQuery.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQuoteQuery message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQuoteQuery} CmdQuoteQuery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteQuery.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQuoteQuery();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ktype = reader.int32();
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.from = reader.int64();
                        break;
                    case 4:
                        message.total = reader.int32();
                        break;
                    case 5:
                        message.to = reader.int64();
                        break;
                    case 6:
                        message.kstyle = reader.int32();
                        break;
                    case 7:
                        message.reserve = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQuoteQuery message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQuoteQuery} CmdQuoteQuery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteQuery.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQuoteQuery message.
         * @function verify
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQuoteQuery.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.kstyle != null && message.hasOwnProperty("kstyle"))
                switch (message.kstyle) {
                    default:
                        return "kstyle: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                }
            if (message.reserve != null && message.hasOwnProperty("reserve"))
                if (!$util.isInteger(message.reserve))
                    return "reserve: integer expected";
            return null;
        };

        /**
         * Creates a CmdQuoteQuery message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQuoteQuery} CmdQuoteQuery
         */
        CmdQuoteQuery.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQuoteQuery)
                return object;
            var message = new $root.pb.CmdQuoteQuery();
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.code != null)
                message.code = object.code >>> 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            switch (object.kstyle) {
                case "Random":
                case 0:
                    message.kstyle = 0;
                    break;
                case "Wave":
                case 1:
                    message.kstyle = 1;
                    break;
                case "Up":
                case 2:
                    message.kstyle = 2;
                    break;
                case "Down":
                case 3:
                    message.kstyle = 3;
                    break;
            }
            if (object.reserve != null)
                message.reserve = object.reserve | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdQuoteQuery message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQuoteQuery
         * @static
         * @param {pb.CmdQuoteQuery} message CmdQuoteQuery
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQuoteQuery.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                object.code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                object.total = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.kstyle = options.enums === String ? "Random" : 0;
                object.reserve = 0;
            }
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.kstyle != null && message.hasOwnProperty("kstyle"))
                object.kstyle = options.enums === String ? $root.pb.KStyle[message.kstyle] : message.kstyle;
            if (message.reserve != null && message.hasOwnProperty("reserve"))
                object.reserve = message.reserve;
            return object;
        };

        /**
         * Converts this CmdQuoteQuery to JSON.
         * @function toJSON
         * @memberof pb.CmdQuoteQuery
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQuoteQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQuoteQuery;
    })();

    pb.QuoteItem = (function () {

        /**
         * Properties of a QuoteItem.
         * @memberof pb
         * @interface IQuoteItem
         * @property {number|null} [code] QuoteItem code
         * @property {pb.KType|null} [ktype] QuoteItem ktype
         * @property {number|Long|null} [timestamp] QuoteItem timestamp
         * @property {number|null} [price] QuoteItem price
         * @property {number|Long|null} [volume] QuoteItem volume
         * @property {number|null} [amount] QuoteItem amount
         * @property {number|Long|null} [count] QuoteItem count
         * @property {number|null} [open] QuoteItem open
         * @property {number|null} [close] QuoteItem close
         * @property {number|null} [high] QuoteItem high
         * @property {number|null} [low] QuoteItem low
         * @property {Array.<number>|null} [ask5Price] QuoteItem ask5Price
         * @property {Array.<number|Long>|null} [ask5Volume] QuoteItem ask5Volume
         * @property {Array.<number>|null} [bid5Price] QuoteItem bid5Price
         * @property {Array.<number|Long>|null} [bid5Volume] QuoteItem bid5Volume
         */

        /**
         * Constructs a new QuoteItem.
         * @memberof pb
         * @classdesc Represents a QuoteItem.
         * @implements IQuoteItem
         * @constructor
         * @param {pb.IQuoteItem=} [properties] Properties to set
         */
        function QuoteItem(properties) {
            this.ask5Price = [];
            this.ask5Volume = [];
            this.bid5Price = [];
            this.bid5Volume = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QuoteItem code.
         * @member {number} code
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.code = 0;

        /**
         * QuoteItem ktype.
         * @member {pb.KType} ktype
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.ktype = 0;

        /**
         * QuoteItem timestamp.
         * @member {number|Long} timestamp
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * QuoteItem price.
         * @member {number} price
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.price = 0;

        /**
         * QuoteItem volume.
         * @member {number|Long} volume
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.volume = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

        /**
         * QuoteItem amount.
         * @member {number} amount
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.amount = 0;

        /**
         * QuoteItem count.
         * @member {number|Long} count
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.count = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

        /**
         * QuoteItem open.
         * @member {number} open
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.open = 0;

        /**
         * QuoteItem close.
         * @member {number} close
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.close = 0;

        /**
         * QuoteItem high.
         * @member {number} high
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.high = 0;

        /**
         * QuoteItem low.
         * @member {number} low
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.low = 0;

        /**
         * QuoteItem ask5Price.
         * @member {Array.<number>} ask5Price
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.ask5Price = $util.emptyArray;

        /**
         * QuoteItem ask5Volume.
         * @member {Array.<number|Long>} ask5Volume
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.ask5Volume = $util.emptyArray;

        /**
         * QuoteItem bid5Price.
         * @member {Array.<number>} bid5Price
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.bid5Price = $util.emptyArray;

        /**
         * QuoteItem bid5Volume.
         * @member {Array.<number|Long>} bid5Volume
         * @memberof pb.QuoteItem
         * @instance
         */
        QuoteItem.prototype.bid5Volume = $util.emptyArray;

        /**
         * Creates a new QuoteItem instance using the specified properties.
         * @function create
         * @memberof pb.QuoteItem
         * @static
         * @param {pb.IQuoteItem=} [properties] Properties to set
         * @returns {pb.QuoteItem} QuoteItem instance
         */
        QuoteItem.create = function create(properties) {
            return new QuoteItem(properties);
        };

        /**
         * Encodes the specified QuoteItem message. Does not implicitly {@link pb.QuoteItem.verify|verify} messages.
         * @function encode
         * @memberof pb.QuoteItem
         * @static
         * @param {pb.IQuoteItem} message QuoteItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ktype);
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
            if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.price);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.volume);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.amount);
            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.count);
            if (message.open != null && Object.hasOwnProperty.call(message, "open"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.open);
            if (message.close != null && Object.hasOwnProperty.call(message, "close"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.close);
            if (message.high != null && Object.hasOwnProperty.call(message, "high"))
                writer.uint32(/* id 10, wireType 1 =*/81).double(message.high);
            if (message.low != null && Object.hasOwnProperty.call(message, "low"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.low);
            if (message.ask5Price != null && message.ask5Price.length) {
                writer.uint32(/* id 12, wireType 2 =*/98).fork();
                for (var i = 0; i < message.ask5Price.length; ++i)
                    writer.double(message.ask5Price[i]);
                writer.ldelim();
            }
            if (message.ask5Volume != null && message.ask5Volume.length) {
                writer.uint32(/* id 13, wireType 2 =*/106).fork();
                for (var i = 0; i < message.ask5Volume.length; ++i)
                    writer.uint64(message.ask5Volume[i]);
                writer.ldelim();
            }
            if (message.bid5Price != null && message.bid5Price.length) {
                writer.uint32(/* id 14, wireType 2 =*/114).fork();
                for (var i = 0; i < message.bid5Price.length; ++i)
                    writer.double(message.bid5Price[i]);
                writer.ldelim();
            }
            if (message.bid5Volume != null && message.bid5Volume.length) {
                writer.uint32(/* id 15, wireType 2 =*/122).fork();
                for (var i = 0; i < message.bid5Volume.length; ++i)
                    writer.uint64(message.bid5Volume[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified QuoteItem message, length delimited. Does not implicitly {@link pb.QuoteItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.QuoteItem
         * @static
         * @param {pb.IQuoteItem} message QuoteItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QuoteItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.QuoteItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.QuoteItem} QuoteItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.QuoteItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.ktype = reader.int32();
                        break;
                    case 3:
                        message.timestamp = reader.int64();
                        break;
                    case 4:
                        message.price = reader.double();
                        break;
                    case 5:
                        message.volume = reader.uint64();
                        break;
                    case 6:
                        message.amount = reader.double();
                        break;
                    case 7:
                        message.count = reader.uint64();
                        break;
                    case 8:
                        message.open = reader.double();
                        break;
                    case 9:
                        message.close = reader.double();
                        break;
                    case 10:
                        message.high = reader.double();
                        break;
                    case 11:
                        message.low = reader.double();
                        break;
                    case 12:
                        if (!(message.ask5Price && message.ask5Price.length))
                            message.ask5Price = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ask5Price.push(reader.double());
                        } else
                            message.ask5Price.push(reader.double());
                        break;
                    case 13:
                        if (!(message.ask5Volume && message.ask5Volume.length))
                            message.ask5Volume = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ask5Volume.push(reader.uint64());
                        } else
                            message.ask5Volume.push(reader.uint64());
                        break;
                    case 14:
                        if (!(message.bid5Price && message.bid5Price.length))
                            message.bid5Price = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.bid5Price.push(reader.double());
                        } else
                            message.bid5Price.push(reader.double());
                        break;
                    case 15:
                        if (!(message.bid5Volume && message.bid5Volume.length))
                            message.bid5Volume = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.bid5Volume.push(reader.uint64());
                        } else
                            message.bid5Volume.push(reader.uint64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a QuoteItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.QuoteItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.QuoteItem} QuoteItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QuoteItem message.
         * @function verify
         * @memberof pb.QuoteItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QuoteItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (typeof message.price !== "number")
                    return "price: number expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))
                    return "volume: integer|Long expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (typeof message.amount !== "number")
                    return "amount: number expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                    return "count: integer|Long expected";
            if (message.open != null && message.hasOwnProperty("open"))
                if (typeof message.open !== "number")
                    return "open: number expected";
            if (message.close != null && message.hasOwnProperty("close"))
                if (typeof message.close !== "number")
                    return "close: number expected";
            if (message.high != null && message.hasOwnProperty("high"))
                if (typeof message.high !== "number")
                    return "high: number expected";
            if (message.low != null && message.hasOwnProperty("low"))
                if (typeof message.low !== "number")
                    return "low: number expected";
            if (message.ask5Price != null && message.hasOwnProperty("ask5Price")) {
                if (!Array.isArray(message.ask5Price))
                    return "ask5Price: array expected";
                for (var i = 0; i < message.ask5Price.length; ++i)
                    if (typeof message.ask5Price[i] !== "number")
                        return "ask5Price: number[] expected";
            }
            if (message.ask5Volume != null && message.hasOwnProperty("ask5Volume")) {
                if (!Array.isArray(message.ask5Volume))
                    return "ask5Volume: array expected";
                for (var i = 0; i < message.ask5Volume.length; ++i)
                    if (!$util.isInteger(message.ask5Volume[i]) && !(message.ask5Volume[i] && $util.isInteger(message.ask5Volume[i].low) && $util.isInteger(message.ask5Volume[i].high)))
                        return "ask5Volume: integer|Long[] expected";
            }
            if (message.bid5Price != null && message.hasOwnProperty("bid5Price")) {
                if (!Array.isArray(message.bid5Price))
                    return "bid5Price: array expected";
                for (var i = 0; i < message.bid5Price.length; ++i)
                    if (typeof message.bid5Price[i] !== "number")
                        return "bid5Price: number[] expected";
            }
            if (message.bid5Volume != null && message.hasOwnProperty("bid5Volume")) {
                if (!Array.isArray(message.bid5Volume))
                    return "bid5Volume: array expected";
                for (var i = 0; i < message.bid5Volume.length; ++i)
                    if (!$util.isInteger(message.bid5Volume[i]) && !(message.bid5Volume[i] && $util.isInteger(message.bid5Volume[i].low) && $util.isInteger(message.bid5Volume[i].high)))
                        return "bid5Volume: integer|Long[] expected";
            }
            return null;
        };

        /**
         * Creates a QuoteItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.QuoteItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.QuoteItem} QuoteItem
         */
        QuoteItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.QuoteItem)
                return object;
            var message = new $root.pb.QuoteItem();
            if (object.code != null)
                message.code = object.code >>> 0;
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
            if (object.price != null)
                message.price = Number(object.price);
            if (object.volume != null)
                if ($util.Long)
                    (message.volume = $util.Long.fromValue(object.volume)).unsigned = true;
                else if (typeof object.volume === "string")
                    message.volume = parseInt(object.volume, 10);
                else if (typeof object.volume === "number")
                    message.volume = object.volume;
                else if (typeof object.volume === "object")
                    message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber(true);
            if (object.amount != null)
                message.amount = Number(object.amount);
            if (object.count != null)
                if ($util.Long)
                    (message.count = $util.Long.fromValue(object.count)).unsigned = true;
                else if (typeof object.count === "string")
                    message.count = parseInt(object.count, 10);
                else if (typeof object.count === "number")
                    message.count = object.count;
                else if (typeof object.count === "object")
                    message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber(true);
            if (object.open != null)
                message.open = Number(object.open);
            if (object.close != null)
                message.close = Number(object.close);
            if (object.high != null)
                message.high = Number(object.high);
            if (object.low != null)
                message.low = Number(object.low);
            if (object.ask5Price) {
                if (!Array.isArray(object.ask5Price))
                    throw TypeError(".pb.QuoteItem.ask5Price: array expected");
                message.ask5Price = [];
                for (var i = 0; i < object.ask5Price.length; ++i)
                    message.ask5Price[i] = Number(object.ask5Price[i]);
            }
            if (object.ask5Volume) {
                if (!Array.isArray(object.ask5Volume))
                    throw TypeError(".pb.QuoteItem.ask5Volume: array expected");
                message.ask5Volume = [];
                for (var i = 0; i < object.ask5Volume.length; ++i)
                    if ($util.Long)
                        (message.ask5Volume[i] = $util.Long.fromValue(object.ask5Volume[i])).unsigned = true;
                    else if (typeof object.ask5Volume[i] === "string")
                        message.ask5Volume[i] = parseInt(object.ask5Volume[i], 10);
                    else if (typeof object.ask5Volume[i] === "number")
                        message.ask5Volume[i] = object.ask5Volume[i];
                    else if (typeof object.ask5Volume[i] === "object")
                        message.ask5Volume[i] = new $util.LongBits(object.ask5Volume[i].low >>> 0, object.ask5Volume[i].high >>> 0).toNumber(true);
            }
            if (object.bid5Price) {
                if (!Array.isArray(object.bid5Price))
                    throw TypeError(".pb.QuoteItem.bid5Price: array expected");
                message.bid5Price = [];
                for (var i = 0; i < object.bid5Price.length; ++i)
                    message.bid5Price[i] = Number(object.bid5Price[i]);
            }
            if (object.bid5Volume) {
                if (!Array.isArray(object.bid5Volume))
                    throw TypeError(".pb.QuoteItem.bid5Volume: array expected");
                message.bid5Volume = [];
                for (var i = 0; i < object.bid5Volume.length; ++i)
                    if ($util.Long)
                        (message.bid5Volume[i] = $util.Long.fromValue(object.bid5Volume[i])).unsigned = true;
                    else if (typeof object.bid5Volume[i] === "string")
                        message.bid5Volume[i] = parseInt(object.bid5Volume[i], 10);
                    else if (typeof object.bid5Volume[i] === "number")
                        message.bid5Volume[i] = object.bid5Volume[i];
                    else if (typeof object.bid5Volume[i] === "object")
                        message.bid5Volume[i] = new $util.LongBits(object.bid5Volume[i].low >>> 0, object.bid5Volume[i].high >>> 0).toNumber(true);
            }
            return message;
        };

        /**
         * Creates a plain object from a QuoteItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.QuoteItem
         * @static
         * @param {pb.QuoteItem} message QuoteItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QuoteItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ask5Price = [];
                object.ask5Volume = [];
                object.bid5Price = [];
                object.bid5Volume = [];
            }
            if (options.defaults) {
                object.code = 0;
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.price = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.volume = options.longs === String ? "0" : 0;
                object.amount = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.count = options.longs === String ? "0" : 0;
                object.open = 0;
                object.close = 0;
                object.high = 0;
                object.low = 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (typeof message.volume === "number")
                    object.volume = options.longs === String ? String(message.volume) : message.volume;
                else
                    object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber(true) : message.volume;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
            if (message.count != null && message.hasOwnProperty("count"))
                if (typeof message.count === "number")
                    object.count = options.longs === String ? String(message.count) : message.count;
                else
                    object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber(true) : message.count;
            if (message.open != null && message.hasOwnProperty("open"))
                object.open = options.json && !isFinite(message.open) ? String(message.open) : message.open;
            if (message.close != null && message.hasOwnProperty("close"))
                object.close = options.json && !isFinite(message.close) ? String(message.close) : message.close;
            if (message.high != null && message.hasOwnProperty("high"))
                object.high = options.json && !isFinite(message.high) ? String(message.high) : message.high;
            if (message.low != null && message.hasOwnProperty("low"))
                object.low = options.json && !isFinite(message.low) ? String(message.low) : message.low;
            if (message.ask5Price && message.ask5Price.length) {
                object.ask5Price = [];
                for (var j = 0; j < message.ask5Price.length; ++j)
                    object.ask5Price[j] = options.json && !isFinite(message.ask5Price[j]) ? String(message.ask5Price[j]) : message.ask5Price[j];
            }
            if (message.ask5Volume && message.ask5Volume.length) {
                object.ask5Volume = [];
                for (var j = 0; j < message.ask5Volume.length; ++j)
                    if (typeof message.ask5Volume[j] === "number")
                        object.ask5Volume[j] = options.longs === String ? String(message.ask5Volume[j]) : message.ask5Volume[j];
                    else
                        object.ask5Volume[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ask5Volume[j]) : options.longs === Number ? new $util.LongBits(message.ask5Volume[j].low >>> 0, message.ask5Volume[j].high >>> 0).toNumber(true) : message.ask5Volume[j];
            }
            if (message.bid5Price && message.bid5Price.length) {
                object.bid5Price = [];
                for (var j = 0; j < message.bid5Price.length; ++j)
                    object.bid5Price[j] = options.json && !isFinite(message.bid5Price[j]) ? String(message.bid5Price[j]) : message.bid5Price[j];
            }
            if (message.bid5Volume && message.bid5Volume.length) {
                object.bid5Volume = [];
                for (var j = 0; j < message.bid5Volume.length; ++j)
                    if (typeof message.bid5Volume[j] === "number")
                        object.bid5Volume[j] = options.longs === String ? String(message.bid5Volume[j]) : message.bid5Volume[j];
                    else
                        object.bid5Volume[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bid5Volume[j]) : options.longs === Number ? new $util.LongBits(message.bid5Volume[j].low >>> 0, message.bid5Volume[j].high >>> 0).toNumber(true) : message.bid5Volume[j];
            }
            return object;
        };

        /**
         * Converts this QuoteItem to JSON.
         * @function toJSON
         * @memberof pb.QuoteItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QuoteItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QuoteItem;
    })();

    pb.Quotes = (function () {

        /**
         * Properties of a Quotes.
         * @memberof pb
         * @interface IQuotes
         * @property {Array.<pb.IQuoteItem>|null} [items] Quotes items
         */

        /**
         * Constructs a new Quotes.
         * @memberof pb
         * @classdesc Represents a Quotes.
         * @implements IQuotes
         * @constructor
         * @param {pb.IQuotes=} [properties] Properties to set
         */
        function Quotes(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Quotes items.
         * @member {Array.<pb.IQuoteItem>} items
         * @memberof pb.Quotes
         * @instance
         */
        Quotes.prototype.items = $util.emptyArray;

        /**
         * Creates a new Quotes instance using the specified properties.
         * @function create
         * @memberof pb.Quotes
         * @static
         * @param {pb.IQuotes=} [properties] Properties to set
         * @returns {pb.Quotes} Quotes instance
         */
        Quotes.create = function create(properties) {
            return new Quotes(properties);
        };

        /**
         * Encodes the specified Quotes message. Does not implicitly {@link pb.Quotes.verify|verify} messages.
         * @function encode
         * @memberof pb.Quotes
         * @static
         * @param {pb.IQuotes} message Quotes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Quotes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.QuoteItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Quotes message, length delimited. Does not implicitly {@link pb.Quotes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Quotes
         * @static
         * @param {pb.IQuotes} message Quotes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Quotes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Quotes message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Quotes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Quotes} Quotes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Quotes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Quotes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.QuoteItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Quotes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Quotes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Quotes} Quotes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Quotes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Quotes message.
         * @function verify
         * @memberof pb.Quotes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Quotes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.QuoteItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Quotes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Quotes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Quotes} Quotes
         */
        Quotes.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Quotes)
                return object;
            var message = new $root.pb.Quotes();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.Quotes.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.Quotes.items: object expected");
                    message.items[i] = $root.pb.QuoteItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Quotes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Quotes
         * @static
         * @param {pb.Quotes} message Quotes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Quotes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.QuoteItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this Quotes to JSON.
         * @function toJSON
         * @memberof pb.Quotes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Quotes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Quotes;
    })();

    pb.QuoteSubscribeItem = (function () {

        /**
         * Properties of a QuoteSubscribeItem.
         * @memberof pb
         * @interface IQuoteSubscribeItem
         * @property {string|null} [code] QuoteSubscribeItem code
         * @property {boolean|null} [flag] QuoteSubscribeItem flag
         */

        /**
         * Constructs a new QuoteSubscribeItem.
         * @memberof pb
         * @classdesc Represents a QuoteSubscribeItem.
         * @implements IQuoteSubscribeItem
         * @constructor
         * @param {pb.IQuoteSubscribeItem=} [properties] Properties to set
         */
        function QuoteSubscribeItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QuoteSubscribeItem code.
         * @member {string} code
         * @memberof pb.QuoteSubscribeItem
         * @instance
         */
        QuoteSubscribeItem.prototype.code = "";

        /**
         * QuoteSubscribeItem flag.
         * @member {boolean} flag
         * @memberof pb.QuoteSubscribeItem
         * @instance
         */
        QuoteSubscribeItem.prototype.flag = false;

        /**
         * Creates a new QuoteSubscribeItem instance using the specified properties.
         * @function create
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {pb.IQuoteSubscribeItem=} [properties] Properties to set
         * @returns {pb.QuoteSubscribeItem} QuoteSubscribeItem instance
         */
        QuoteSubscribeItem.create = function create(properties) {
            return new QuoteSubscribeItem(properties);
        };

        /**
         * Encodes the specified QuoteSubscribeItem message. Does not implicitly {@link pb.QuoteSubscribeItem.verify|verify} messages.
         * @function encode
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {pb.IQuoteSubscribeItem} message QuoteSubscribeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteSubscribeItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified QuoteSubscribeItem message, length delimited. Does not implicitly {@link pb.QuoteSubscribeItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {pb.IQuoteSubscribeItem} message QuoteSubscribeItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteSubscribeItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QuoteSubscribeItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.QuoteSubscribeItem} QuoteSubscribeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteSubscribeItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.QuoteSubscribeItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.string();
                        break;
                    case 2:
                        message.flag = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a QuoteSubscribeItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.QuoteSubscribeItem} QuoteSubscribeItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteSubscribeItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QuoteSubscribeItem message.
         * @function verify
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QuoteSubscribeItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (typeof message.flag !== "boolean")
                    return "flag: boolean expected";
            return null;
        };

        /**
         * Creates a QuoteSubscribeItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.QuoteSubscribeItem} QuoteSubscribeItem
         */
        QuoteSubscribeItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.QuoteSubscribeItem)
                return object;
            var message = new $root.pb.QuoteSubscribeItem();
            if (object.code != null)
                message.code = String(object.code);
            if (object.flag != null)
                message.flag = Boolean(object.flag);
            return message;
        };

        /**
         * Creates a plain object from a QuoteSubscribeItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.QuoteSubscribeItem
         * @static
         * @param {pb.QuoteSubscribeItem} message QuoteSubscribeItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QuoteSubscribeItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = "";
                object.flag = false;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            return object;
        };

        /**
         * Converts this QuoteSubscribeItem to JSON.
         * @function toJSON
         * @memberof pb.QuoteSubscribeItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QuoteSubscribeItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QuoteSubscribeItem;
    })();

    pb.CmdQuoteSubscribe = (function () {

        /**
         * Properties of a CmdQuoteSubscribe.
         * @memberof pb
         * @interface ICmdQuoteSubscribe
         * @property {Array.<pb.IQuoteSubscribeItem>|null} [items] CmdQuoteSubscribe items
         */

        /**
         * Constructs a new CmdQuoteSubscribe.
         * @memberof pb
         * @classdesc Represents a CmdQuoteSubscribe.
         * @implements ICmdQuoteSubscribe
         * @constructor
         * @param {pb.ICmdQuoteSubscribe=} [properties] Properties to set
         */
        function CmdQuoteSubscribe(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQuoteSubscribe items.
         * @member {Array.<pb.IQuoteSubscribeItem>} items
         * @memberof pb.CmdQuoteSubscribe
         * @instance
         */
        CmdQuoteSubscribe.prototype.items = $util.emptyArray;

        /**
         * Creates a new CmdQuoteSubscribe instance using the specified properties.
         * @function create
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {pb.ICmdQuoteSubscribe=} [properties] Properties to set
         * @returns {pb.CmdQuoteSubscribe} CmdQuoteSubscribe instance
         */
        CmdQuoteSubscribe.create = function create(properties) {
            return new CmdQuoteSubscribe(properties);
        };

        /**
         * Encodes the specified CmdQuoteSubscribe message. Does not implicitly {@link pb.CmdQuoteSubscribe.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {pb.ICmdQuoteSubscribe} message CmdQuoteSubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteSubscribe.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.QuoteSubscribeItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdQuoteSubscribe message, length delimited. Does not implicitly {@link pb.CmdQuoteSubscribe.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {pb.ICmdQuoteSubscribe} message CmdQuoteSubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteSubscribe.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQuoteSubscribe message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQuoteSubscribe} CmdQuoteSubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteSubscribe.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQuoteSubscribe();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.QuoteSubscribeItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQuoteSubscribe message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQuoteSubscribe} CmdQuoteSubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteSubscribe.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQuoteSubscribe message.
         * @function verify
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQuoteSubscribe.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.QuoteSubscribeItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CmdQuoteSubscribe message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQuoteSubscribe} CmdQuoteSubscribe
         */
        CmdQuoteSubscribe.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQuoteSubscribe)
                return object;
            var message = new $root.pb.CmdQuoteSubscribe();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.CmdQuoteSubscribe.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.CmdQuoteSubscribe.items: object expected");
                    message.items[i] = $root.pb.QuoteSubscribeItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdQuoteSubscribe message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQuoteSubscribe
         * @static
         * @param {pb.CmdQuoteSubscribe} message CmdQuoteSubscribe
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQuoteSubscribe.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.QuoteSubscribeItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CmdQuoteSubscribe to JSON.
         * @function toJSON
         * @memberof pb.CmdQuoteSubscribe
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQuoteSubscribe.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQuoteSubscribe;
    })();

    pb.CmdTradingDay = (function () {

        /**
         * Properties of a CmdTradingDay.
         * @memberof pb
         * @interface ICmdTradingDay
         * @property {number|null} [date] CmdTradingDay date
         * @property {number|null} [n] CmdTradingDay n
         */

        /**
         * Constructs a new CmdTradingDay.
         * @memberof pb
         * @classdesc Represents a CmdTradingDay.
         * @implements ICmdTradingDay
         * @constructor
         * @param {pb.ICmdTradingDay=} [properties] Properties to set
         */
        function CmdTradingDay(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdTradingDay date.
         * @member {number} date
         * @memberof pb.CmdTradingDay
         * @instance
         */
        CmdTradingDay.prototype.date = 0;

        /**
         * CmdTradingDay n.
         * @member {number} n
         * @memberof pb.CmdTradingDay
         * @instance
         */
        CmdTradingDay.prototype.n = 0;

        /**
         * Creates a new CmdTradingDay instance using the specified properties.
         * @function create
         * @memberof pb.CmdTradingDay
         * @static
         * @param {pb.ICmdTradingDay=} [properties] Properties to set
         * @returns {pb.CmdTradingDay} CmdTradingDay instance
         */
        CmdTradingDay.create = function create(properties) {
            return new CmdTradingDay(properties);
        };

        /**
         * Encodes the specified CmdTradingDay message. Does not implicitly {@link pb.CmdTradingDay.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdTradingDay
         * @static
         * @param {pb.ICmdTradingDay} message CmdTradingDay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdTradingDay.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.date != null && Object.hasOwnProperty.call(message, "date"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.date);
            if (message.n != null && Object.hasOwnProperty.call(message, "n"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.n);
            return writer;
        };

        /**
         * Encodes the specified CmdTradingDay message, length delimited. Does not implicitly {@link pb.CmdTradingDay.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdTradingDay
         * @static
         * @param {pb.ICmdTradingDay} message CmdTradingDay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdTradingDay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdTradingDay message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdTradingDay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdTradingDay} CmdTradingDay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdTradingDay.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdTradingDay();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.date = reader.int32();
                        break;
                    case 2:
                        message.n = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdTradingDay message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdTradingDay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdTradingDay} CmdTradingDay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdTradingDay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdTradingDay message.
         * @function verify
         * @memberof pb.CmdTradingDay
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdTradingDay.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.date != null && message.hasOwnProperty("date"))
                if (!$util.isInteger(message.date))
                    return "date: integer expected";
            if (message.n != null && message.hasOwnProperty("n"))
                if (!$util.isInteger(message.n))
                    return "n: integer expected";
            return null;
        };

        /**
         * Creates a CmdTradingDay message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdTradingDay
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdTradingDay} CmdTradingDay
         */
        CmdTradingDay.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdTradingDay)
                return object;
            var message = new $root.pb.CmdTradingDay();
            if (object.date != null)
                message.date = object.date | 0;
            if (object.n != null)
                message.n = object.n | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdTradingDay message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdTradingDay
         * @static
         * @param {pb.CmdTradingDay} message CmdTradingDay
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdTradingDay.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.date = 0;
                object.n = 0;
            }
            if (message.date != null && message.hasOwnProperty("date"))
                object.date = message.date;
            if (message.n != null && message.hasOwnProperty("n"))
                object.n = message.n;
            return object;
        };

        /**
         * Converts this CmdTradingDay to JSON.
         * @function toJSON
         * @memberof pb.CmdTradingDay
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdTradingDay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdTradingDay;
    })();

    pb.CmdTradingDayReply = (function () {

        /**
         * Properties of a CmdTradingDayReply.
         * @memberof pb
         * @interface ICmdTradingDayReply
         * @property {boolean|null} [isTradingDay] CmdTradingDayReply isTradingDay
         * @property {Array.<number>|null} [days] CmdTradingDayReply days
         */

        /**
         * Constructs a new CmdTradingDayReply.
         * @memberof pb
         * @classdesc Represents a CmdTradingDayReply.
         * @implements ICmdTradingDayReply
         * @constructor
         * @param {pb.ICmdTradingDayReply=} [properties] Properties to set
         */
        function CmdTradingDayReply(properties) {
            this.days = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdTradingDayReply isTradingDay.
         * @member {boolean} isTradingDay
         * @memberof pb.CmdTradingDayReply
         * @instance
         */
        CmdTradingDayReply.prototype.isTradingDay = false;

        /**
         * CmdTradingDayReply days.
         * @member {Array.<number>} days
         * @memberof pb.CmdTradingDayReply
         * @instance
         */
        CmdTradingDayReply.prototype.days = $util.emptyArray;

        /**
         * Creates a new CmdTradingDayReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {pb.ICmdTradingDayReply=} [properties] Properties to set
         * @returns {pb.CmdTradingDayReply} CmdTradingDayReply instance
         */
        CmdTradingDayReply.create = function create(properties) {
            return new CmdTradingDayReply(properties);
        };

        /**
         * Encodes the specified CmdTradingDayReply message. Does not implicitly {@link pb.CmdTradingDayReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {pb.ICmdTradingDayReply} message CmdTradingDayReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdTradingDayReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.isTradingDay != null && Object.hasOwnProperty.call(message, "isTradingDay"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isTradingDay);
            if (message.days != null && message.days.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.days.length; ++i)
                    writer.int32(message.days[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CmdTradingDayReply message, length delimited. Does not implicitly {@link pb.CmdTradingDayReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {pb.ICmdTradingDayReply} message CmdTradingDayReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdTradingDayReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdTradingDayReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdTradingDayReply} CmdTradingDayReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdTradingDayReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdTradingDayReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.isTradingDay = reader.bool();
                        break;
                    case 2:
                        if (!(message.days && message.days.length))
                            message.days = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.days.push(reader.int32());
                        } else
                            message.days.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdTradingDayReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdTradingDayReply} CmdTradingDayReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdTradingDayReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdTradingDayReply message.
         * @function verify
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdTradingDayReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.isTradingDay != null && message.hasOwnProperty("isTradingDay"))
                if (typeof message.isTradingDay !== "boolean")
                    return "isTradingDay: boolean expected";
            if (message.days != null && message.hasOwnProperty("days")) {
                if (!Array.isArray(message.days))
                    return "days: array expected";
                for (var i = 0; i < message.days.length; ++i)
                    if (!$util.isInteger(message.days[i]))
                        return "days: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CmdTradingDayReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdTradingDayReply} CmdTradingDayReply
         */
        CmdTradingDayReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdTradingDayReply)
                return object;
            var message = new $root.pb.CmdTradingDayReply();
            if (object.isTradingDay != null)
                message.isTradingDay = Boolean(object.isTradingDay);
            if (object.days) {
                if (!Array.isArray(object.days))
                    throw TypeError(".pb.CmdTradingDayReply.days: array expected");
                message.days = [];
                for (var i = 0; i < object.days.length; ++i)
                    message.days[i] = object.days[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdTradingDayReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdTradingDayReply
         * @static
         * @param {pb.CmdTradingDayReply} message CmdTradingDayReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdTradingDayReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.days = [];
            if (options.defaults)
                object.isTradingDay = false;
            if (message.isTradingDay != null && message.hasOwnProperty("isTradingDay"))
                object.isTradingDay = message.isTradingDay;
            if (message.days && message.days.length) {
                object.days = [];
                for (var j = 0; j < message.days.length; ++j)
                    object.days[j] = message.days[j];
            }
            return object;
        };

        /**
         * Converts this CmdTradingDayReply to JSON.
         * @function toJSON
         * @memberof pb.CmdTradingDayReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdTradingDayReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdTradingDayReply;
    })();

    pb.CmdRecommendStock = (function () {

        /**
         * Properties of a CmdRecommendStock.
         * @memberof pb
         * @interface ICmdRecommendStock
         * @property {number|Long|null} [from] CmdRecommendStock from
         * @property {number|null} [total] CmdRecommendStock total
         * @property {number|Long|null} [to] CmdRecommendStock to
         */

        /**
         * Constructs a new CmdRecommendStock.
         * @memberof pb
         * @classdesc Represents a CmdRecommendStock.
         * @implements ICmdRecommendStock
         * @constructor
         * @param {pb.ICmdRecommendStock=} [properties] Properties to set
         */
        function CmdRecommendStock(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRecommendStock from.
         * @member {number|Long} from
         * @memberof pb.CmdRecommendStock
         * @instance
         */
        CmdRecommendStock.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdRecommendStock total.
         * @member {number} total
         * @memberof pb.CmdRecommendStock
         * @instance
         */
        CmdRecommendStock.prototype.total = 0;

        /**
         * CmdRecommendStock to.
         * @member {number|Long} to
         * @memberof pb.CmdRecommendStock
         * @instance
         */
        CmdRecommendStock.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdRecommendStock instance using the specified properties.
         * @function create
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {pb.ICmdRecommendStock=} [properties] Properties to set
         * @returns {pb.CmdRecommendStock} CmdRecommendStock instance
         */
        CmdRecommendStock.create = function create(properties) {
            return new CmdRecommendStock(properties);
        };

        /**
         * Encodes the specified CmdRecommendStock message. Does not implicitly {@link pb.CmdRecommendStock.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {pb.ICmdRecommendStock} message CmdRecommendStock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRecommendStock.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.from);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.total);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.to);
            return writer;
        };

        /**
         * Encodes the specified CmdRecommendStock message, length delimited. Does not implicitly {@link pb.CmdRecommendStock.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {pb.ICmdRecommendStock} message CmdRecommendStock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRecommendStock.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRecommendStock message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRecommendStock} CmdRecommendStock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRecommendStock.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRecommendStock();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.from = reader.int64();
                        break;
                    case 2:
                        message.total = reader.int32();
                        break;
                    case 3:
                        message.to = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRecommendStock message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRecommendStock} CmdRecommendStock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRecommendStock.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRecommendStock message.
         * @function verify
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRecommendStock.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdRecommendStock message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRecommendStock} CmdRecommendStock
         */
        CmdRecommendStock.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRecommendStock)
                return object;
            var message = new $root.pb.CmdRecommendStock();
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdRecommendStock message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRecommendStock
         * @static
         * @param {pb.CmdRecommendStock} message CmdRecommendStock
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRecommendStock.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                object.total = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
            }
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            return object;
        };

        /**
         * Converts this CmdRecommendStock to JSON.
         * @function toJSON
         * @memberof pb.CmdRecommendStock
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRecommendStock.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRecommendStock;
    })();

    pb.RecommendStockItem = (function () {

        /**
         * Properties of a RecommendStockItem.
         * @memberof pb
         * @interface IRecommendStockItem
         * @property {number|Long|null} [ts] RecommendStockItem ts
         * @property {Array.<number>|null} [codeList] RecommendStockItem codeList
         */

        /**
         * Constructs a new RecommendStockItem.
         * @memberof pb
         * @classdesc Represents a RecommendStockItem.
         * @implements IRecommendStockItem
         * @constructor
         * @param {pb.IRecommendStockItem=} [properties] Properties to set
         */
        function RecommendStockItem(properties) {
            this.codeList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecommendStockItem ts.
         * @member {number|Long} ts
         * @memberof pb.RecommendStockItem
         * @instance
         */
        RecommendStockItem.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * RecommendStockItem codeList.
         * @member {Array.<number>} codeList
         * @memberof pb.RecommendStockItem
         * @instance
         */
        RecommendStockItem.prototype.codeList = $util.emptyArray;

        /**
         * Creates a new RecommendStockItem instance using the specified properties.
         * @function create
         * @memberof pb.RecommendStockItem
         * @static
         * @param {pb.IRecommendStockItem=} [properties] Properties to set
         * @returns {pb.RecommendStockItem} RecommendStockItem instance
         */
        RecommendStockItem.create = function create(properties) {
            return new RecommendStockItem(properties);
        };

        /**
         * Encodes the specified RecommendStockItem message. Does not implicitly {@link pb.RecommendStockItem.verify|verify} messages.
         * @function encode
         * @memberof pb.RecommendStockItem
         * @static
         * @param {pb.IRecommendStockItem} message RecommendStockItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecommendStockItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
            if (message.codeList != null && message.codeList.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.codeList.length; ++i)
                    writer.uint32(message.codeList[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified RecommendStockItem message, length delimited. Does not implicitly {@link pb.RecommendStockItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RecommendStockItem
         * @static
         * @param {pb.IRecommendStockItem} message RecommendStockItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecommendStockItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecommendStockItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RecommendStockItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RecommendStockItem} RecommendStockItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecommendStockItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RecommendStockItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ts = reader.int64();
                        break;
                    case 2:
                        if (!(message.codeList && message.codeList.length))
                            message.codeList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.codeList.push(reader.uint32());
                        } else
                            message.codeList.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecommendStockItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RecommendStockItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RecommendStockItem} RecommendStockItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecommendStockItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecommendStockItem message.
         * @function verify
         * @memberof pb.RecommendStockItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecommendStockItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.codeList != null && message.hasOwnProperty("codeList")) {
                if (!Array.isArray(message.codeList))
                    return "codeList: array expected";
                for (var i = 0; i < message.codeList.length; ++i)
                    if (!$util.isInteger(message.codeList[i]))
                        return "codeList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a RecommendStockItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RecommendStockItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RecommendStockItem} RecommendStockItem
         */
        RecommendStockItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RecommendStockItem)
                return object;
            var message = new $root.pb.RecommendStockItem();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.codeList) {
                if (!Array.isArray(object.codeList))
                    throw TypeError(".pb.RecommendStockItem.codeList: array expected");
                message.codeList = [];
                for (var i = 0; i < object.codeList.length; ++i)
                    message.codeList[i] = object.codeList[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a RecommendStockItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RecommendStockItem
         * @static
         * @param {pb.RecommendStockItem} message RecommendStockItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecommendStockItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.codeList = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.codeList && message.codeList.length) {
                object.codeList = [];
                for (var j = 0; j < message.codeList.length; ++j)
                    object.codeList[j] = message.codeList[j];
            }
            return object;
        };

        /**
         * Converts this RecommendStockItem to JSON.
         * @function toJSON
         * @memberof pb.RecommendStockItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecommendStockItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecommendStockItem;
    })();

    pb.CmdRecommendStockReply = (function () {

        /**
         * Properties of a CmdRecommendStockReply.
         * @memberof pb
         * @interface ICmdRecommendStockReply
         * @property {Array.<pb.IRecommendStockItem>|null} [items] CmdRecommendStockReply items
         */

        /**
         * Constructs a new CmdRecommendStockReply.
         * @memberof pb
         * @classdesc Represents a CmdRecommendStockReply.
         * @implements ICmdRecommendStockReply
         * @constructor
         * @param {pb.ICmdRecommendStockReply=} [properties] Properties to set
         */
        function CmdRecommendStockReply(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRecommendStockReply items.
         * @member {Array.<pb.IRecommendStockItem>} items
         * @memberof pb.CmdRecommendStockReply
         * @instance
         */
        CmdRecommendStockReply.prototype.items = $util.emptyArray;

        /**
         * Creates a new CmdRecommendStockReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {pb.ICmdRecommendStockReply=} [properties] Properties to set
         * @returns {pb.CmdRecommendStockReply} CmdRecommendStockReply instance
         */
        CmdRecommendStockReply.create = function create(properties) {
            return new CmdRecommendStockReply(properties);
        };

        /**
         * Encodes the specified CmdRecommendStockReply message. Does not implicitly {@link pb.CmdRecommendStockReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {pb.ICmdRecommendStockReply} message CmdRecommendStockReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRecommendStockReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.RecommendStockItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdRecommendStockReply message, length delimited. Does not implicitly {@link pb.CmdRecommendStockReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {pb.ICmdRecommendStockReply} message CmdRecommendStockReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRecommendStockReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRecommendStockReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRecommendStockReply} CmdRecommendStockReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRecommendStockReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRecommendStockReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.RecommendStockItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRecommendStockReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRecommendStockReply} CmdRecommendStockReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRecommendStockReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRecommendStockReply message.
         * @function verify
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRecommendStockReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.RecommendStockItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CmdRecommendStockReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRecommendStockReply} CmdRecommendStockReply
         */
        CmdRecommendStockReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRecommendStockReply)
                return object;
            var message = new $root.pb.CmdRecommendStockReply();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.CmdRecommendStockReply.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.CmdRecommendStockReply.items: object expected");
                    message.items[i] = $root.pb.RecommendStockItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdRecommendStockReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRecommendStockReply
         * @static
         * @param {pb.CmdRecommendStockReply} message CmdRecommendStockReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRecommendStockReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.RecommendStockItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CmdRecommendStockReply to JSON.
         * @function toJSON
         * @memberof pb.CmdRecommendStockReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRecommendStockReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRecommendStockReply;
    })();

    pb.CmdQuoteQueryFuture = (function () {

        /**
         * Properties of a CmdQuoteQueryFuture.
         * @memberof pb
         * @interface ICmdQuoteQueryFuture
         * @property {pb.KType|null} [ktype] CmdQuoteQueryFuture ktype
         * @property {number|null} [code] CmdQuoteQueryFuture code
         * @property {number|Long|null} [from] CmdQuoteQueryFuture from
         * @property {number|null} [total] CmdQuoteQueryFuture total
         * @property {number|Long|null} [to] CmdQuoteQueryFuture to
         * @property {number|null} [reserve] CmdQuoteQueryFuture reserve
         */

        /**
         * Constructs a new CmdQuoteQueryFuture.
         * @memberof pb
         * @classdesc Represents a CmdQuoteQueryFuture.
         * @implements ICmdQuoteQueryFuture
         * @constructor
         * @param {pb.ICmdQuoteQueryFuture=} [properties] Properties to set
         */
        function CmdQuoteQueryFuture(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQuoteQueryFuture ktype.
         * @member {pb.KType} ktype
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.ktype = 0;

        /**
         * CmdQuoteQueryFuture code.
         * @member {number} code
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.code = 0;

        /**
         * CmdQuoteQueryFuture from.
         * @member {number|Long} from
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.from = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQuoteQueryFuture total.
         * @member {number} total
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.total = 0;

        /**
         * CmdQuoteQueryFuture to.
         * @member {number|Long} to
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.to = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQuoteQueryFuture reserve.
         * @member {number} reserve
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         */
        CmdQuoteQueryFuture.prototype.reserve = 0;

        /**
         * Creates a new CmdQuoteQueryFuture instance using the specified properties.
         * @function create
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {pb.ICmdQuoteQueryFuture=} [properties] Properties to set
         * @returns {pb.CmdQuoteQueryFuture} CmdQuoteQueryFuture instance
         */
        CmdQuoteQueryFuture.create = function create(properties) {
            return new CmdQuoteQueryFuture(properties);
        };

        /**
         * Encodes the specified CmdQuoteQueryFuture message. Does not implicitly {@link pb.CmdQuoteQueryFuture.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {pb.ICmdQuoteQueryFuture} message CmdQuoteQueryFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteQueryFuture.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ktype);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.from);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.total);
            if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.to);
            if (message.reserve != null && Object.hasOwnProperty.call(message, "reserve"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.reserve);
            return writer;
        };

        /**
         * Encodes the specified CmdQuoteQueryFuture message, length delimited. Does not implicitly {@link pb.CmdQuoteQueryFuture.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {pb.ICmdQuoteQueryFuture} message CmdQuoteQueryFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQuoteQueryFuture.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQuoteQueryFuture message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQuoteQueryFuture} CmdQuoteQueryFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteQueryFuture.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQuoteQueryFuture();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ktype = reader.int32();
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.from = reader.int64();
                        break;
                    case 4:
                        message.total = reader.int32();
                        break;
                    case 5:
                        message.to = reader.int64();
                        break;
                    case 6:
                        message.reserve = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQuoteQueryFuture message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQuoteQueryFuture} CmdQuoteQueryFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQuoteQueryFuture.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQuoteQueryFuture message.
         * @function verify
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQuoteQueryFuture.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isInteger(message.from) && !(message.from && $util.isInteger(message.from.low) && $util.isInteger(message.from.high)))
                    return "from: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            if (message.to != null && message.hasOwnProperty("to"))
                if (!$util.isInteger(message.to) && !(message.to && $util.isInteger(message.to.low) && $util.isInteger(message.to.high)))
                    return "to: integer|Long expected";
            if (message.reserve != null && message.hasOwnProperty("reserve"))
                if (!$util.isInteger(message.reserve))
                    return "reserve: integer expected";
            return null;
        };

        /**
         * Creates a CmdQuoteQueryFuture message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQuoteQueryFuture} CmdQuoteQueryFuture
         */
        CmdQuoteQueryFuture.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQuoteQueryFuture)
                return object;
            var message = new $root.pb.CmdQuoteQueryFuture();
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.code != null)
                message.code = object.code >>> 0;
            if (object.from != null)
                if ($util.Long)
                    (message.from = $util.Long.fromValue(object.from)).unsigned = false;
                else if (typeof object.from === "string")
                    message.from = parseInt(object.from, 10);
                else if (typeof object.from === "number")
                    message.from = object.from;
                else if (typeof object.from === "object")
                    message.from = new $util.LongBits(object.from.low >>> 0, object.from.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            if (object.to != null)
                if ($util.Long)
                    (message.to = $util.Long.fromValue(object.to)).unsigned = false;
                else if (typeof object.to === "string")
                    message.to = parseInt(object.to, 10);
                else if (typeof object.to === "number")
                    message.to = object.to;
                else if (typeof object.to === "object")
                    message.to = new $util.LongBits(object.to.low >>> 0, object.to.high >>> 0).toNumber();
            if (object.reserve != null)
                message.reserve = object.reserve | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdQuoteQueryFuture message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQuoteQueryFuture
         * @static
         * @param {pb.CmdQuoteQueryFuture} message CmdQuoteQueryFuture
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQuoteQueryFuture.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                object.code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.from = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.from = options.longs === String ? "0" : 0;
                object.total = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.to = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.to = options.longs === String ? "0" : 0;
                object.reserve = 0;
            }
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.from != null && message.hasOwnProperty("from"))
                if (typeof message.from === "number")
                    object.from = options.longs === String ? String(message.from) : message.from;
                else
                    object.from = options.longs === String ? $util.Long.prototype.toString.call(message.from) : options.longs === Number ? new $util.LongBits(message.from.low >>> 0, message.from.high >>> 0).toNumber() : message.from;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            if (message.to != null && message.hasOwnProperty("to"))
                if (typeof message.to === "number")
                    object.to = options.longs === String ? String(message.to) : message.to;
                else
                    object.to = options.longs === String ? $util.Long.prototype.toString.call(message.to) : options.longs === Number ? new $util.LongBits(message.to.low >>> 0, message.to.high >>> 0).toNumber() : message.to;
            if (message.reserve != null && message.hasOwnProperty("reserve"))
                object.reserve = message.reserve;
            return object;
        };

        /**
         * Converts this CmdQuoteQueryFuture to JSON.
         * @function toJSON
         * @memberof pb.CmdQuoteQueryFuture
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQuoteQueryFuture.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQuoteQueryFuture;
    })();

    pb.QuoteItemFuture = (function () {

        /**
         * Properties of a QuoteItemFuture.
         * @memberof pb
         * @interface IQuoteItemFuture
         * @property {number|null} [code] QuoteItemFuture code
         * @property {pb.KType|null} [ktype] QuoteItemFuture ktype
         * @property {number|Long|null} [timestamp] QuoteItemFuture timestamp
         * @property {number|null} [open] QuoteItemFuture open
         * @property {number|null} [close] QuoteItemFuture close
         * @property {number|null} [high] QuoteItemFuture high
         * @property {number|null} [low] QuoteItemFuture low
         * @property {number|Long|null} [volume] QuoteItemFuture volume
         * @property {number|Long|null} [cclHold] QuoteItemFuture cclHold
         */

        /**
         * Constructs a new QuoteItemFuture.
         * @memberof pb
         * @classdesc Represents a QuoteItemFuture.
         * @implements IQuoteItemFuture
         * @constructor
         * @param {pb.IQuoteItemFuture=} [properties] Properties to set
         */
        function QuoteItemFuture(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QuoteItemFuture code.
         * @member {number} code
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.code = 0;

        /**
         * QuoteItemFuture ktype.
         * @member {pb.KType} ktype
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.ktype = 0;

        /**
         * QuoteItemFuture timestamp.
         * @member {number|Long} timestamp
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * QuoteItemFuture open.
         * @member {number} open
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.open = 0;

        /**
         * QuoteItemFuture close.
         * @member {number} close
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.close = 0;

        /**
         * QuoteItemFuture high.
         * @member {number} high
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.high = 0;

        /**
         * QuoteItemFuture low.
         * @member {number} low
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.low = 0;

        /**
         * QuoteItemFuture volume.
         * @member {number|Long} volume
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.volume = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

        /**
         * QuoteItemFuture cclHold.
         * @member {number|Long} cclHold
         * @memberof pb.QuoteItemFuture
         * @instance
         */
        QuoteItemFuture.prototype.cclHold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;

        /**
         * Creates a new QuoteItemFuture instance using the specified properties.
         * @function create
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {pb.IQuoteItemFuture=} [properties] Properties to set
         * @returns {pb.QuoteItemFuture} QuoteItemFuture instance
         */
        QuoteItemFuture.create = function create(properties) {
            return new QuoteItemFuture(properties);
        };

        /**
         * Encodes the specified QuoteItemFuture message. Does not implicitly {@link pb.QuoteItemFuture.verify|verify} messages.
         * @function encode
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {pb.IQuoteItemFuture} message QuoteItemFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteItemFuture.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
            if (message.ktype != null && Object.hasOwnProperty.call(message, "ktype"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ktype);
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
            if (message.open != null && Object.hasOwnProperty.call(message, "open"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.open);
            if (message.close != null && Object.hasOwnProperty.call(message, "close"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.close);
            if (message.high != null && Object.hasOwnProperty.call(message, "high"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.high);
            if (message.low != null && Object.hasOwnProperty.call(message, "low"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.low);
            if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.volume);
            if (message.cclHold != null && Object.hasOwnProperty.call(message, "cclHold"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.cclHold);
            return writer;
        };

        /**
         * Encodes the specified QuoteItemFuture message, length delimited. Does not implicitly {@link pb.QuoteItemFuture.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {pb.IQuoteItemFuture} message QuoteItemFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuoteItemFuture.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QuoteItemFuture message from the specified reader or buffer.
         * @function decode
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.QuoteItemFuture} QuoteItemFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteItemFuture.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.QuoteItemFuture();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.ktype = reader.int32();
                        break;
                    case 3:
                        message.timestamp = reader.int64();
                        break;
                    case 4:
                        message.open = reader.double();
                        break;
                    case 5:
                        message.close = reader.double();
                        break;
                    case 6:
                        message.high = reader.double();
                        break;
                    case 7:
                        message.low = reader.double();
                        break;
                    case 8:
                        message.volume = reader.uint64();
                        break;
                    case 9:
                        message.cclHold = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a QuoteItemFuture message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.QuoteItemFuture} QuoteItemFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuoteItemFuture.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QuoteItemFuture message.
         * @function verify
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QuoteItemFuture.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                switch (message.ktype) {
                    default:
                        return "ktype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 10:
                    case 11:
                    case 12:
                        break;
                }
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.open != null && message.hasOwnProperty("open"))
                if (typeof message.open !== "number")
                    return "open: number expected";
            if (message.close != null && message.hasOwnProperty("close"))
                if (typeof message.close !== "number")
                    return "close: number expected";
            if (message.high != null && message.hasOwnProperty("high"))
                if (typeof message.high !== "number")
                    return "high: number expected";
            if (message.low != null && message.hasOwnProperty("low"))
                if (typeof message.low !== "number")
                    return "low: number expected";
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))
                    return "volume: integer|Long expected";
            if (message.cclHold != null && message.hasOwnProperty("cclHold"))
                if (!$util.isInteger(message.cclHold) && !(message.cclHold && $util.isInteger(message.cclHold.low) && $util.isInteger(message.cclHold.high)))
                    return "cclHold: integer|Long expected";
            return null;
        };

        /**
         * Creates a QuoteItemFuture message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.QuoteItemFuture} QuoteItemFuture
         */
        QuoteItemFuture.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.QuoteItemFuture)
                return object;
            var message = new $root.pb.QuoteItemFuture();
            if (object.code != null)
                message.code = object.code >>> 0;
            switch (object.ktype) {
                case "KType_NULL":
                case 0:
                    message.ktype = 0;
                    break;
                case "Real":
                case 1:
                    message.ktype = 1;
                    break;
                case "Min":
                case 2:
                    message.ktype = 2;
                    break;
                case "MinToday":
                case 3:
                    message.ktype = 3;
                    break;
                case "Min5":
                case 4:
                    message.ktype = 4;
                    break;
                case "Min15":
                case 5:
                    message.ktype = 5;
                    break;
                case "Min30":
                case 6:
                    message.ktype = 6;
                    break;
                case "Min60":
                case 7:
                    message.ktype = 7;
                    break;
                case "Day":
                case 10:
                    message.ktype = 10;
                    break;
                case "Day7":
                case 11:
                    message.ktype = 11;
                    break;
                case "Day30":
                case 12:
                    message.ktype = 12;
                    break;
            }
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
            if (object.open != null)
                message.open = Number(object.open);
            if (object.close != null)
                message.close = Number(object.close);
            if (object.high != null)
                message.high = Number(object.high);
            if (object.low != null)
                message.low = Number(object.low);
            if (object.volume != null)
                if ($util.Long)
                    (message.volume = $util.Long.fromValue(object.volume)).unsigned = true;
                else if (typeof object.volume === "string")
                    message.volume = parseInt(object.volume, 10);
                else if (typeof object.volume === "number")
                    message.volume = object.volume;
                else if (typeof object.volume === "object")
                    message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber(true);
            if (object.cclHold != null)
                if ($util.Long)
                    (message.cclHold = $util.Long.fromValue(object.cclHold)).unsigned = true;
                else if (typeof object.cclHold === "string")
                    message.cclHold = parseInt(object.cclHold, 10);
                else if (typeof object.cclHold === "number")
                    message.cclHold = object.cclHold;
                else if (typeof object.cclHold === "object")
                    message.cclHold = new $util.LongBits(object.cclHold.low >>> 0, object.cclHold.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a QuoteItemFuture message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.QuoteItemFuture
         * @static
         * @param {pb.QuoteItemFuture} message QuoteItemFuture
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QuoteItemFuture.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.ktype = options.enums === String ? "KType_NULL" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.open = 0;
                object.close = 0;
                object.high = 0;
                object.low = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.volume = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cclHold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cclHold = options.longs === String ? "0" : 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.ktype != null && message.hasOwnProperty("ktype"))
                object.ktype = options.enums === String ? $root.pb.KType[message.ktype] : message.ktype;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
            if (message.open != null && message.hasOwnProperty("open"))
                object.open = options.json && !isFinite(message.open) ? String(message.open) : message.open;
            if (message.close != null && message.hasOwnProperty("close"))
                object.close = options.json && !isFinite(message.close) ? String(message.close) : message.close;
            if (message.high != null && message.hasOwnProperty("high"))
                object.high = options.json && !isFinite(message.high) ? String(message.high) : message.high;
            if (message.low != null && message.hasOwnProperty("low"))
                object.low = options.json && !isFinite(message.low) ? String(message.low) : message.low;
            if (message.volume != null && message.hasOwnProperty("volume"))
                if (typeof message.volume === "number")
                    object.volume = options.longs === String ? String(message.volume) : message.volume;
                else
                    object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber(true) : message.volume;
            if (message.cclHold != null && message.hasOwnProperty("cclHold"))
                if (typeof message.cclHold === "number")
                    object.cclHold = options.longs === String ? String(message.cclHold) : message.cclHold;
                else
                    object.cclHold = options.longs === String ? $util.Long.prototype.toString.call(message.cclHold) : options.longs === Number ? new $util.LongBits(message.cclHold.low >>> 0, message.cclHold.high >>> 0).toNumber(true) : message.cclHold;
            return object;
        };

        /**
         * Converts this QuoteItemFuture to JSON.
         * @function toJSON
         * @memberof pb.QuoteItemFuture
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QuoteItemFuture.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QuoteItemFuture;
    })();

    pb.QuotesFuture = (function () {

        /**
         * Properties of a QuotesFuture.
         * @memberof pb
         * @interface IQuotesFuture
         * @property {Array.<pb.IQuoteItemFuture>|null} [items] QuotesFuture items
         */

        /**
         * Constructs a new QuotesFuture.
         * @memberof pb
         * @classdesc Represents a QuotesFuture.
         * @implements IQuotesFuture
         * @constructor
         * @param {pb.IQuotesFuture=} [properties] Properties to set
         */
        function QuotesFuture(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QuotesFuture items.
         * @member {Array.<pb.IQuoteItemFuture>} items
         * @memberof pb.QuotesFuture
         * @instance
         */
        QuotesFuture.prototype.items = $util.emptyArray;

        /**
         * Creates a new QuotesFuture instance using the specified properties.
         * @function create
         * @memberof pb.QuotesFuture
         * @static
         * @param {pb.IQuotesFuture=} [properties] Properties to set
         * @returns {pb.QuotesFuture} QuotesFuture instance
         */
        QuotesFuture.create = function create(properties) {
            return new QuotesFuture(properties);
        };

        /**
         * Encodes the specified QuotesFuture message. Does not implicitly {@link pb.QuotesFuture.verify|verify} messages.
         * @function encode
         * @memberof pb.QuotesFuture
         * @static
         * @param {pb.IQuotesFuture} message QuotesFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuotesFuture.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.QuoteItemFuture.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified QuotesFuture message, length delimited. Does not implicitly {@link pb.QuotesFuture.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.QuotesFuture
         * @static
         * @param {pb.IQuotesFuture} message QuotesFuture message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuotesFuture.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QuotesFuture message from the specified reader or buffer.
         * @function decode
         * @memberof pb.QuotesFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.QuotesFuture} QuotesFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuotesFuture.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.QuotesFuture();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.QuoteItemFuture.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a QuotesFuture message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.QuotesFuture
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.QuotesFuture} QuotesFuture
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuotesFuture.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QuotesFuture message.
         * @function verify
         * @memberof pb.QuotesFuture
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QuotesFuture.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.QuoteItemFuture.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a QuotesFuture message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.QuotesFuture
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.QuotesFuture} QuotesFuture
         */
        QuotesFuture.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.QuotesFuture)
                return object;
            var message = new $root.pb.QuotesFuture();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.QuotesFuture.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.QuotesFuture.items: object expected");
                    message.items[i] = $root.pb.QuoteItemFuture.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a QuotesFuture message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.QuotesFuture
         * @static
         * @param {pb.QuotesFuture} message QuotesFuture
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QuotesFuture.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.QuoteItemFuture.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this QuotesFuture to JSON.
         * @function toJSON
         * @memberof pb.QuotesFuture
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QuotesFuture.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QuotesFuture;
    })();

    pb.CmdQueryAiStockList = (function () {

        /**
         * Properties of a CmdQueryAiStockList.
         * @memberof pb
         * @interface ICmdQueryAiStockList
         * @property {number|null} [rankFrom] CmdQueryAiStockList rankFrom
         * @property {number|Long|null} [tsUpdateFrom] CmdQueryAiStockList tsUpdateFrom
         * @property {number|null} [total] CmdQueryAiStockList total
         * @property {Array.<number>|null} [codes] CmdQueryAiStockList codes
         */

        /**
         * Constructs a new CmdQueryAiStockList.
         * @memberof pb
         * @classdesc Represents a CmdQueryAiStockList.
         * @implements ICmdQueryAiStockList
         * @constructor
         * @param {pb.ICmdQueryAiStockList=} [properties] Properties to set
         */
        function CmdQueryAiStockList(properties) {
            this.codes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryAiStockList rankFrom.
         * @member {number} rankFrom
         * @memberof pb.CmdQueryAiStockList
         * @instance
         */
        CmdQueryAiStockList.prototype.rankFrom = 0;

        /**
         * CmdQueryAiStockList tsUpdateFrom.
         * @member {number|Long} tsUpdateFrom
         * @memberof pb.CmdQueryAiStockList
         * @instance
         */
        CmdQueryAiStockList.prototype.tsUpdateFrom = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * CmdQueryAiStockList total.
         * @member {number} total
         * @memberof pb.CmdQueryAiStockList
         * @instance
         */
        CmdQueryAiStockList.prototype.total = 0;

        /**
         * CmdQueryAiStockList codes.
         * @member {Array.<number>} codes
         * @memberof pb.CmdQueryAiStockList
         * @instance
         */
        CmdQueryAiStockList.prototype.codes = $util.emptyArray;

        /**
         * Creates a new CmdQueryAiStockList instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {pb.ICmdQueryAiStockList=} [properties] Properties to set
         * @returns {pb.CmdQueryAiStockList} CmdQueryAiStockList instance
         */
        CmdQueryAiStockList.create = function create(properties) {
            return new CmdQueryAiStockList(properties);
        };

        /**
         * Encodes the specified CmdQueryAiStockList message. Does not implicitly {@link pb.CmdQueryAiStockList.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {pb.ICmdQueryAiStockList} message CmdQueryAiStockList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiStockList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rankFrom != null && Object.hasOwnProperty.call(message, "rankFrom"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rankFrom);
            if (message.tsUpdateFrom != null && Object.hasOwnProperty.call(message, "tsUpdateFrom"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.tsUpdateFrom);
            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.total);
            if (message.codes != null && message.codes.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.codes.length; ++i)
                    writer.int32(message.codes[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CmdQueryAiStockList message, length delimited. Does not implicitly {@link pb.CmdQueryAiStockList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {pb.ICmdQueryAiStockList} message CmdQueryAiStockList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiStockList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryAiStockList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryAiStockList} CmdQueryAiStockList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiStockList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryAiStockList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.rankFrom = reader.int32();
                        break;
                    case 2:
                        message.tsUpdateFrom = reader.int64();
                        break;
                    case 3:
                        message.total = reader.int32();
                        break;
                    case 4:
                        if (!(message.codes && message.codes.length))
                            message.codes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.codes.push(reader.int32());
                        } else
                            message.codes.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryAiStockList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryAiStockList} CmdQueryAiStockList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiStockList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryAiStockList message.
         * @function verify
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryAiStockList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rankFrom != null && message.hasOwnProperty("rankFrom"))
                if (!$util.isInteger(message.rankFrom))
                    return "rankFrom: integer expected";
            if (message.tsUpdateFrom != null && message.hasOwnProperty("tsUpdateFrom"))
                if (!$util.isInteger(message.tsUpdateFrom) && !(message.tsUpdateFrom && $util.isInteger(message.tsUpdateFrom.low) && $util.isInteger(message.tsUpdateFrom.high)))
                    return "tsUpdateFrom: integer|Long expected";
            if (message.total != null && message.hasOwnProperty("total"))
                if (!$util.isInteger(message.total))
                    return "total: integer expected";
            if (message.codes != null && message.hasOwnProperty("codes")) {
                if (!Array.isArray(message.codes))
                    return "codes: array expected";
                for (var i = 0; i < message.codes.length; ++i)
                    if (!$util.isInteger(message.codes[i]))
                        return "codes: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CmdQueryAiStockList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryAiStockList} CmdQueryAiStockList
         */
        CmdQueryAiStockList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryAiStockList)
                return object;
            var message = new $root.pb.CmdQueryAiStockList();
            if (object.rankFrom != null)
                message.rankFrom = object.rankFrom | 0;
            if (object.tsUpdateFrom != null)
                if ($util.Long)
                    (message.tsUpdateFrom = $util.Long.fromValue(object.tsUpdateFrom)).unsigned = false;
                else if (typeof object.tsUpdateFrom === "string")
                    message.tsUpdateFrom = parseInt(object.tsUpdateFrom, 10);
                else if (typeof object.tsUpdateFrom === "number")
                    message.tsUpdateFrom = object.tsUpdateFrom;
                else if (typeof object.tsUpdateFrom === "object")
                    message.tsUpdateFrom = new $util.LongBits(object.tsUpdateFrom.low >>> 0, object.tsUpdateFrom.high >>> 0).toNumber();
            if (object.total != null)
                message.total = object.total | 0;
            if (object.codes) {
                if (!Array.isArray(object.codes))
                    throw TypeError(".pb.CmdQueryAiStockList.codes: array expected");
                message.codes = [];
                for (var i = 0; i < object.codes.length; ++i)
                    message.codes[i] = object.codes[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryAiStockList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryAiStockList
         * @static
         * @param {pb.CmdQueryAiStockList} message CmdQueryAiStockList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryAiStockList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.codes = [];
            if (options.defaults) {
                object.rankFrom = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsUpdateFrom = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsUpdateFrom = options.longs === String ? "0" : 0;
                object.total = 0;
            }
            if (message.rankFrom != null && message.hasOwnProperty("rankFrom"))
                object.rankFrom = message.rankFrom;
            if (message.tsUpdateFrom != null && message.hasOwnProperty("tsUpdateFrom"))
                if (typeof message.tsUpdateFrom === "number")
                    object.tsUpdateFrom = options.longs === String ? String(message.tsUpdateFrom) : message.tsUpdateFrom;
                else
                    object.tsUpdateFrom = options.longs === String ? $util.Long.prototype.toString.call(message.tsUpdateFrom) : options.longs === Number ? new $util.LongBits(message.tsUpdateFrom.low >>> 0, message.tsUpdateFrom.high >>> 0).toNumber() : message.tsUpdateFrom;
            if (message.total != null && message.hasOwnProperty("total"))
                object.total = message.total;
            if (message.codes && message.codes.length) {
                object.codes = [];
                for (var j = 0; j < message.codes.length; ++j)
                    object.codes[j] = message.codes[j];
            }
            return object;
        };

        /**
         * Converts this CmdQueryAiStockList to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryAiStockList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryAiStockList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryAiStockList;
    })();

    pb.AiStockItem = (function () {

        /**
         * Properties of an AiStockItem.
         * @memberof pb
         * @interface IAiStockItem
         * @property {number|null} [code] AiStockItem code
         * @property {string|null} [name] AiStockItem name
         * @property {string|null} [industry] AiStockItem industry
         * @property {number|Long|null} [tsUpdated] AiStockItem tsUpdated
         * @property {number|null} [profitRanking] AiStockItem profitRanking
         * @property {number|null} [profitRate] AiStockItem profitRate
         * @property {number|null} [lastAskPrice] AiStockItem lastAskPrice
         * @property {number|null} [lastBidPrice] AiStockItem lastBidPrice
         * @property {number|null} [curAskPrice] AiStockItem curAskPrice
         * @property {number|null} [todaySignal] AiStockItem todaySignal
         * @property {number|Long|null} [curAskTs] AiStockItem curAskTs
         * @property {number|Long|null} [lastBidTs] AiStockItem lastBidTs
         * @property {number|Long|null} [lastAskTs] AiStockItem lastAskTs
         */

        /**
         * Constructs a new AiStockItem.
         * @memberof pb
         * @classdesc Represents an AiStockItem.
         * @implements IAiStockItem
         * @constructor
         * @param {pb.IAiStockItem=} [properties] Properties to set
         */
        function AiStockItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AiStockItem code.
         * @member {number} code
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.code = 0;

        /**
         * AiStockItem name.
         * @member {string} name
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.name = "";

        /**
         * AiStockItem industry.
         * @member {string} industry
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.industry = "";

        /**
         * AiStockItem tsUpdated.
         * @member {number|Long} tsUpdated
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.tsUpdated = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * AiStockItem profitRanking.
         * @member {number} profitRanking
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.profitRanking = 0;

        /**
         * AiStockItem profitRate.
         * @member {number} profitRate
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.profitRate = 0;

        /**
         * AiStockItem lastAskPrice.
         * @member {number} lastAskPrice
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.lastAskPrice = 0;

        /**
         * AiStockItem lastBidPrice.
         * @member {number} lastBidPrice
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.lastBidPrice = 0;

        /**
         * AiStockItem curAskPrice.
         * @member {number} curAskPrice
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.curAskPrice = 0;

        /**
         * AiStockItem todaySignal.
         * @member {number} todaySignal
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.todaySignal = 0;

        /**
         * AiStockItem curAskTs.
         * @member {number|Long} curAskTs
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.curAskTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * AiStockItem lastBidTs.
         * @member {number|Long} lastBidTs
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.lastBidTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * AiStockItem lastAskTs.
         * @member {number|Long} lastAskTs
         * @memberof pb.AiStockItem
         * @instance
         */
        AiStockItem.prototype.lastAskTs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new AiStockItem instance using the specified properties.
         * @function create
         * @memberof pb.AiStockItem
         * @static
         * @param {pb.IAiStockItem=} [properties] Properties to set
         * @returns {pb.AiStockItem} AiStockItem instance
         */
        AiStockItem.create = function create(properties) {
            return new AiStockItem(properties);
        };

        /**
         * Encodes the specified AiStockItem message. Does not implicitly {@link pb.AiStockItem.verify|verify} messages.
         * @function encode
         * @memberof pb.AiStockItem
         * @static
         * @param {pb.IAiStockItem} message AiStockItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AiStockItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.industry != null && Object.hasOwnProperty.call(message, "industry"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.industry);
            if (message.tsUpdated != null && Object.hasOwnProperty.call(message, "tsUpdated"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.tsUpdated);
            if (message.profitRanking != null && Object.hasOwnProperty.call(message, "profitRanking"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.profitRanking);
            if (message.profitRate != null && Object.hasOwnProperty.call(message, "profitRate"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.profitRate);
            if (message.lastAskPrice != null && Object.hasOwnProperty.call(message, "lastAskPrice"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.lastAskPrice);
            if (message.lastBidPrice != null && Object.hasOwnProperty.call(message, "lastBidPrice"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.lastBidPrice);
            if (message.curAskPrice != null && Object.hasOwnProperty.call(message, "curAskPrice"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.curAskPrice);
            if (message.todaySignal != null && Object.hasOwnProperty.call(message, "todaySignal"))
                writer.uint32(/* id 10, wireType 1 =*/81).double(message.todaySignal);
            if (message.curAskTs != null && Object.hasOwnProperty.call(message, "curAskTs"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.curAskTs);
            if (message.lastBidTs != null && Object.hasOwnProperty.call(message, "lastBidTs"))
                writer.uint32(/* id 12, wireType 0 =*/96).int64(message.lastBidTs);
            if (message.lastAskTs != null && Object.hasOwnProperty.call(message, "lastAskTs"))
                writer.uint32(/* id 13, wireType 0 =*/104).int64(message.lastAskTs);
            return writer;
        };

        /**
         * Encodes the specified AiStockItem message, length delimited. Does not implicitly {@link pb.AiStockItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.AiStockItem
         * @static
         * @param {pb.IAiStockItem} message AiStockItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AiStockItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AiStockItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.AiStockItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.AiStockItem} AiStockItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AiStockItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.AiStockItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.industry = reader.string();
                        break;
                    case 4:
                        message.tsUpdated = reader.int64();
                        break;
                    case 5:
                        message.profitRanking = reader.int32();
                        break;
                    case 6:
                        message.profitRate = reader.double();
                        break;
                    case 7:
                        message.lastAskPrice = reader.double();
                        break;
                    case 8:
                        message.lastBidPrice = reader.double();
                        break;
                    case 9:
                        message.curAskPrice = reader.double();
                        break;
                    case 10:
                        message.todaySignal = reader.double();
                        break;
                    case 11:
                        message.curAskTs = reader.int64();
                        break;
                    case 12:
                        message.lastBidTs = reader.int64();
                        break;
                    case 13:
                        message.lastAskTs = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an AiStockItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.AiStockItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.AiStockItem} AiStockItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AiStockItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AiStockItem message.
         * @function verify
         * @memberof pb.AiStockItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AiStockItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.industry != null && message.hasOwnProperty("industry"))
                if (!$util.isString(message.industry))
                    return "industry: string expected";
            if (message.tsUpdated != null && message.hasOwnProperty("tsUpdated"))
                if (!$util.isInteger(message.tsUpdated) && !(message.tsUpdated && $util.isInteger(message.tsUpdated.low) && $util.isInteger(message.tsUpdated.high)))
                    return "tsUpdated: integer|Long expected";
            if (message.profitRanking != null && message.hasOwnProperty("profitRanking"))
                if (!$util.isInteger(message.profitRanking))
                    return "profitRanking: integer expected";
            if (message.profitRate != null && message.hasOwnProperty("profitRate"))
                if (typeof message.profitRate !== "number")
                    return "profitRate: number expected";
            if (message.lastAskPrice != null && message.hasOwnProperty("lastAskPrice"))
                if (typeof message.lastAskPrice !== "number")
                    return "lastAskPrice: number expected";
            if (message.lastBidPrice != null && message.hasOwnProperty("lastBidPrice"))
                if (typeof message.lastBidPrice !== "number")
                    return "lastBidPrice: number expected";
            if (message.curAskPrice != null && message.hasOwnProperty("curAskPrice"))
                if (typeof message.curAskPrice !== "number")
                    return "curAskPrice: number expected";
            if (message.todaySignal != null && message.hasOwnProperty("todaySignal"))
                if (typeof message.todaySignal !== "number")
                    return "todaySignal: number expected";
            if (message.curAskTs != null && message.hasOwnProperty("curAskTs"))
                if (!$util.isInteger(message.curAskTs) && !(message.curAskTs && $util.isInteger(message.curAskTs.low) && $util.isInteger(message.curAskTs.high)))
                    return "curAskTs: integer|Long expected";
            if (message.lastBidTs != null && message.hasOwnProperty("lastBidTs"))
                if (!$util.isInteger(message.lastBidTs) && !(message.lastBidTs && $util.isInteger(message.lastBidTs.low) && $util.isInteger(message.lastBidTs.high)))
                    return "lastBidTs: integer|Long expected";
            if (message.lastAskTs != null && message.hasOwnProperty("lastAskTs"))
                if (!$util.isInteger(message.lastAskTs) && !(message.lastAskTs && $util.isInteger(message.lastAskTs.low) && $util.isInteger(message.lastAskTs.high)))
                    return "lastAskTs: integer|Long expected";
            return null;
        };

        /**
         * Creates an AiStockItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.AiStockItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.AiStockItem} AiStockItem
         */
        AiStockItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.AiStockItem)
                return object;
            var message = new $root.pb.AiStockItem();
            if (object.code != null)
                message.code = object.code >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.industry != null)
                message.industry = String(object.industry);
            if (object.tsUpdated != null)
                if ($util.Long)
                    (message.tsUpdated = $util.Long.fromValue(object.tsUpdated)).unsigned = false;
                else if (typeof object.tsUpdated === "string")
                    message.tsUpdated = parseInt(object.tsUpdated, 10);
                else if (typeof object.tsUpdated === "number")
                    message.tsUpdated = object.tsUpdated;
                else if (typeof object.tsUpdated === "object")
                    message.tsUpdated = new $util.LongBits(object.tsUpdated.low >>> 0, object.tsUpdated.high >>> 0).toNumber();
            if (object.profitRanking != null)
                message.profitRanking = object.profitRanking | 0;
            if (object.profitRate != null)
                message.profitRate = Number(object.profitRate);
            if (object.lastAskPrice != null)
                message.lastAskPrice = Number(object.lastAskPrice);
            if (object.lastBidPrice != null)
                message.lastBidPrice = Number(object.lastBidPrice);
            if (object.curAskPrice != null)
                message.curAskPrice = Number(object.curAskPrice);
            if (object.todaySignal != null)
                message.todaySignal = Number(object.todaySignal);
            if (object.curAskTs != null)
                if ($util.Long)
                    (message.curAskTs = $util.Long.fromValue(object.curAskTs)).unsigned = false;
                else if (typeof object.curAskTs === "string")
                    message.curAskTs = parseInt(object.curAskTs, 10);
                else if (typeof object.curAskTs === "number")
                    message.curAskTs = object.curAskTs;
                else if (typeof object.curAskTs === "object")
                    message.curAskTs = new $util.LongBits(object.curAskTs.low >>> 0, object.curAskTs.high >>> 0).toNumber();
            if (object.lastBidTs != null)
                if ($util.Long)
                    (message.lastBidTs = $util.Long.fromValue(object.lastBidTs)).unsigned = false;
                else if (typeof object.lastBidTs === "string")
                    message.lastBidTs = parseInt(object.lastBidTs, 10);
                else if (typeof object.lastBidTs === "number")
                    message.lastBidTs = object.lastBidTs;
                else if (typeof object.lastBidTs === "object")
                    message.lastBidTs = new $util.LongBits(object.lastBidTs.low >>> 0, object.lastBidTs.high >>> 0).toNumber();
            if (object.lastAskTs != null)
                if ($util.Long)
                    (message.lastAskTs = $util.Long.fromValue(object.lastAskTs)).unsigned = false;
                else if (typeof object.lastAskTs === "string")
                    message.lastAskTs = parseInt(object.lastAskTs, 10);
                else if (typeof object.lastAskTs === "number")
                    message.lastAskTs = object.lastAskTs;
                else if (typeof object.lastAskTs === "object")
                    message.lastAskTs = new $util.LongBits(object.lastAskTs.low >>> 0, object.lastAskTs.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from an AiStockItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.AiStockItem
         * @static
         * @param {pb.AiStockItem} message AiStockItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AiStockItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.code = 0;
                object.name = "";
                object.industry = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tsUpdated = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tsUpdated = options.longs === String ? "0" : 0;
                object.profitRanking = 0;
                object.profitRate = 0;
                object.lastAskPrice = 0;
                object.lastBidPrice = 0;
                object.curAskPrice = 0;
                object.todaySignal = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.curAskTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.curAskTs = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastBidTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastBidTs = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastAskTs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastAskTs = options.longs === String ? "0" : 0;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.industry != null && message.hasOwnProperty("industry"))
                object.industry = message.industry;
            if (message.tsUpdated != null && message.hasOwnProperty("tsUpdated"))
                if (typeof message.tsUpdated === "number")
                    object.tsUpdated = options.longs === String ? String(message.tsUpdated) : message.tsUpdated;
                else
                    object.tsUpdated = options.longs === String ? $util.Long.prototype.toString.call(message.tsUpdated) : options.longs === Number ? new $util.LongBits(message.tsUpdated.low >>> 0, message.tsUpdated.high >>> 0).toNumber() : message.tsUpdated;
            if (message.profitRanking != null && message.hasOwnProperty("profitRanking"))
                object.profitRanking = message.profitRanking;
            if (message.profitRate != null && message.hasOwnProperty("profitRate"))
                object.profitRate = options.json && !isFinite(message.profitRate) ? String(message.profitRate) : message.profitRate;
            if (message.lastAskPrice != null && message.hasOwnProperty("lastAskPrice"))
                object.lastAskPrice = options.json && !isFinite(message.lastAskPrice) ? String(message.lastAskPrice) : message.lastAskPrice;
            if (message.lastBidPrice != null && message.hasOwnProperty("lastBidPrice"))
                object.lastBidPrice = options.json && !isFinite(message.lastBidPrice) ? String(message.lastBidPrice) : message.lastBidPrice;
            if (message.curAskPrice != null && message.hasOwnProperty("curAskPrice"))
                object.curAskPrice = options.json && !isFinite(message.curAskPrice) ? String(message.curAskPrice) : message.curAskPrice;
            if (message.todaySignal != null && message.hasOwnProperty("todaySignal"))
                object.todaySignal = options.json && !isFinite(message.todaySignal) ? String(message.todaySignal) : message.todaySignal;
            if (message.curAskTs != null && message.hasOwnProperty("curAskTs"))
                if (typeof message.curAskTs === "number")
                    object.curAskTs = options.longs === String ? String(message.curAskTs) : message.curAskTs;
                else
                    object.curAskTs = options.longs === String ? $util.Long.prototype.toString.call(message.curAskTs) : options.longs === Number ? new $util.LongBits(message.curAskTs.low >>> 0, message.curAskTs.high >>> 0).toNumber() : message.curAskTs;
            if (message.lastBidTs != null && message.hasOwnProperty("lastBidTs"))
                if (typeof message.lastBidTs === "number")
                    object.lastBidTs = options.longs === String ? String(message.lastBidTs) : message.lastBidTs;
                else
                    object.lastBidTs = options.longs === String ? $util.Long.prototype.toString.call(message.lastBidTs) : options.longs === Number ? new $util.LongBits(message.lastBidTs.low >>> 0, message.lastBidTs.high >>> 0).toNumber() : message.lastBidTs;
            if (message.lastAskTs != null && message.hasOwnProperty("lastAskTs"))
                if (typeof message.lastAskTs === "number")
                    object.lastAskTs = options.longs === String ? String(message.lastAskTs) : message.lastAskTs;
                else
                    object.lastAskTs = options.longs === String ? $util.Long.prototype.toString.call(message.lastAskTs) : options.longs === Number ? new $util.LongBits(message.lastAskTs.low >>> 0, message.lastAskTs.high >>> 0).toNumber() : message.lastAskTs;
            return object;
        };

        /**
         * Converts this AiStockItem to JSON.
         * @function toJSON
         * @memberof pb.AiStockItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AiStockItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AiStockItem;
    })();

    pb.CmdQueryAiStockListReply = (function () {

        /**
         * Properties of a CmdQueryAiStockListReply.
         * @memberof pb
         * @interface ICmdQueryAiStockListReply
         * @property {Array.<pb.IAiStockItem>|null} [items] CmdQueryAiStockListReply items
         */

        /**
         * Constructs a new CmdQueryAiStockListReply.
         * @memberof pb
         * @classdesc Represents a CmdQueryAiStockListReply.
         * @implements ICmdQueryAiStockListReply
         * @constructor
         * @param {pb.ICmdQueryAiStockListReply=} [properties] Properties to set
         */
        function CmdQueryAiStockListReply(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryAiStockListReply items.
         * @member {Array.<pb.IAiStockItem>} items
         * @memberof pb.CmdQueryAiStockListReply
         * @instance
         */
        CmdQueryAiStockListReply.prototype.items = $util.emptyArray;

        /**
         * Creates a new CmdQueryAiStockListReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {pb.ICmdQueryAiStockListReply=} [properties] Properties to set
         * @returns {pb.CmdQueryAiStockListReply} CmdQueryAiStockListReply instance
         */
        CmdQueryAiStockListReply.create = function create(properties) {
            return new CmdQueryAiStockListReply(properties);
        };

        /**
         * Encodes the specified CmdQueryAiStockListReply message. Does not implicitly {@link pb.CmdQueryAiStockListReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {pb.ICmdQueryAiStockListReply} message CmdQueryAiStockListReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiStockListReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.AiStockItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdQueryAiStockListReply message, length delimited. Does not implicitly {@link pb.CmdQueryAiStockListReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {pb.ICmdQueryAiStockListReply} message CmdQueryAiStockListReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiStockListReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryAiStockListReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryAiStockListReply} CmdQueryAiStockListReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiStockListReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryAiStockListReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 2:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.AiStockItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryAiStockListReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryAiStockListReply} CmdQueryAiStockListReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiStockListReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryAiStockListReply message.
         * @function verify
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryAiStockListReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.AiStockItem.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CmdQueryAiStockListReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryAiStockListReply} CmdQueryAiStockListReply
         */
        CmdQueryAiStockListReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryAiStockListReply)
                return object;
            var message = new $root.pb.CmdQueryAiStockListReply();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.CmdQueryAiStockListReply.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.CmdQueryAiStockListReply.items: object expected");
                    message.items[i] = $root.pb.AiStockItem.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryAiStockListReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryAiStockListReply
         * @static
         * @param {pb.CmdQueryAiStockListReply} message CmdQueryAiStockListReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryAiStockListReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.AiStockItem.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this CmdQueryAiStockListReply to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryAiStockListReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryAiStockListReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryAiStockListReply;
    })();

    pb.CmdQueryAiSignal = (function () {

        /**
         * Properties of a CmdQueryAiSignal.
         * @memberof pb
         * @interface ICmdQueryAiSignal
         * @property {number|null} [code] CmdQueryAiSignal code
         */

        /**
         * Constructs a new CmdQueryAiSignal.
         * @memberof pb
         * @classdesc Represents a CmdQueryAiSignal.
         * @implements ICmdQueryAiSignal
         * @constructor
         * @param {pb.ICmdQueryAiSignal=} [properties] Properties to set
         */
        function CmdQueryAiSignal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryAiSignal code.
         * @member {number} code
         * @memberof pb.CmdQueryAiSignal
         * @instance
         */
        CmdQueryAiSignal.prototype.code = 0;

        /**
         * Creates a new CmdQueryAiSignal instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {pb.ICmdQueryAiSignal=} [properties] Properties to set
         * @returns {pb.CmdQueryAiSignal} CmdQueryAiSignal instance
         */
        CmdQueryAiSignal.create = function create(properties) {
            return new CmdQueryAiSignal(properties);
        };

        /**
         * Encodes the specified CmdQueryAiSignal message. Does not implicitly {@link pb.CmdQueryAiSignal.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {pb.ICmdQueryAiSignal} message CmdQueryAiSignal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiSignal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
            return writer;
        };

        /**
         * Encodes the specified CmdQueryAiSignal message, length delimited. Does not implicitly {@link pb.CmdQueryAiSignal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {pb.ICmdQueryAiSignal} message CmdQueryAiSignal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiSignal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryAiSignal message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryAiSignal} CmdQueryAiSignal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiSignal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryAiSignal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryAiSignal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryAiSignal} CmdQueryAiSignal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiSignal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryAiSignal message.
         * @function verify
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryAiSignal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            return null;
        };

        /**
         * Creates a CmdQueryAiSignal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryAiSignal} CmdQueryAiSignal
         */
        CmdQueryAiSignal.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryAiSignal)
                return object;
            var message = new $root.pb.CmdQueryAiSignal();
            if (object.code != null)
                message.code = object.code >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryAiSignal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryAiSignal
         * @static
         * @param {pb.CmdQueryAiSignal} message CmdQueryAiSignal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryAiSignal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.code = 0;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this CmdQueryAiSignal to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryAiSignal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryAiSignal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryAiSignal;
    })();

    pb.AiSignalItem = (function () {

        /**
         * Properties of an AiSignalItem.
         * @memberof pb
         * @interface IAiSignalItem
         * @property {number|Long|null} [ts] AiSignalItem ts
         * @property {number|null} [flag] AiSignalItem flag
         * @property {number|null} [price] AiSignalItem price
         * @property {number|null} [ma10] AiSignalItem ma10
         * @property {number|null} [ma30] AiSignalItem ma30
         */

        /**
         * Constructs a new AiSignalItem.
         * @memberof pb
         * @classdesc Represents an AiSignalItem.
         * @implements IAiSignalItem
         * @constructor
         * @param {pb.IAiSignalItem=} [properties] Properties to set
         */
        function AiSignalItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AiSignalItem ts.
         * @member {number|Long} ts
         * @memberof pb.AiSignalItem
         * @instance
         */
        AiSignalItem.prototype.ts = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * AiSignalItem flag.
         * @member {number} flag
         * @memberof pb.AiSignalItem
         * @instance
         */
        AiSignalItem.prototype.flag = 0;

        /**
         * AiSignalItem price.
         * @member {number} price
         * @memberof pb.AiSignalItem
         * @instance
         */
        AiSignalItem.prototype.price = 0;

        /**
         * AiSignalItem ma10.
         * @member {number} ma10
         * @memberof pb.AiSignalItem
         * @instance
         */
        AiSignalItem.prototype.ma10 = 0;

        /**
         * AiSignalItem ma30.
         * @member {number} ma30
         * @memberof pb.AiSignalItem
         * @instance
         */
        AiSignalItem.prototype.ma30 = 0;

        /**
         * Creates a new AiSignalItem instance using the specified properties.
         * @function create
         * @memberof pb.AiSignalItem
         * @static
         * @param {pb.IAiSignalItem=} [properties] Properties to set
         * @returns {pb.AiSignalItem} AiSignalItem instance
         */
        AiSignalItem.create = function create(properties) {
            return new AiSignalItem(properties);
        };

        /**
         * Encodes the specified AiSignalItem message. Does not implicitly {@link pb.AiSignalItem.verify|verify} messages.
         * @function encode
         * @memberof pb.AiSignalItem
         * @static
         * @param {pb.IAiSignalItem} message AiSignalItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AiSignalItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.flag);
            if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.price);
            if (message.ma10 != null && Object.hasOwnProperty.call(message, "ma10"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.ma10);
            if (message.ma30 != null && Object.hasOwnProperty.call(message, "ma30"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.ma30);
            return writer;
        };

        /**
         * Encodes the specified AiSignalItem message, length delimited. Does not implicitly {@link pb.AiSignalItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.AiSignalItem
         * @static
         * @param {pb.IAiSignalItem} message AiSignalItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AiSignalItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AiSignalItem message from the specified reader or buffer.
         * @function decode
         * @memberof pb.AiSignalItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.AiSignalItem} AiSignalItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AiSignalItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.AiSignalItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.ts = reader.int64();
                        break;
                    case 2:
                        message.flag = reader.double();
                        break;
                    case 3:
                        message.price = reader.double();
                        break;
                    case 4:
                        message.ma10 = reader.double();
                        break;
                    case 5:
                        message.ma30 = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an AiSignalItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.AiSignalItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.AiSignalItem} AiSignalItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AiSignalItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AiSignalItem message.
         * @function verify
         * @memberof pb.AiSignalItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AiSignalItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                    return "ts: integer|Long expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (typeof message.flag !== "number")
                    return "flag: number expected";
            if (message.price != null && message.hasOwnProperty("price"))
                if (typeof message.price !== "number")
                    return "price: number expected";
            if (message.ma10 != null && message.hasOwnProperty("ma10"))
                if (typeof message.ma10 !== "number")
                    return "ma10: number expected";
            if (message.ma30 != null && message.hasOwnProperty("ma30"))
                if (typeof message.ma30 !== "number")
                    return "ma30: number expected";
            return null;
        };

        /**
         * Creates an AiSignalItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.AiSignalItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.AiSignalItem} AiSignalItem
         */
        AiSignalItem.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.AiSignalItem)
                return object;
            var message = new $root.pb.AiSignalItem();
            if (object.ts != null)
                if ($util.Long)
                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                else if (typeof object.ts === "string")
                    message.ts = parseInt(object.ts, 10);
                else if (typeof object.ts === "number")
                    message.ts = object.ts;
                else if (typeof object.ts === "object")
                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
            if (object.flag != null)
                message.flag = Number(object.flag);
            if (object.price != null)
                message.price = Number(object.price);
            if (object.ma10 != null)
                message.ma10 = Number(object.ma10);
            if (object.ma30 != null)
                message.ma30 = Number(object.ma30);
            return message;
        };

        /**
         * Creates a plain object from an AiSignalItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.AiSignalItem
         * @static
         * @param {pb.AiSignalItem} message AiSignalItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AiSignalItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ts = options.longs === String ? "0" : 0;
                object.flag = 0;
                object.price = 0;
                object.ma10 = 0;
                object.ma30 = 0;
            }
            if (message.ts != null && message.hasOwnProperty("ts"))
                if (typeof message.ts === "number")
                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                else
                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = options.json && !isFinite(message.flag) ? String(message.flag) : message.flag;
            if (message.price != null && message.hasOwnProperty("price"))
                object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
            if (message.ma10 != null && message.hasOwnProperty("ma10"))
                object.ma10 = options.json && !isFinite(message.ma10) ? String(message.ma10) : message.ma10;
            if (message.ma30 != null && message.hasOwnProperty("ma30"))
                object.ma30 = options.json && !isFinite(message.ma30) ? String(message.ma30) : message.ma30;
            return object;
        };

        /**
         * Converts this AiSignalItem to JSON.
         * @function toJSON
         * @memberof pb.AiSignalItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AiSignalItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AiSignalItem;
    })();

    pb.CmdQueryAiSignalReply = (function () {

        /**
         * Properties of a CmdQueryAiSignalReply.
         * @memberof pb
         * @interface ICmdQueryAiSignalReply
         * @property {number|null} [code] CmdQueryAiSignalReply code
         * @property {string|null} [industry] CmdQueryAiSignalReply industry
         * @property {Array.<pb.IAiSignalItem>|null} [signals] CmdQueryAiSignalReply signals
         */

        /**
         * Constructs a new CmdQueryAiSignalReply.
         * @memberof pb
         * @classdesc Represents a CmdQueryAiSignalReply.
         * @implements ICmdQueryAiSignalReply
         * @constructor
         * @param {pb.ICmdQueryAiSignalReply=} [properties] Properties to set
         */
        function CmdQueryAiSignalReply(properties) {
            this.signals = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdQueryAiSignalReply code.
         * @member {number} code
         * @memberof pb.CmdQueryAiSignalReply
         * @instance
         */
        CmdQueryAiSignalReply.prototype.code = 0;

        /**
         * CmdQueryAiSignalReply industry.
         * @member {string} industry
         * @memberof pb.CmdQueryAiSignalReply
         * @instance
         */
        CmdQueryAiSignalReply.prototype.industry = "";

        /**
         * CmdQueryAiSignalReply signals.
         * @member {Array.<pb.IAiSignalItem>} signals
         * @memberof pb.CmdQueryAiSignalReply
         * @instance
         */
        CmdQueryAiSignalReply.prototype.signals = $util.emptyArray;

        /**
         * Creates a new CmdQueryAiSignalReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {pb.ICmdQueryAiSignalReply=} [properties] Properties to set
         * @returns {pb.CmdQueryAiSignalReply} CmdQueryAiSignalReply instance
         */
        CmdQueryAiSignalReply.create = function create(properties) {
            return new CmdQueryAiSignalReply(properties);
        };

        /**
         * Encodes the specified CmdQueryAiSignalReply message. Does not implicitly {@link pb.CmdQueryAiSignalReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {pb.ICmdQueryAiSignalReply} message CmdQueryAiSignalReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiSignalReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
            if (message.industry != null && Object.hasOwnProperty.call(message, "industry"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.industry);
            if (message.signals != null && message.signals.length)
                for (var i = 0; i < message.signals.length; ++i)
                    $root.pb.AiSignalItem.encode(message.signals[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CmdQueryAiSignalReply message, length delimited. Does not implicitly {@link pb.CmdQueryAiSignalReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {pb.ICmdQueryAiSignalReply} message CmdQueryAiSignalReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdQueryAiSignalReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdQueryAiSignalReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdQueryAiSignalReply} CmdQueryAiSignalReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiSignalReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdQueryAiSignalReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.industry = reader.string();
                        break;
                    case 3:
                        if (!(message.signals && message.signals.length))
                            message.signals = [];
                        message.signals.push($root.pb.AiSignalItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdQueryAiSignalReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdQueryAiSignalReply} CmdQueryAiSignalReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdQueryAiSignalReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdQueryAiSignalReply message.
         * @function verify
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdQueryAiSignalReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
            if (message.industry != null && message.hasOwnProperty("industry"))
                if (!$util.isString(message.industry))
                    return "industry: string expected";
            if (message.signals != null && message.hasOwnProperty("signals")) {
                if (!Array.isArray(message.signals))
                    return "signals: array expected";
                for (var i = 0; i < message.signals.length; ++i) {
                    var error = $root.pb.AiSignalItem.verify(message.signals[i]);
                    if (error)
                        return "signals." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CmdQueryAiSignalReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdQueryAiSignalReply} CmdQueryAiSignalReply
         */
        CmdQueryAiSignalReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdQueryAiSignalReply)
                return object;
            var message = new $root.pb.CmdQueryAiSignalReply();
            if (object.code != null)
                message.code = object.code >>> 0;
            if (object.industry != null)
                message.industry = String(object.industry);
            if (object.signals) {
                if (!Array.isArray(object.signals))
                    throw TypeError(".pb.CmdQueryAiSignalReply.signals: array expected");
                message.signals = [];
                for (var i = 0; i < object.signals.length; ++i) {
                    if (typeof object.signals[i] !== "object")
                        throw TypeError(".pb.CmdQueryAiSignalReply.signals: object expected");
                    message.signals[i] = $root.pb.AiSignalItem.fromObject(object.signals[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CmdQueryAiSignalReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdQueryAiSignalReply
         * @static
         * @param {pb.CmdQueryAiSignalReply} message CmdQueryAiSignalReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdQueryAiSignalReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.signals = [];
            if (options.defaults) {
                object.code = 0;
                object.industry = "";
            }
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.industry != null && message.hasOwnProperty("industry"))
                object.industry = message.industry;
            if (message.signals && message.signals.length) {
                object.signals = [];
                for (var j = 0; j < message.signals.length; ++j)
                    object.signals[j] = $root.pb.AiSignalItem.toObject(message.signals[j], options);
            }
            return object;
        };

        /**
         * Converts this CmdQueryAiSignalReply to JSON.
         * @function toJSON
         * @memberof pb.CmdQueryAiSignalReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdQueryAiSignalReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdQueryAiSignalReply;
    })();

    pb.QuotesService = (function () {

        /**
         * Constructs a new QuotesService service.
         * @memberof pb
         * @classdesc Represents a QuotesService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function QuotesService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (QuotesService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = QuotesService;

        /**
         * Creates new QuotesService service using the specified rpc implementation.
         * @function create
         * @memberof pb.QuotesService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {QuotesService} RPC service. Useful where requests and/or responses are streamed.
         */
        QuotesService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link pb.QuotesService#quotesQuery}.
         * @memberof pb.QuotesService
         * @typedef QuotesQueryCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.Quotes} [response] Quotes
         */

        /**
         * Calls QuotesQuery.
         * @function quotesQuery
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQuoteQuery} request CmdQuoteQuery message or plain object
         * @param {pb.QuotesService.QuotesQueryCallback} callback Node-style callback called with the error, if any, and Quotes
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.quotesQuery = function quotesQuery(request, callback) {
            return this.rpcCall(quotesQuery, $root.pb.CmdQuoteQuery, $root.pb.Quotes, request, callback);
        }, "name", { value: "QuotesQuery" });

        /**
         * Calls QuotesQuery.
         * @function quotesQuery
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQuoteQuery} request CmdQuoteQuery message or plain object
         * @returns {Promise<pb.Quotes>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.QuotesService#quotesSubscribe}.
         * @memberof pb.QuotesService
         * @typedef QuotesSubscribeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls QuotesSubscribe.
         * @function quotesSubscribe
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQuoteSubscribe} request CmdQuoteSubscribe message or plain object
         * @param {pb.QuotesService.QuotesSubscribeCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.quotesSubscribe = function quotesSubscribe(request, callback) {
            return this.rpcCall(quotesSubscribe, $root.pb.CmdQuoteSubscribe, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "QuotesSubscribe" });

        /**
         * Calls QuotesSubscribe.
         * @function quotesSubscribe
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQuoteSubscribe} request CmdQuoteSubscribe message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.QuotesService#isTradingDay}.
         * @memberof pb.QuotesService
         * @typedef IsTradingDayCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdTradingDayReply} [response] CmdTradingDayReply
         */

        /**
         * Calls IsTradingDay.
         * @function isTradingDay
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdTradingDay} request CmdTradingDay message or plain object
         * @param {pb.QuotesService.IsTradingDayCallback} callback Node-style callback called with the error, if any, and CmdTradingDayReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.isTradingDay = function isTradingDay(request, callback) {
            return this.rpcCall(isTradingDay, $root.pb.CmdTradingDay, $root.pb.CmdTradingDayReply, request, callback);
        }, "name", { value: "IsTradingDay" });

        /**
         * Calls IsTradingDay.
         * @function isTradingDay
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdTradingDay} request CmdTradingDay message or plain object
         * @returns {Promise<pb.CmdTradingDayReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.QuotesService#queryTradingDay}.
         * @memberof pb.QuotesService
         * @typedef QueryTradingDayCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdTradingDayReply} [response] CmdTradingDayReply
         */

        /**
         * Calls QueryTradingDay.
         * @function queryTradingDay
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdTradingDay} request CmdTradingDay message or plain object
         * @param {pb.QuotesService.QueryTradingDayCallback} callback Node-style callback called with the error, if any, and CmdTradingDayReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.queryTradingDay = function queryTradingDay(request, callback) {
            return this.rpcCall(queryTradingDay, $root.pb.CmdTradingDay, $root.pb.CmdTradingDayReply, request, callback);
        }, "name", { value: "QueryTradingDay" });

        /**
         * Calls QueryTradingDay.
         * @function queryTradingDay
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdTradingDay} request CmdTradingDay message or plain object
         * @returns {Promise<pb.CmdTradingDayReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.QuotesService#queryAiStockList}.
         * @memberof pb.QuotesService
         * @typedef QueryAiStockListCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdQueryAiStockListReply} [response] CmdQueryAiStockListReply
         */

        /**
         * Calls QueryAiStockList.
         * @function queryAiStockList
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQueryAiStockList} request CmdQueryAiStockList message or plain object
         * @param {pb.QuotesService.QueryAiStockListCallback} callback Node-style callback called with the error, if any, and CmdQueryAiStockListReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.queryAiStockList = function queryAiStockList(request, callback) {
            return this.rpcCall(queryAiStockList, $root.pb.CmdQueryAiStockList, $root.pb.CmdQueryAiStockListReply, request, callback);
        }, "name", { value: "QueryAiStockList" });

        /**
         * Calls QueryAiStockList.
         * @function queryAiStockList
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQueryAiStockList} request CmdQueryAiStockList message or plain object
         * @returns {Promise<pb.CmdQueryAiStockListReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.QuotesService#queryAiSignal}.
         * @memberof pb.QuotesService
         * @typedef QueryAiSignalCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdQueryAiSignalReply} [response] CmdQueryAiSignalReply
         */

        /**
         * Calls QueryAiSignal.
         * @function queryAiSignal
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQueryAiSignal} request CmdQueryAiSignal message or plain object
         * @param {pb.QuotesService.QueryAiSignalCallback} callback Node-style callback called with the error, if any, and CmdQueryAiSignalReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesService.prototype.queryAiSignal = function queryAiSignal(request, callback) {
            return this.rpcCall(queryAiSignal, $root.pb.CmdQueryAiSignal, $root.pb.CmdQueryAiSignalReply, request, callback);
        }, "name", { value: "QueryAiSignal" });

        /**
         * Calls QueryAiSignal.
         * @function queryAiSignal
         * @memberof pb.QuotesService
         * @instance
         * @param {pb.ICmdQueryAiSignal} request CmdQueryAiSignal message or plain object
         * @returns {Promise<pb.CmdQueryAiSignalReply>} Promise
         * @variation 2
         */

        return QuotesService;
    })();

    pb.QuotesFutureService = (function () {

        /**
         * Constructs a new QuotesFutureService service.
         * @memberof pb
         * @classdesc Represents a QuotesFutureService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function QuotesFutureService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (QuotesFutureService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = QuotesFutureService;

        /**
         * Creates new QuotesFutureService service using the specified rpc implementation.
         * @function create
         * @memberof pb.QuotesFutureService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {QuotesFutureService} RPC service. Useful where requests and/or responses are streamed.
         */
        QuotesFutureService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link pb.QuotesFutureService#quotesQuery}.
         * @memberof pb.QuotesFutureService
         * @typedef QuotesQueryCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.QuotesFuture} [response] QuotesFuture
         */

        /**
         * Calls QuotesQuery.
         * @function quotesQuery
         * @memberof pb.QuotesFutureService
         * @instance
         * @param {pb.ICmdQuoteQueryFuture} request CmdQuoteQueryFuture message or plain object
         * @param {pb.QuotesFutureService.QuotesQueryCallback} callback Node-style callback called with the error, if any, and QuotesFuture
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(QuotesFutureService.prototype.quotesQuery = function quotesQuery(request, callback) {
            return this.rpcCall(quotesQuery, $root.pb.CmdQuoteQueryFuture, $root.pb.QuotesFuture, request, callback);
        }, "name", { value: "QuotesQuery" });

        /**
         * Calls QuotesQuery.
         * @function quotesQuery
         * @memberof pb.QuotesFutureService
         * @instance
         * @param {pb.ICmdQuoteQueryFuture} request CmdQuoteQueryFuture message or plain object
         * @returns {Promise<pb.QuotesFuture>} Promise
         * @variation 2
         */

        return QuotesFutureService;
    })();

    /**
     * Platform enum.
     * @name pb.Platform
     * @enum {number}
     * @property {number} Platform_Null=0 Platform_Null value
     * @property {number} Platform_Andriod=1 Platform_Andriod value
     * @property {number} Platform_Apple=2 Platform_Apple value
     * @property {number} Platform_WeChatMinProgram=3 Platform_WeChatMinProgram value
     */
    pb.Platform = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Platform_Null"] = 0;
        values[valuesById[1] = "Platform_Andriod"] = 1;
        values[valuesById[2] = "Platform_Apple"] = 2;
        values[valuesById[3] = "Platform_WeChatMinProgram"] = 3;
        return values;
    })();

    /**
     * AppFrom enum.
     * @name pb.AppFrom
     * @enum {number}
     * @property {number} Ios_000=0 Ios_000 value
     * @property {number} Android_001=1 Android_001 value
     * @property {number} Android_201=201 Android_201 value
     * @property {number} Android_204=204 Android_204 value
     * @property {number} Android_205=205 Android_205 value
     * @property {number} Android_206=206 Android_206 value
     * @property {number} Android_208=208 Android_208 value
     * @property {number} Android_209=209 Android_209 value
     * @property {number} Android_210=210 Android_210 value
     * @property {number} Android_211=211 Android_211 value
     * @property {number} Android_212=212 Android_212 value
     * @property {number} Android_301=301 Android_301 value
     * @property {number} Android_302=302 Android_302 value
     * @property {number} Android_601=601 Android_601 value
     * @property {number} Android_1000=1000 Android_1000 value
     * @property {number} Android_1204=1204 Android_1204 value
     * @property {number} Android_1205=1205 Android_1205 value
     * @property {number} Android_1208=1208 Android_1208 value
     * @property {number} Android_1212=1212 Android_1212 value
     * @property {number} WebsiteAndriod=4999 WebsiteAndriod value
     * @property {number} WebsiteIos=6666 WebsiteIos value
     * @property {number} IosAppleStore=6667 IosAppleStore value
     * @property {number} Ipad=6668 Ipad value
     * @property {number} WeChatMinProgram=8888 WeChatMinProgram value
     * @property {number} Website3th=9999 Website3th value
     * @property {number} Test=10000 Test value
     */
    pb.AppFrom = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Ios_000"] = 0;
        values[valuesById[1] = "Android_001"] = 1;
        values[valuesById[201] = "Android_201"] = 201;
        values[valuesById[204] = "Android_204"] = 204;
        values[valuesById[205] = "Android_205"] = 205;
        values[valuesById[206] = "Android_206"] = 206;
        values[valuesById[208] = "Android_208"] = 208;
        values[valuesById[209] = "Android_209"] = 209;
        values[valuesById[210] = "Android_210"] = 210;
        values[valuesById[211] = "Android_211"] = 211;
        values[valuesById[212] = "Android_212"] = 212;
        values[valuesById[301] = "Android_301"] = 301;
        values[valuesById[302] = "Android_302"] = 302;
        values[valuesById[601] = "Android_601"] = 601;
        values[valuesById[1000] = "Android_1000"] = 1000;
        values[valuesById[1204] = "Android_1204"] = 1204;
        values[valuesById[1205] = "Android_1205"] = 1205;
        values[valuesById[1208] = "Android_1208"] = 1208;
        values[valuesById[1212] = "Android_1212"] = 1212;
        values[valuesById[4999] = "WebsiteAndriod"] = 4999;
        values[valuesById[6666] = "WebsiteIos"] = 6666;
        values[valuesById[6667] = "IosAppleStore"] = 6667;
        values[valuesById[6668] = "Ipad"] = 6668;
        values[valuesById[8888] = "WeChatMinProgram"] = 8888;
        values[valuesById[9999] = "Website3th"] = 9999;
        values[valuesById[10000] = "Test"] = 10000;
        return values;
    })();

    /**
     * LoginType enum.
     * @name pb.LoginType
     * @enum {number}
     * @property {number} LoginType_NULL=0 LoginType_NULL value
     * @property {number} MobilePhoneId=1 MobilePhoneId value
     * @property {number} WeChat=2 WeChat value
     * @property {number} QQ=3 QQ value
     * @property {number} WeChat_MiniProg=4 WeChat_MiniProg value
     * @property {number} AppTest=98 AppTest value
     * @property {number} WebTest=99 WebTest value
     */
    pb.LoginType = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "LoginType_NULL"] = 0;
        values[valuesById[1] = "MobilePhoneId"] = 1;
        values[valuesById[2] = "WeChat"] = 2;
        values[valuesById[3] = "QQ"] = 3;
        values[valuesById[4] = "WeChat_MiniProg"] = 4;
        values[valuesById[98] = "AppTest"] = 98;
        values[valuesById[99] = "WebTest"] = 99;
        return values;
    })();

    /**
     * AdPosition enum.
     * @name pb.AdPosition
     * @enum {number}
     * @property {number} AdPosition_NULL=0 AdPosition_NULL value
     * @property {number} AdPosition_Startup=1 AdPosition_Startup value
     * @property {number} AdPosition_Main=2 AdPosition_Main value
     * @property {number} AdPosition_Exit=3 AdPosition_Exit value
     * @property {number} AdPosition_Plugin=4 AdPosition_Plugin value
     * @property {number} AdPosition_CgdsList=5 AdPosition_CgdsList value
     * @property {number} AdPosition_AiStockList=6 AdPosition_AiStockList value
     * @property {number} AdPosition_Qihuo=7 AdPosition_Qihuo value
     * @property {number} AdPosition_DailyAward=8 AdPosition_DailyAward value
     * @property {number} AdPosition_7Award=9 AdPosition_7Award value
     * @property {number} AdPosition_Dxxl=10 AdPosition_Dxxl value
     * @property {number} AdPosition_Qhxl=11 AdPosition_Qhxl value
     * @property {number} AdPosition_Tjdxl=12 AdPosition_Tjdxl value
     * @property {number} AdPosition_Broker=13 AdPosition_Broker value
     * @property {number} AdPosition_Cg=14 AdPosition_Cg value
     */
    pb.AdPosition = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "AdPosition_NULL"] = 0;
        values[valuesById[1] = "AdPosition_Startup"] = 1;
        values[valuesById[2] = "AdPosition_Main"] = 2;
        values[valuesById[3] = "AdPosition_Exit"] = 3;
        values[valuesById[4] = "AdPosition_Plugin"] = 4;
        values[valuesById[5] = "AdPosition_CgdsList"] = 5;
        values[valuesById[6] = "AdPosition_AiStockList"] = 6;
        values[valuesById[7] = "AdPosition_Qihuo"] = 7;
        values[valuesById[8] = "AdPosition_DailyAward"] = 8;
        values[valuesById[9] = "AdPosition_7Award"] = 9;
        values[valuesById[10] = "AdPosition_Dxxl"] = 10;
        values[valuesById[11] = "AdPosition_Qhxl"] = 11;
        values[valuesById[12] = "AdPosition_Tjdxl"] = 12;
        values[valuesById[13] = "AdPosition_Broker"] = 13;
        values[valuesById[14] = "AdPosition_Cg"] = 14;
        return values;
    })();

    pb.AdClicked = (function () {

        /**
         * Properties of an AdClicked.
         * @memberof pb
         * @interface IAdClicked
         * @property {number|null} [id] AdClicked id
         * @property {number|null} [pos] AdClicked pos
         * @property {string|null} [url] AdClicked url
         * @property {string|null} [title] AdClicked title
         * @property {number|null} [uid] AdClicked uid
         * @property {pb.AppFrom|null} [from] AdClicked from
         * @property {number|null} [gold] AdClicked gold
         * @property {number|null} [diamond] AdClicked diamond
         * @property {number|null} [coupon] AdClicked coupon
         */

        /**
         * Constructs a new AdClicked.
         * @memberof pb
         * @classdesc Represents an AdClicked.
         * @implements IAdClicked
         * @constructor
         * @param {pb.IAdClicked=} [properties] Properties to set
         */
        function AdClicked(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AdClicked id.
         * @member {number} id
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.id = 0;

        /**
         * AdClicked pos.
         * @member {number} pos
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.pos = 0;

        /**
         * AdClicked url.
         * @member {string} url
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.url = "";

        /**
         * AdClicked title.
         * @member {string} title
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.title = "";

        /**
         * AdClicked uid.
         * @member {number} uid
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.uid = 0;

        /**
         * AdClicked from.
         * @member {pb.AppFrom} from
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.from = 0;

        /**
         * AdClicked gold.
         * @member {number} gold
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.gold = 0;

        /**
         * AdClicked diamond.
         * @member {number} diamond
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.diamond = 0;

        /**
         * AdClicked coupon.
         * @member {number} coupon
         * @memberof pb.AdClicked
         * @instance
         */
        AdClicked.prototype.coupon = 0;

        /**
         * Creates a new AdClicked instance using the specified properties.
         * @function create
         * @memberof pb.AdClicked
         * @static
         * @param {pb.IAdClicked=} [properties] Properties to set
         * @returns {pb.AdClicked} AdClicked instance
         */
        AdClicked.create = function create(properties) {
            return new AdClicked(properties);
        };

        /**
         * Encodes the specified AdClicked message. Does not implicitly {@link pb.AdClicked.verify|verify} messages.
         * @function encode
         * @memberof pb.AdClicked
         * @static
         * @param {pb.IAdClicked} message AdClicked message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdClicked.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.pos != null && Object.hasOwnProperty.call(message, "pos"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pos);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.url);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.uid);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.from);
            if (message.gold != null && Object.hasOwnProperty.call(message, "gold"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.gold);
            if (message.diamond != null && Object.hasOwnProperty.call(message, "diamond"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.diamond);
            if (message.coupon != null && Object.hasOwnProperty.call(message, "coupon"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.coupon);
            return writer;
        };

        /**
         * Encodes the specified AdClicked message, length delimited. Does not implicitly {@link pb.AdClicked.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.AdClicked
         * @static
         * @param {pb.IAdClicked} message AdClicked message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdClicked.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AdClicked message from the specified reader or buffer.
         * @function decode
         * @memberof pb.AdClicked
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.AdClicked} AdClicked
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdClicked.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.AdClicked();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.pos = reader.int32();
                        break;
                    case 3:
                        message.url = reader.string();
                        break;
                    case 4:
                        message.title = reader.string();
                        break;
                    case 5:
                        message.uid = reader.int32();
                        break;
                    case 6:
                        message.from = reader.int32();
                        break;
                    case 7:
                        message.gold = reader.int32();
                        break;
                    case 8:
                        message.diamond = reader.int32();
                        break;
                    case 9:
                        message.coupon = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes an AdClicked message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.AdClicked
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.AdClicked} AdClicked
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdClicked.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AdClicked message.
         * @function verify
         * @memberof pb.AdClicked
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AdClicked.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            if (message.gold != null && message.hasOwnProperty("gold"))
                if (!$util.isInteger(message.gold))
                    return "gold: integer expected";
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                if (!$util.isInteger(message.diamond))
                    return "diamond: integer expected";
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                if (!$util.isInteger(message.coupon))
                    return "coupon: integer expected";
            return null;
        };

        /**
         * Creates an AdClicked message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.AdClicked
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.AdClicked} AdClicked
         */
        AdClicked.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.AdClicked)
                return object;
            var message = new $root.pb.AdClicked();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.pos != null)
                message.pos = object.pos | 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.title != null)
                message.title = String(object.title);
            if (object.uid != null)
                message.uid = object.uid | 0;
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            if (object.gold != null)
                message.gold = object.gold | 0;
            if (object.diamond != null)
                message.diamond = object.diamond | 0;
            if (object.coupon != null)
                message.coupon = object.coupon | 0;
            return message;
        };

        /**
         * Creates a plain object from an AdClicked message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.AdClicked
         * @static
         * @param {pb.AdClicked} message AdClicked
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AdClicked.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.pos = 0;
                object.url = "";
                object.title = "";
                object.uid = 0;
                object.from = options.enums === String ? "Ios_000" : 0;
                object.gold = 0;
                object.diamond = 0;
                object.coupon = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.pos != null && message.hasOwnProperty("pos"))
                object.pos = message.pos;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            if (message.gold != null && message.hasOwnProperty("gold"))
                object.gold = message.gold;
            if (message.diamond != null && message.hasOwnProperty("diamond"))
                object.diamond = message.diamond;
            if (message.coupon != null && message.hasOwnProperty("coupon"))
                object.coupon = message.coupon;
            return object;
        };

        /**
         * Converts this AdClicked to JSON.
         * @function toJSON
         * @memberof pb.AdClicked
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AdClicked.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AdClicked;
    })();

    pb.CmdRegistry = (function () {

        /**
         * Properties of a CmdRegistry.
         * @memberof pb
         * @interface ICmdRegistry
         * @property {string|null} [account] CmdRegistry account
         * @property {pb.LoginType|null} [type] CmdRegistry type
         * @property {string|null} [pwd] CmdRegistry pwd
         * @property {string|null} [smsCode] CmdRegistry smsCode
         * @property {pb.AppFrom|null} [from] CmdRegistry from
         * @property {boolean|null} [websocket] CmdRegistry websocket
         * @property {string|null} [unionId] CmdRegistry unionId
         * @property {number|null} [inviter] CmdRegistry inviter
         */

        /**
         * Constructs a new CmdRegistry.
         * @memberof pb
         * @classdesc Represents a CmdRegistry.
         * @implements ICmdRegistry
         * @constructor
         * @param {pb.ICmdRegistry=} [properties] Properties to set
         */
        function CmdRegistry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdRegistry account.
         * @member {string} account
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.account = "";

        /**
         * CmdRegistry type.
         * @member {pb.LoginType} type
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.type = 0;

        /**
         * CmdRegistry pwd.
         * @member {string} pwd
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.pwd = "";

        /**
         * CmdRegistry smsCode.
         * @member {string} smsCode
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.smsCode = "";

        /**
         * CmdRegistry from.
         * @member {pb.AppFrom} from
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.from = 0;

        /**
         * CmdRegistry websocket.
         * @member {boolean} websocket
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.websocket = false;

        /**
         * CmdRegistry unionId.
         * @member {string} unionId
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.unionId = "";

        /**
         * CmdRegistry inviter.
         * @member {number} inviter
         * @memberof pb.CmdRegistry
         * @instance
         */
        CmdRegistry.prototype.inviter = 0;

        /**
         * Creates a new CmdRegistry instance using the specified properties.
         * @function create
         * @memberof pb.CmdRegistry
         * @static
         * @param {pb.ICmdRegistry=} [properties] Properties to set
         * @returns {pb.CmdRegistry} CmdRegistry instance
         */
        CmdRegistry.create = function create(properties) {
            return new CmdRegistry(properties);
        };

        /**
         * Encodes the specified CmdRegistry message. Does not implicitly {@link pb.CmdRegistry.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdRegistry
         * @static
         * @param {pb.ICmdRegistry} message CmdRegistry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRegistry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.pwd != null && Object.hasOwnProperty.call(message, "pwd"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pwd);
            if (message.smsCode != null && Object.hasOwnProperty.call(message, "smsCode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.smsCode);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.from);
            if (message.websocket != null && Object.hasOwnProperty.call(message, "websocket"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.websocket);
            if (message.unionId != null && Object.hasOwnProperty.call(message, "unionId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.unionId);
            if (message.inviter != null && Object.hasOwnProperty.call(message, "inviter"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.inviter);
            return writer;
        };

        /**
         * Encodes the specified CmdRegistry message, length delimited. Does not implicitly {@link pb.CmdRegistry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdRegistry
         * @static
         * @param {pb.ICmdRegistry} message CmdRegistry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdRegistry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdRegistry message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdRegistry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdRegistry} CmdRegistry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRegistry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdRegistry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.pwd = reader.string();
                        break;
                    case 4:
                        message.smsCode = reader.string();
                        break;
                    case 5:
                        message.from = reader.int32();
                        break;
                    case 6:
                        message.websocket = reader.bool();
                        break;
                    case 7:
                        message.unionId = reader.string();
                        break;
                    case 8:
                        message.inviter = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdRegistry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdRegistry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdRegistry} CmdRegistry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdRegistry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdRegistry message.
         * @function verify
         * @memberof pb.CmdRegistry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdRegistry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 98:
                    case 99:
                        break;
                }
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                if (!$util.isString(message.smsCode))
                    return "smsCode: string expected";
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            if (message.websocket != null && message.hasOwnProperty("websocket"))
                if (typeof message.websocket !== "boolean")
                    return "websocket: boolean expected";
            if (message.unionId != null && message.hasOwnProperty("unionId"))
                if (!$util.isString(message.unionId))
                    return "unionId: string expected";
            if (message.inviter != null && message.hasOwnProperty("inviter"))
                if (!$util.isInteger(message.inviter))
                    return "inviter: integer expected";
            return null;
        };

        /**
         * Creates a CmdRegistry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdRegistry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdRegistry} CmdRegistry
         */
        CmdRegistry.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdRegistry)
                return object;
            var message = new $root.pb.CmdRegistry();
            if (object.account != null)
                message.account = String(object.account);
            switch (object.type) {
                case "LoginType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "MobilePhoneId":
                case 1:
                    message.type = 1;
                    break;
                case "WeChat":
                case 2:
                    message.type = 2;
                    break;
                case "QQ":
                case 3:
                    message.type = 3;
                    break;
                case "WeChat_MiniProg":
                case 4:
                    message.type = 4;
                    break;
                case "AppTest":
                case 98:
                    message.type = 98;
                    break;
                case "WebTest":
                case 99:
                    message.type = 99;
                    break;
            }
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            if (object.smsCode != null)
                message.smsCode = String(object.smsCode);
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            if (object.websocket != null)
                message.websocket = Boolean(object.websocket);
            if (object.unionId != null)
                message.unionId = String(object.unionId);
            if (object.inviter != null)
                message.inviter = object.inviter | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdRegistry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdRegistry
         * @static
         * @param {pb.CmdRegistry} message CmdRegistry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdRegistry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.type = options.enums === String ? "LoginType_NULL" : 0;
                object.pwd = "";
                object.smsCode = "";
                object.from = options.enums === String ? "Ios_000" : 0;
                object.websocket = false;
                object.unionId = "";
                object.inviter = 0;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.LoginType[message.type] : message.type;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                object.smsCode = message.smsCode;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            if (message.websocket != null && message.hasOwnProperty("websocket"))
                object.websocket = message.websocket;
            if (message.unionId != null && message.hasOwnProperty("unionId"))
                object.unionId = message.unionId;
            if (message.inviter != null && message.hasOwnProperty("inviter"))
                object.inviter = message.inviter;
            return object;
        };

        /**
         * Converts this CmdRegistry to JSON.
         * @function toJSON
         * @memberof pb.CmdRegistry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdRegistry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdRegistry;
    })();

    pb.CmdLogin = (function () {

        /**
         * Properties of a CmdLogin.
         * @memberof pb
         * @interface ICmdLogin
         * @property {string|null} [account] CmdLogin account
         * @property {pb.LoginType|null} [type] CmdLogin type
         * @property {string|null} [pwd] CmdLogin pwd
         * @property {pb.AppFrom|null} [from] CmdLogin from
         * @property {boolean|null} [websocket] CmdLogin websocket
         * @property {string|null} [unionId] CmdLogin unionId
         * @property {number|null} [inviter] CmdLogin inviter
         */

        /**
         * Constructs a new CmdLogin.
         * @memberof pb
         * @classdesc Represents a CmdLogin.
         * @implements ICmdLogin
         * @constructor
         * @param {pb.ICmdLogin=} [properties] Properties to set
         */
        function CmdLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdLogin account.
         * @member {string} account
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.account = "";

        /**
         * CmdLogin type.
         * @member {pb.LoginType} type
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.type = 0;

        /**
         * CmdLogin pwd.
         * @member {string} pwd
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.pwd = "";

        /**
         * CmdLogin from.
         * @member {pb.AppFrom} from
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.from = 0;

        /**
         * CmdLogin websocket.
         * @member {boolean} websocket
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.websocket = false;

        /**
         * CmdLogin unionId.
         * @member {string} unionId
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.unionId = "";

        /**
         * CmdLogin inviter.
         * @member {number} inviter
         * @memberof pb.CmdLogin
         * @instance
         */
        CmdLogin.prototype.inviter = 0;

        /**
         * Creates a new CmdLogin instance using the specified properties.
         * @function create
         * @memberof pb.CmdLogin
         * @static
         * @param {pb.ICmdLogin=} [properties] Properties to set
         * @returns {pb.CmdLogin} CmdLogin instance
         */
        CmdLogin.create = function create(properties) {
            return new CmdLogin(properties);
        };

        /**
         * Encodes the specified CmdLogin message. Does not implicitly {@link pb.CmdLogin.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdLogin
         * @static
         * @param {pb.ICmdLogin} message CmdLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.pwd != null && Object.hasOwnProperty.call(message, "pwd"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pwd);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.from);
            if (message.websocket != null && Object.hasOwnProperty.call(message, "websocket"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.websocket);
            if (message.unionId != null && Object.hasOwnProperty.call(message, "unionId"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.unionId);
            if (message.inviter != null && Object.hasOwnProperty.call(message, "inviter"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.inviter);
            return writer;
        };

        /**
         * Encodes the specified CmdLogin message, length delimited. Does not implicitly {@link pb.CmdLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdLogin
         * @static
         * @param {pb.ICmdLogin} message CmdLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdLogin message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdLogin} CmdLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.pwd = reader.string();
                        break;
                    case 4:
                        message.from = reader.int32();
                        break;
                    case 5:
                        message.websocket = reader.bool();
                        break;
                    case 6:
                        message.unionId = reader.string();
                        break;
                    case 7:
                        message.inviter = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdLogin} CmdLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdLogin message.
         * @function verify
         * @memberof pb.CmdLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 98:
                    case 99:
                        break;
                }
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            if (message.websocket != null && message.hasOwnProperty("websocket"))
                if (typeof message.websocket !== "boolean")
                    return "websocket: boolean expected";
            if (message.unionId != null && message.hasOwnProperty("unionId"))
                if (!$util.isString(message.unionId))
                    return "unionId: string expected";
            if (message.inviter != null && message.hasOwnProperty("inviter"))
                if (!$util.isInteger(message.inviter))
                    return "inviter: integer expected";
            return null;
        };

        /**
         * Creates a CmdLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdLogin} CmdLogin
         */
        CmdLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdLogin)
                return object;
            var message = new $root.pb.CmdLogin();
            if (object.account != null)
                message.account = String(object.account);
            switch (object.type) {
                case "LoginType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "MobilePhoneId":
                case 1:
                    message.type = 1;
                    break;
                case "WeChat":
                case 2:
                    message.type = 2;
                    break;
                case "QQ":
                case 3:
                    message.type = 3;
                    break;
                case "WeChat_MiniProg":
                case 4:
                    message.type = 4;
                    break;
                case "AppTest":
                case 98:
                    message.type = 98;
                    break;
                case "WebTest":
                case 99:
                    message.type = 99;
                    break;
            }
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            if (object.websocket != null)
                message.websocket = Boolean(object.websocket);
            if (object.unionId != null)
                message.unionId = String(object.unionId);
            if (object.inviter != null)
                message.inviter = object.inviter | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdLogin
         * @static
         * @param {pb.CmdLogin} message CmdLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.type = options.enums === String ? "LoginType_NULL" : 0;
                object.pwd = "";
                object.from = options.enums === String ? "Ios_000" : 0;
                object.websocket = false;
                object.unionId = "";
                object.inviter = 0;
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.LoginType[message.type] : message.type;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            if (message.websocket != null && message.hasOwnProperty("websocket"))
                object.websocket = message.websocket;
            if (message.unionId != null && message.hasOwnProperty("unionId"))
                object.unionId = message.unionId;
            if (message.inviter != null && message.hasOwnProperty("inviter"))
                object.inviter = message.inviter;
            return object;
        };

        /**
         * Converts this CmdLogin to JSON.
         * @function toJSON
         * @memberof pb.CmdLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdLogin;
    })();

    pb.CmdLoginReply = (function () {

        /**
         * Properties of a CmdLoginReply.
         * @memberof pb
         * @interface ICmdLoginReply
         * @property {pb.IErrorInfo|null} [err] CmdLoginReply err
         * @property {number|null} [uid] CmdLoginReply uid
         * @property {string|null} [token] CmdLoginReply token
         * @property {string|null} [gameAddr] CmdLoginReply gameAddr
         */

        /**
         * Constructs a new CmdLoginReply.
         * @memberof pb
         * @classdesc Represents a CmdLoginReply.
         * @implements ICmdLoginReply
         * @constructor
         * @param {pb.ICmdLoginReply=} [properties] Properties to set
         */
        function CmdLoginReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdLoginReply err.
         * @member {pb.IErrorInfo|null|undefined} err
         * @memberof pb.CmdLoginReply
         * @instance
         */
        CmdLoginReply.prototype.err = null;

        /**
         * CmdLoginReply uid.
         * @member {number} uid
         * @memberof pb.CmdLoginReply
         * @instance
         */
        CmdLoginReply.prototype.uid = 0;

        /**
         * CmdLoginReply token.
         * @member {string} token
         * @memberof pb.CmdLoginReply
         * @instance
         */
        CmdLoginReply.prototype.token = "";

        /**
         * CmdLoginReply gameAddr.
         * @member {string} gameAddr
         * @memberof pb.CmdLoginReply
         * @instance
         */
        CmdLoginReply.prototype.gameAddr = "";

        /**
         * Creates a new CmdLoginReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdLoginReply
         * @static
         * @param {pb.ICmdLoginReply=} [properties] Properties to set
         * @returns {pb.CmdLoginReply} CmdLoginReply instance
         */
        CmdLoginReply.create = function create(properties) {
            return new CmdLoginReply(properties);
        };

        /**
         * Encodes the specified CmdLoginReply message. Does not implicitly {@link pb.CmdLoginReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdLoginReply
         * @static
         * @param {pb.ICmdLoginReply} message CmdLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdLoginReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.err != null && Object.hasOwnProperty.call(message, "err"))
                $root.pb.ErrorInfo.encode(message.err, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
            if (message.gameAddr != null && Object.hasOwnProperty.call(message, "gameAddr"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.gameAddr);
            return writer;
        };

        /**
         * Encodes the specified CmdLoginReply message, length delimited. Does not implicitly {@link pb.CmdLoginReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdLoginReply
         * @static
         * @param {pb.ICmdLoginReply} message CmdLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdLoginReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdLoginReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdLoginReply} CmdLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdLoginReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdLoginReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.err = $root.pb.ErrorInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.int32();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    case 4:
                        message.gameAddr = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdLoginReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdLoginReply} CmdLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdLoginReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdLoginReply message.
         * @function verify
         * @memberof pb.CmdLoginReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdLoginReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.err != null && message.hasOwnProperty("err")) {
                var error = $root.pb.ErrorInfo.verify(message.err);
                if (error)
                    return "err." + error;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.gameAddr != null && message.hasOwnProperty("gameAddr"))
                if (!$util.isString(message.gameAddr))
                    return "gameAddr: string expected";
            return null;
        };

        /**
         * Creates a CmdLoginReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdLoginReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdLoginReply} CmdLoginReply
         */
        CmdLoginReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdLoginReply)
                return object;
            var message = new $root.pb.CmdLoginReply();
            if (object.err != null) {
                if (typeof object.err !== "object")
                    throw TypeError(".pb.CmdLoginReply.err: object expected");
                message.err = $root.pb.ErrorInfo.fromObject(object.err);
            }
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.token != null)
                message.token = String(object.token);
            if (object.gameAddr != null)
                message.gameAddr = String(object.gameAddr);
            return message;
        };

        /**
         * Creates a plain object from a CmdLoginReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdLoginReply
         * @static
         * @param {pb.CmdLoginReply} message CmdLoginReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdLoginReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.err = null;
                object.uid = 0;
                object.token = "";
                object.gameAddr = "";
            }
            if (message.err != null && message.hasOwnProperty("err"))
                object.err = $root.pb.ErrorInfo.toObject(message.err, options);
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.gameAddr != null && message.hasOwnProperty("gameAddr"))
                object.gameAddr = message.gameAddr;
            return object;
        };

        /**
         * Converts this CmdLoginReply to JSON.
         * @function toJSON
         * @memberof pb.CmdLoginReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdLoginReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdLoginReply;
    })();

    pb.CmdGetCaptcha = (function () {

        /**
         * Properties of a CmdGetCaptcha.
         * @memberof pb
         * @interface ICmdGetCaptcha
         * @property {string|null} [account] CmdGetCaptcha account
         */

        /**
         * Constructs a new CmdGetCaptcha.
         * @memberof pb
         * @classdesc Represents a CmdGetCaptcha.
         * @implements ICmdGetCaptcha
         * @constructor
         * @param {pb.ICmdGetCaptcha=} [properties] Properties to set
         */
        function CmdGetCaptcha(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetCaptcha account.
         * @member {string} account
         * @memberof pb.CmdGetCaptcha
         * @instance
         */
        CmdGetCaptcha.prototype.account = "";

        /**
         * Creates a new CmdGetCaptcha instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {pb.ICmdGetCaptcha=} [properties] Properties to set
         * @returns {pb.CmdGetCaptcha} CmdGetCaptcha instance
         */
        CmdGetCaptcha.create = function create(properties) {
            return new CmdGetCaptcha(properties);
        };

        /**
         * Encodes the specified CmdGetCaptcha message. Does not implicitly {@link pb.CmdGetCaptcha.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {pb.ICmdGetCaptcha} message CmdGetCaptcha message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetCaptcha.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            return writer;
        };

        /**
         * Encodes the specified CmdGetCaptcha message, length delimited. Does not implicitly {@link pb.CmdGetCaptcha.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {pb.ICmdGetCaptcha} message CmdGetCaptcha message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetCaptcha.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetCaptcha message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetCaptcha} CmdGetCaptcha
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetCaptcha.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetCaptcha();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetCaptcha message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetCaptcha} CmdGetCaptcha
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetCaptcha.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetCaptcha message.
         * @function verify
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetCaptcha.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            return null;
        };

        /**
         * Creates a CmdGetCaptcha message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetCaptcha} CmdGetCaptcha
         */
        CmdGetCaptcha.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetCaptcha)
                return object;
            var message = new $root.pb.CmdGetCaptcha();
            if (object.account != null)
                message.account = String(object.account);
            return message;
        };

        /**
         * Creates a plain object from a CmdGetCaptcha message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetCaptcha
         * @static
         * @param {pb.CmdGetCaptcha} message CmdGetCaptcha
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetCaptcha.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.account = "";
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            return object;
        };

        /**
         * Converts this CmdGetCaptcha to JSON.
         * @function toJSON
         * @memberof pb.CmdGetCaptcha
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetCaptcha.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetCaptcha;
    })();

    pb.CmdGetCaptchaReply = (function () {

        /**
         * Properties of a CmdGetCaptchaReply.
         * @memberof pb
         * @interface ICmdGetCaptchaReply
         * @property {Uint8Array|null} [captcha] CmdGetCaptchaReply captcha
         */

        /**
         * Constructs a new CmdGetCaptchaReply.
         * @memberof pb
         * @classdesc Represents a CmdGetCaptchaReply.
         * @implements ICmdGetCaptchaReply
         * @constructor
         * @param {pb.ICmdGetCaptchaReply=} [properties] Properties to set
         */
        function CmdGetCaptchaReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetCaptchaReply captcha.
         * @member {Uint8Array} captcha
         * @memberof pb.CmdGetCaptchaReply
         * @instance
         */
        CmdGetCaptchaReply.prototype.captcha = $util.newBuffer([]);

        /**
         * Creates a new CmdGetCaptchaReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {pb.ICmdGetCaptchaReply=} [properties] Properties to set
         * @returns {pb.CmdGetCaptchaReply} CmdGetCaptchaReply instance
         */
        CmdGetCaptchaReply.create = function create(properties) {
            return new CmdGetCaptchaReply(properties);
        };

        /**
         * Encodes the specified CmdGetCaptchaReply message. Does not implicitly {@link pb.CmdGetCaptchaReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {pb.ICmdGetCaptchaReply} message CmdGetCaptchaReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetCaptchaReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.captcha != null && Object.hasOwnProperty.call(message, "captcha"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.captcha);
            return writer;
        };

        /**
         * Encodes the specified CmdGetCaptchaReply message, length delimited. Does not implicitly {@link pb.CmdGetCaptchaReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {pb.ICmdGetCaptchaReply} message CmdGetCaptchaReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetCaptchaReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetCaptchaReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetCaptchaReply} CmdGetCaptchaReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetCaptchaReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetCaptchaReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.captcha = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetCaptchaReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetCaptchaReply} CmdGetCaptchaReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetCaptchaReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetCaptchaReply message.
         * @function verify
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetCaptchaReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                if (!(message.captcha && typeof message.captcha.length === "number" || $util.isString(message.captcha)))
                    return "captcha: buffer expected";
            return null;
        };

        /**
         * Creates a CmdGetCaptchaReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetCaptchaReply} CmdGetCaptchaReply
         */
        CmdGetCaptchaReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetCaptchaReply)
                return object;
            var message = new $root.pb.CmdGetCaptchaReply();
            if (object.captcha != null)
                if (typeof object.captcha === "string")
                    $util.base64.decode(object.captcha, message.captcha = $util.newBuffer($util.base64.length(object.captcha)), 0);
                else if (object.captcha.length)
                    message.captcha = object.captcha;
            return message;
        };

        /**
         * Creates a plain object from a CmdGetCaptchaReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetCaptchaReply
         * @static
         * @param {pb.CmdGetCaptchaReply} message CmdGetCaptchaReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetCaptchaReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.captcha = "";
                else {
                    object.captcha = [];
                    if (options.bytes !== Array)
                        object.captcha = $util.newBuffer(object.captcha);
                }
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                object.captcha = options.bytes === String ? $util.base64.encode(message.captcha, 0, message.captcha.length) : options.bytes === Array ? Array.prototype.slice.call(message.captcha) : message.captcha;
            return object;
        };

        /**
         * Converts this CmdGetCaptchaReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGetCaptchaReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetCaptchaReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetCaptchaReply;
    })();

    pb.CmdGetSms = (function () {

        /**
         * Properties of a CmdGetSms.
         * @memberof pb
         * @interface ICmdGetSms
         * @property {string|null} [account] CmdGetSms account
         * @property {string|null} [captcha] CmdGetSms captcha
         */

        /**
         * Constructs a new CmdGetSms.
         * @memberof pb
         * @classdesc Represents a CmdGetSms.
         * @implements ICmdGetSms
         * @constructor
         * @param {pb.ICmdGetSms=} [properties] Properties to set
         */
        function CmdGetSms(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGetSms account.
         * @member {string} account
         * @memberof pb.CmdGetSms
         * @instance
         */
        CmdGetSms.prototype.account = "";

        /**
         * CmdGetSms captcha.
         * @member {string} captcha
         * @memberof pb.CmdGetSms
         * @instance
         */
        CmdGetSms.prototype.captcha = "";

        /**
         * Creates a new CmdGetSms instance using the specified properties.
         * @function create
         * @memberof pb.CmdGetSms
         * @static
         * @param {pb.ICmdGetSms=} [properties] Properties to set
         * @returns {pb.CmdGetSms} CmdGetSms instance
         */
        CmdGetSms.create = function create(properties) {
            return new CmdGetSms(properties);
        };

        /**
         * Encodes the specified CmdGetSms message. Does not implicitly {@link pb.CmdGetSms.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGetSms
         * @static
         * @param {pb.ICmdGetSms} message CmdGetSms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetSms.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.captcha != null && Object.hasOwnProperty.call(message, "captcha"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.captcha);
            return writer;
        };

        /**
         * Encodes the specified CmdGetSms message, length delimited. Does not implicitly {@link pb.CmdGetSms.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGetSms
         * @static
         * @param {pb.ICmdGetSms} message CmdGetSms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGetSms.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGetSms message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGetSms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGetSms} CmdGetSms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetSms.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGetSms();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    case 2:
                        message.captcha = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGetSms message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGetSms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGetSms} CmdGetSms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGetSms.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGetSms message.
         * @function verify
         * @memberof pb.CmdGetSms
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGetSms.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                if (!$util.isString(message.captcha))
                    return "captcha: string expected";
            return null;
        };

        /**
         * Creates a CmdGetSms message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGetSms
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGetSms} CmdGetSms
         */
        CmdGetSms.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGetSms)
                return object;
            var message = new $root.pb.CmdGetSms();
            if (object.account != null)
                message.account = String(object.account);
            if (object.captcha != null)
                message.captcha = String(object.captcha);
            return message;
        };

        /**
         * Creates a plain object from a CmdGetSms message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGetSms
         * @static
         * @param {pb.CmdGetSms} message CmdGetSms
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGetSms.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.captcha = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                object.captcha = message.captcha;
            return object;
        };

        /**
         * Converts this CmdGetSms to JSON.
         * @function toJSON
         * @memberof pb.CmdGetSms
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGetSms.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGetSms;
    })();

    pb.CmdResetPwd = (function () {

        /**
         * Properties of a CmdResetPwd.
         * @memberof pb
         * @interface ICmdResetPwd
         * @property {string|null} [account] CmdResetPwd account
         * @property {string|null} [pwd] CmdResetPwd pwd
         * @property {string|null} [captcha] CmdResetPwd captcha
         */

        /**
         * Constructs a new CmdResetPwd.
         * @memberof pb
         * @classdesc Represents a CmdResetPwd.
         * @implements ICmdResetPwd
         * @constructor
         * @param {pb.ICmdResetPwd=} [properties] Properties to set
         */
        function CmdResetPwd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdResetPwd account.
         * @member {string} account
         * @memberof pb.CmdResetPwd
         * @instance
         */
        CmdResetPwd.prototype.account = "";

        /**
         * CmdResetPwd pwd.
         * @member {string} pwd
         * @memberof pb.CmdResetPwd
         * @instance
         */
        CmdResetPwd.prototype.pwd = "";

        /**
         * CmdResetPwd captcha.
         * @member {string} captcha
         * @memberof pb.CmdResetPwd
         * @instance
         */
        CmdResetPwd.prototype.captcha = "";

        /**
         * Creates a new CmdResetPwd instance using the specified properties.
         * @function create
         * @memberof pb.CmdResetPwd
         * @static
         * @param {pb.ICmdResetPwd=} [properties] Properties to set
         * @returns {pb.CmdResetPwd} CmdResetPwd instance
         */
        CmdResetPwd.create = function create(properties) {
            return new CmdResetPwd(properties);
        };

        /**
         * Encodes the specified CmdResetPwd message. Does not implicitly {@link pb.CmdResetPwd.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdResetPwd
         * @static
         * @param {pb.ICmdResetPwd} message CmdResetPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdResetPwd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            if (message.pwd != null && Object.hasOwnProperty.call(message, "pwd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pwd);
            if (message.captcha != null && Object.hasOwnProperty.call(message, "captcha"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.captcha);
            return writer;
        };

        /**
         * Encodes the specified CmdResetPwd message, length delimited. Does not implicitly {@link pb.CmdResetPwd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdResetPwd
         * @static
         * @param {pb.ICmdResetPwd} message CmdResetPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdResetPwd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdResetPwd message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdResetPwd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdResetPwd} CmdResetPwd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdResetPwd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdResetPwd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    case 2:
                        message.pwd = reader.string();
                        break;
                    case 3:
                        message.captcha = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdResetPwd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdResetPwd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdResetPwd} CmdResetPwd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdResetPwd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdResetPwd message.
         * @function verify
         * @memberof pb.CmdResetPwd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdResetPwd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account != null && message.hasOwnProperty("account"))
                if (!$util.isString(message.account))
                    return "account: string expected";
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                if (!$util.isString(message.pwd))
                    return "pwd: string expected";
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                if (!$util.isString(message.captcha))
                    return "captcha: string expected";
            return null;
        };

        /**
         * Creates a CmdResetPwd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdResetPwd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdResetPwd} CmdResetPwd
         */
        CmdResetPwd.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdResetPwd)
                return object;
            var message = new $root.pb.CmdResetPwd();
            if (object.account != null)
                message.account = String(object.account);
            if (object.pwd != null)
                message.pwd = String(object.pwd);
            if (object.captcha != null)
                message.captcha = String(object.captcha);
            return message;
        };

        /**
         * Creates a plain object from a CmdResetPwd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdResetPwd
         * @static
         * @param {pb.CmdResetPwd} message CmdResetPwd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdResetPwd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account = "";
                object.pwd = "";
                object.captcha = "";
            }
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.pwd != null && message.hasOwnProperty("pwd"))
                object.pwd = message.pwd;
            if (message.captcha != null && message.hasOwnProperty("captcha"))
                object.captcha = message.captcha;
            return object;
        };

        /**
         * Converts this CmdResetPwd to JSON.
         * @function toJSON
         * @memberof pb.CmdResetPwd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdResetPwd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdResetPwd;
    })();

    pb.CmdPay = (function () {

        /**
         * Properties of a CmdPay.
         * @memberof pb
         * @interface ICmdPay
         * @property {number|null} [uid] CmdPay uid
         * @property {number|Long|null} [orderId] CmdPay orderId
         */

        /**
         * Constructs a new CmdPay.
         * @memberof pb
         * @classdesc Represents a CmdPay.
         * @implements ICmdPay
         * @constructor
         * @param {pb.ICmdPay=} [properties] Properties to set
         */
        function CmdPay(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdPay uid.
         * @member {number} uid
         * @memberof pb.CmdPay
         * @instance
         */
        CmdPay.prototype.uid = 0;

        /**
         * CmdPay orderId.
         * @member {number|Long} orderId
         * @memberof pb.CmdPay
         * @instance
         */
        CmdPay.prototype.orderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;

        /**
         * Creates a new CmdPay instance using the specified properties.
         * @function create
         * @memberof pb.CmdPay
         * @static
         * @param {pb.ICmdPay=} [properties] Properties to set
         * @returns {pb.CmdPay} CmdPay instance
         */
        CmdPay.create = function create(properties) {
            return new CmdPay(properties);
        };

        /**
         * Encodes the specified CmdPay message. Does not implicitly {@link pb.CmdPay.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdPay
         * @static
         * @param {pb.ICmdPay} message CmdPay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdPay.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.orderId != null && Object.hasOwnProperty.call(message, "orderId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified CmdPay message, length delimited. Does not implicitly {@link pb.CmdPay.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdPay
         * @static
         * @param {pb.ICmdPay} message CmdPay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdPay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdPay message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdPay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdPay} CmdPay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdPay.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdPay();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.orderId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdPay message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdPay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdPay} CmdPay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdPay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdPay message.
         * @function verify
         * @memberof pb.CmdPay
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdPay.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (!$util.isInteger(message.orderId) && !(message.orderId && $util.isInteger(message.orderId.low) && $util.isInteger(message.orderId.high)))
                    return "orderId: integer|Long expected";
            return null;
        };

        /**
         * Creates a CmdPay message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdPay
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdPay} CmdPay
         */
        CmdPay.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdPay)
                return object;
            var message = new $root.pb.CmdPay();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.orderId != null)
                if ($util.Long)
                    (message.orderId = $util.Long.fromValue(object.orderId)).unsigned = false;
                else if (typeof object.orderId === "string")
                    message.orderId = parseInt(object.orderId, 10);
                else if (typeof object.orderId === "number")
                    message.orderId = object.orderId;
                else if (typeof object.orderId === "object")
                    message.orderId = new $util.LongBits(object.orderId.low >>> 0, object.orderId.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a CmdPay message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdPay
         * @static
         * @param {pb.CmdPay} message CmdPay
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdPay.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.orderId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.orderId = options.longs === String ? "0" : 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.orderId != null && message.hasOwnProperty("orderId"))
                if (typeof message.orderId === "number")
                    object.orderId = options.longs === String ? String(message.orderId) : message.orderId;
                else
                    object.orderId = options.longs === String ? $util.Long.prototype.toString.call(message.orderId) : options.longs === Number ? new $util.LongBits(message.orderId.low >>> 0, message.orderId.high >>> 0).toNumber() : message.orderId;
            return object;
        };

        /**
         * Converts this CmdPay to JSON.
         * @function toJSON
         * @memberof pb.CmdPay
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdPay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdPay;
    })();

    pb.LoginService = (function () {

        /**
         * Constructs a new LoginService service.
         * @memberof pb
         * @classdesc Represents a LoginService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function LoginService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (LoginService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LoginService;

        /**
         * Creates new LoginService service using the specified rpc implementation.
         * @function create
         * @memberof pb.LoginService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {LoginService} RPC service. Useful where requests and/or responses are streamed.
         */
        LoginService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link pb.LoginService#registry}.
         * @memberof pb.LoginService
         * @typedef RegistryCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls Registry.
         * @function registry
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdRegistry} request CmdRegistry message or plain object
         * @param {pb.LoginService.RegistryCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(LoginService.prototype.registry = function registry(request, callback) {
            return this.rpcCall(registry, $root.pb.CmdRegistry, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "Registry" });

        /**
         * Calls Registry.
         * @function registry
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdRegistry} request CmdRegistry message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.LoginService#login}.
         * @memberof pb.LoginService
         * @typedef LoginCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdLoginReply} [response] CmdLoginReply
         */

        /**
         * Calls Login.
         * @function login
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdLogin} request CmdLogin message or plain object
         * @param {pb.LoginService.LoginCallback} callback Node-style callback called with the error, if any, and CmdLoginReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(LoginService.prototype.login = function login(request, callback) {
            return this.rpcCall(login, $root.pb.CmdLogin, $root.pb.CmdLoginReply, request, callback);
        }, "name", { value: "Login" });

        /**
         * Calls Login.
         * @function login
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdLogin} request CmdLogin message or plain object
         * @returns {Promise<pb.CmdLoginReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.LoginService#getCaptcha}.
         * @memberof pb.LoginService
         * @typedef GetCaptchaCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdGetCaptchaReply} [response] CmdGetCaptchaReply
         */

        /**
         * Calls GetCaptcha.
         * @function getCaptcha
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdGetCaptcha} request CmdGetCaptcha message or plain object
         * @param {pb.LoginService.GetCaptchaCallback} callback Node-style callback called with the error, if any, and CmdGetCaptchaReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(LoginService.prototype.getCaptcha = function getCaptcha(request, callback) {
            return this.rpcCall(getCaptcha, $root.pb.CmdGetCaptcha, $root.pb.CmdGetCaptchaReply, request, callback);
        }, "name", { value: "GetCaptcha" });

        /**
         * Calls GetCaptcha.
         * @function getCaptcha
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdGetCaptcha} request CmdGetCaptcha message or plain object
         * @returns {Promise<pb.CmdGetCaptchaReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.LoginService#getSms}.
         * @memberof pb.LoginService
         * @typedef GetSmsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls GetSms.
         * @function getSms
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdGetSms} request CmdGetSms message or plain object
         * @param {pb.LoginService.GetSmsCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(LoginService.prototype.getSms = function getSms(request, callback) {
            return this.rpcCall(getSms, $root.pb.CmdGetSms, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "GetSms" });

        /**
         * Calls GetSms.
         * @function getSms
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdGetSms} request CmdGetSms message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.LoginService#resetPwd}.
         * @memberof pb.LoginService
         * @typedef ResetPwdCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls ResetPwd.
         * @function resetPwd
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdResetPwd} request CmdResetPwd message or plain object
         * @param {pb.LoginService.ResetPwdCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(LoginService.prototype.resetPwd = function resetPwd(request, callback) {
            return this.rpcCall(resetPwd, $root.pb.CmdResetPwd, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "ResetPwd" });

        /**
         * Calls ResetPwd.
         * @function resetPwd
         * @memberof pb.LoginService
         * @instance
         * @param {pb.ICmdResetPwd} request CmdResetPwd message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        return LoginService;
    })();

    /**
     * SyncAct enum.
     * @name pb.SyncAct
     * @enum {number}
     * @property {number} SyncAct_NULL=0 SyncAct_NULL value
     * @property {number} Set=1 Set value
     * @property {number} Del=2 Del value
     */
    pb.SyncAct = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SyncAct_NULL"] = 0;
        values[valuesById[1] = "Set"] = 1;
        values[valuesById[2] = "Del"] = 2;
        return values;
    })();

    /**
     * ServerCmdId enum.
     * @name pb.ServerCmdId
     * @enum {number}
     * @property {number} ServerCmdId_NULL=0 ServerCmdId_NULL value
     * @property {number} ReloadGameConf=1 ReloadGameConf value
     */
    pb.ServerCmdId = (function () {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ServerCmdId_NULL"] = 0;
        values[valuesById[1] = "ReloadGameConf"] = 1;
        return values;
    })();

    pb.CmdNewUidReply = (function () {

        /**
         * Properties of a CmdNewUidReply.
         * @memberof pb
         * @interface ICmdNewUidReply
         * @property {number|null} [uid] CmdNewUidReply uid
         */

        /**
         * Constructs a new CmdNewUidReply.
         * @memberof pb
         * @classdesc Represents a CmdNewUidReply.
         * @implements ICmdNewUidReply
         * @constructor
         * @param {pb.ICmdNewUidReply=} [properties] Properties to set
         */
        function CmdNewUidReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdNewUidReply uid.
         * @member {number} uid
         * @memberof pb.CmdNewUidReply
         * @instance
         */
        CmdNewUidReply.prototype.uid = 0;

        /**
         * Creates a new CmdNewUidReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {pb.ICmdNewUidReply=} [properties] Properties to set
         * @returns {pb.CmdNewUidReply} CmdNewUidReply instance
         */
        CmdNewUidReply.create = function create(properties) {
            return new CmdNewUidReply(properties);
        };

        /**
         * Encodes the specified CmdNewUidReply message. Does not implicitly {@link pb.CmdNewUidReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {pb.ICmdNewUidReply} message CmdNewUidReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdNewUidReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdNewUidReply message, length delimited. Does not implicitly {@link pb.CmdNewUidReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {pb.ICmdNewUidReply} message CmdNewUidReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdNewUidReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdNewUidReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdNewUidReply} CmdNewUidReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdNewUidReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdNewUidReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdNewUidReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdNewUidReply} CmdNewUidReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdNewUidReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdNewUidReply message.
         * @function verify
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdNewUidReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdNewUidReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdNewUidReply} CmdNewUidReply
         */
        CmdNewUidReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdNewUidReply)
                return object;
            var message = new $root.pb.CmdNewUidReply();
            if (object.uid != null)
                message.uid = object.uid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdNewUidReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdNewUidReply
         * @static
         * @param {pb.CmdNewUidReply} message CmdNewUidReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdNewUidReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdNewUidReply to JSON.
         * @function toJSON
         * @memberof pb.CmdNewUidReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdNewUidReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdNewUidReply;
    })();

    pb.CmdNewRoomIdReply = (function () {

        /**
         * Properties of a CmdNewRoomIdReply.
         * @memberof pb
         * @interface ICmdNewRoomIdReply
         * @property {number|null} [id] CmdNewRoomIdReply id
         */

        /**
         * Constructs a new CmdNewRoomIdReply.
         * @memberof pb
         * @classdesc Represents a CmdNewRoomIdReply.
         * @implements ICmdNewRoomIdReply
         * @constructor
         * @param {pb.ICmdNewRoomIdReply=} [properties] Properties to set
         */
        function CmdNewRoomIdReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdNewRoomIdReply id.
         * @member {number} id
         * @memberof pb.CmdNewRoomIdReply
         * @instance
         */
        CmdNewRoomIdReply.prototype.id = 0;

        /**
         * Creates a new CmdNewRoomIdReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {pb.ICmdNewRoomIdReply=} [properties] Properties to set
         * @returns {pb.CmdNewRoomIdReply} CmdNewRoomIdReply instance
         */
        CmdNewRoomIdReply.create = function create(properties) {
            return new CmdNewRoomIdReply(properties);
        };

        /**
         * Encodes the specified CmdNewRoomIdReply message. Does not implicitly {@link pb.CmdNewRoomIdReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {pb.ICmdNewRoomIdReply} message CmdNewRoomIdReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdNewRoomIdReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified CmdNewRoomIdReply message, length delimited. Does not implicitly {@link pb.CmdNewRoomIdReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {pb.ICmdNewRoomIdReply} message CmdNewRoomIdReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdNewRoomIdReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdNewRoomIdReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdNewRoomIdReply} CmdNewRoomIdReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdNewRoomIdReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdNewRoomIdReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdNewRoomIdReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdNewRoomIdReply} CmdNewRoomIdReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdNewRoomIdReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdNewRoomIdReply message.
         * @function verify
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdNewRoomIdReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a CmdNewRoomIdReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdNewRoomIdReply} CmdNewRoomIdReply
         */
        CmdNewRoomIdReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdNewRoomIdReply)
                return object;
            var message = new $root.pb.CmdNewRoomIdReply();
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdNewRoomIdReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdNewRoomIdReply
         * @static
         * @param {pb.CmdNewRoomIdReply} message CmdNewRoomIdReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdNewRoomIdReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this CmdNewRoomIdReply to JSON.
         * @function toJSON
         * @memberof pb.CmdNewRoomIdReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdNewRoomIdReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdNewRoomIdReply;
    })();

    pb.CmdGateAddr = (function () {

        /**
         * Properties of a CmdGateAddr.
         * @memberof pb
         * @interface ICmdGateAddr
         * @property {number|null} [uid] CmdGateAddr uid
         */

        /**
         * Constructs a new CmdGateAddr.
         * @memberof pb
         * @classdesc Represents a CmdGateAddr.
         * @implements ICmdGateAddr
         * @constructor
         * @param {pb.ICmdGateAddr=} [properties] Properties to set
         */
        function CmdGateAddr(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGateAddr uid.
         * @member {number} uid
         * @memberof pb.CmdGateAddr
         * @instance
         */
        CmdGateAddr.prototype.uid = 0;

        /**
         * Creates a new CmdGateAddr instance using the specified properties.
         * @function create
         * @memberof pb.CmdGateAddr
         * @static
         * @param {pb.ICmdGateAddr=} [properties] Properties to set
         * @returns {pb.CmdGateAddr} CmdGateAddr instance
         */
        CmdGateAddr.create = function create(properties) {
            return new CmdGateAddr(properties);
        };

        /**
         * Encodes the specified CmdGateAddr message. Does not implicitly {@link pb.CmdGateAddr.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGateAddr
         * @static
         * @param {pb.ICmdGateAddr} message CmdGateAddr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGateAddr.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdGateAddr message, length delimited. Does not implicitly {@link pb.CmdGateAddr.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGateAddr
         * @static
         * @param {pb.ICmdGateAddr} message CmdGateAddr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGateAddr.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGateAddr message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGateAddr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGateAddr} CmdGateAddr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGateAddr.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGateAddr();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGateAddr message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGateAddr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGateAddr} CmdGateAddr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGateAddr.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGateAddr message.
         * @function verify
         * @memberof pb.CmdGateAddr
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGateAddr.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdGateAddr message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGateAddr
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGateAddr} CmdGateAddr
         */
        CmdGateAddr.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGateAddr)
                return object;
            var message = new $root.pb.CmdGateAddr();
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdGateAddr message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGateAddr
         * @static
         * @param {pb.CmdGateAddr} message CmdGateAddr
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGateAddr.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdGateAddr to JSON.
         * @function toJSON
         * @memberof pb.CmdGateAddr
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGateAddr.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGateAddr;
    })();

    pb.CmdGateAddrReply = (function () {

        /**
         * Properties of a CmdGateAddrReply.
         * @memberof pb
         * @interface ICmdGateAddrReply
         * @property {number|null} [uid] CmdGateAddrReply uid
         * @property {string|null} [addr] CmdGateAddrReply addr
         */

        /**
         * Constructs a new CmdGateAddrReply.
         * @memberof pb
         * @classdesc Represents a CmdGateAddrReply.
         * @implements ICmdGateAddrReply
         * @constructor
         * @param {pb.ICmdGateAddrReply=} [properties] Properties to set
         */
        function CmdGateAddrReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGateAddrReply uid.
         * @member {number} uid
         * @memberof pb.CmdGateAddrReply
         * @instance
         */
        CmdGateAddrReply.prototype.uid = 0;

        /**
         * CmdGateAddrReply addr.
         * @member {string} addr
         * @memberof pb.CmdGateAddrReply
         * @instance
         */
        CmdGateAddrReply.prototype.addr = "";

        /**
         * Creates a new CmdGateAddrReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {pb.ICmdGateAddrReply=} [properties] Properties to set
         * @returns {pb.CmdGateAddrReply} CmdGateAddrReply instance
         */
        CmdGateAddrReply.create = function create(properties) {
            return new CmdGateAddrReply(properties);
        };

        /**
         * Encodes the specified CmdGateAddrReply message. Does not implicitly {@link pb.CmdGateAddrReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {pb.ICmdGateAddrReply} message CmdGateAddrReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGateAddrReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.addr != null && Object.hasOwnProperty.call(message, "addr"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.addr);
            return writer;
        };

        /**
         * Encodes the specified CmdGateAddrReply message, length delimited. Does not implicitly {@link pb.CmdGateAddrReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {pb.ICmdGateAddrReply} message CmdGateAddrReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGateAddrReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGateAddrReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGateAddrReply} CmdGateAddrReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGateAddrReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGateAddrReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.addr = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGateAddrReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGateAddrReply} CmdGateAddrReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGateAddrReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGateAddrReply message.
         * @function verify
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGateAddrReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.addr != null && message.hasOwnProperty("addr"))
                if (!$util.isString(message.addr))
                    return "addr: string expected";
            return null;
        };

        /**
         * Creates a CmdGateAddrReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGateAddrReply} CmdGateAddrReply
         */
        CmdGateAddrReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGateAddrReply)
                return object;
            var message = new $root.pb.CmdGateAddrReply();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.addr != null)
                message.addr = String(object.addr);
            return message;
        };

        /**
         * Creates a plain object from a CmdGateAddrReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGateAddrReply
         * @static
         * @param {pb.CmdGateAddrReply} message CmdGateAddrReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGateAddrReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.addr = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.addr != null && message.hasOwnProperty("addr"))
                object.addr = message.addr;
            return object;
        };

        /**
         * Converts this CmdGateAddrReply to JSON.
         * @function toJSON
         * @memberof pb.CmdGateAddrReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGateAddrReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGateAddrReply;
    })();

    pb.CmdUserLogin = (function () {

        /**
         * Properties of a CmdUserLogin.
         * @memberof pb
         * @interface ICmdUserLogin
         * @property {number|null} [uid] CmdUserLogin uid
         * @property {pb.LoginType|null} [type] CmdUserLogin type
         * @property {pb.AppFrom|null} [from] CmdUserLogin from
         * @property {string|null} [ip] CmdUserLogin ip
         */

        /**
         * Constructs a new CmdUserLogin.
         * @memberof pb
         * @classdesc Represents a CmdUserLogin.
         * @implements ICmdUserLogin
         * @constructor
         * @param {pb.ICmdUserLogin=} [properties] Properties to set
         */
        function CmdUserLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserLogin uid.
         * @member {number} uid
         * @memberof pb.CmdUserLogin
         * @instance
         */
        CmdUserLogin.prototype.uid = 0;

        /**
         * CmdUserLogin type.
         * @member {pb.LoginType} type
         * @memberof pb.CmdUserLogin
         * @instance
         */
        CmdUserLogin.prototype.type = 0;

        /**
         * CmdUserLogin from.
         * @member {pb.AppFrom} from
         * @memberof pb.CmdUserLogin
         * @instance
         */
        CmdUserLogin.prototype.from = 0;

        /**
         * CmdUserLogin ip.
         * @member {string} ip
         * @memberof pb.CmdUserLogin
         * @instance
         */
        CmdUserLogin.prototype.ip = "";

        /**
         * Creates a new CmdUserLogin instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserLogin
         * @static
         * @param {pb.ICmdUserLogin=} [properties] Properties to set
         * @returns {pb.CmdUserLogin} CmdUserLogin instance
         */
        CmdUserLogin.create = function create(properties) {
            return new CmdUserLogin(properties);
        };

        /**
         * Encodes the specified CmdUserLogin message. Does not implicitly {@link pb.CmdUserLogin.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserLogin
         * @static
         * @param {pb.ICmdUserLogin} message CmdUserLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.from);
            if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.ip);
            return writer;
        };

        /**
         * Encodes the specified CmdUserLogin message, length delimited. Does not implicitly {@link pb.CmdUserLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserLogin
         * @static
         * @param {pb.ICmdUserLogin} message CmdUserLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserLogin message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserLogin} CmdUserLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.from = reader.int32();
                        break;
                    case 4:
                        message.ip = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserLogin} CmdUserLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserLogin message.
         * @function verify
         * @memberof pb.CmdUserLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 98:
                    case 99:
                        break;
                }
            if (message.from != null && message.hasOwnProperty("from"))
                switch (message.from) {
                    default:
                        return "from: enum value expected";
                    case 0:
                    case 1:
                    case 201:
                    case 204:
                    case 205:
                    case 206:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 301:
                    case 302:
                    case 601:
                    case 1000:
                    case 1204:
                    case 1205:
                    case 1208:
                    case 1212:
                    case 4999:
                    case 6666:
                    case 6667:
                    case 6668:
                    case 8888:
                    case 9999:
                    case 10000:
                        break;
                }
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            return null;
        };

        /**
         * Creates a CmdUserLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserLogin} CmdUserLogin
         */
        CmdUserLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserLogin)
                return object;
            var message = new $root.pb.CmdUserLogin();
            if (object.uid != null)
                message.uid = object.uid | 0;
            switch (object.type) {
                case "LoginType_NULL":
                case 0:
                    message.type = 0;
                    break;
                case "MobilePhoneId":
                case 1:
                    message.type = 1;
                    break;
                case "WeChat":
                case 2:
                    message.type = 2;
                    break;
                case "QQ":
                case 3:
                    message.type = 3;
                    break;
                case "WeChat_MiniProg":
                case 4:
                    message.type = 4;
                    break;
                case "AppTest":
                case 98:
                    message.type = 98;
                    break;
                case "WebTest":
                case 99:
                    message.type = 99;
                    break;
            }
            switch (object.from) {
                case "Ios_000":
                case 0:
                    message.from = 0;
                    break;
                case "Android_001":
                case 1:
                    message.from = 1;
                    break;
                case "Android_201":
                case 201:
                    message.from = 201;
                    break;
                case "Android_204":
                case 204:
                    message.from = 204;
                    break;
                case "Android_205":
                case 205:
                    message.from = 205;
                    break;
                case "Android_206":
                case 206:
                    message.from = 206;
                    break;
                case "Android_208":
                case 208:
                    message.from = 208;
                    break;
                case "Android_209":
                case 209:
                    message.from = 209;
                    break;
                case "Android_210":
                case 210:
                    message.from = 210;
                    break;
                case "Android_211":
                case 211:
                    message.from = 211;
                    break;
                case "Android_212":
                case 212:
                    message.from = 212;
                    break;
                case "Android_301":
                case 301:
                    message.from = 301;
                    break;
                case "Android_302":
                case 302:
                    message.from = 302;
                    break;
                case "Android_601":
                case 601:
                    message.from = 601;
                    break;
                case "Android_1000":
                case 1000:
                    message.from = 1000;
                    break;
                case "Android_1204":
                case 1204:
                    message.from = 1204;
                    break;
                case "Android_1205":
                case 1205:
                    message.from = 1205;
                    break;
                case "Android_1208":
                case 1208:
                    message.from = 1208;
                    break;
                case "Android_1212":
                case 1212:
                    message.from = 1212;
                    break;
                case "WebsiteAndriod":
                case 4999:
                    message.from = 4999;
                    break;
                case "WebsiteIos":
                case 6666:
                    message.from = 6666;
                    break;
                case "IosAppleStore":
                case 6667:
                    message.from = 6667;
                    break;
                case "Ipad":
                case 6668:
                    message.from = 6668;
                    break;
                case "WeChatMinProgram":
                case 8888:
                    message.from = 8888;
                    break;
                case "Website3th":
                case 9999:
                    message.from = 9999;
                    break;
                case "Test":
                case 10000:
                    message.from = 10000;
                    break;
            }
            if (object.ip != null)
                message.ip = String(object.ip);
            return message;
        };

        /**
         * Creates a plain object from a CmdUserLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserLogin
         * @static
         * @param {pb.CmdUserLogin} message CmdUserLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.type = options.enums === String ? "LoginType_NULL" : 0;
                object.from = options.enums === String ? "Ios_000" : 0;
                object.ip = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.pb.LoginType[message.type] : message.type;
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = options.enums === String ? $root.pb.AppFrom[message.from] : message.from;
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            return object;
        };

        /**
         * Converts this CmdUserLogin to JSON.
         * @function toJSON
         * @memberof pb.CmdUserLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserLogin;
    })();

    pb.CmdUserLoginReply = (function () {

        /**
         * Properties of a CmdUserLoginReply.
         * @memberof pb
         * @interface ICmdUserLoginReply
         * @property {number|null} [uid] CmdUserLoginReply uid
         * @property {string|null} [token] CmdUserLoginReply token
         * @property {string|null} [addr] CmdUserLoginReply addr
         */

        /**
         * Constructs a new CmdUserLoginReply.
         * @memberof pb
         * @classdesc Represents a CmdUserLoginReply.
         * @implements ICmdUserLoginReply
         * @constructor
         * @param {pb.ICmdUserLoginReply=} [properties] Properties to set
         */
        function CmdUserLoginReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserLoginReply uid.
         * @member {number} uid
         * @memberof pb.CmdUserLoginReply
         * @instance
         */
        CmdUserLoginReply.prototype.uid = 0;

        /**
         * CmdUserLoginReply token.
         * @member {string} token
         * @memberof pb.CmdUserLoginReply
         * @instance
         */
        CmdUserLoginReply.prototype.token = "";

        /**
         * CmdUserLoginReply addr.
         * @member {string} addr
         * @memberof pb.CmdUserLoginReply
         * @instance
         */
        CmdUserLoginReply.prototype.addr = "";

        /**
         * Creates a new CmdUserLoginReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {pb.ICmdUserLoginReply=} [properties] Properties to set
         * @returns {pb.CmdUserLoginReply} CmdUserLoginReply instance
         */
        CmdUserLoginReply.create = function create(properties) {
            return new CmdUserLoginReply(properties);
        };

        /**
         * Encodes the specified CmdUserLoginReply message. Does not implicitly {@link pb.CmdUserLoginReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {pb.ICmdUserLoginReply} message CmdUserLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserLoginReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            if (message.addr != null && Object.hasOwnProperty.call(message, "addr"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
            return writer;
        };

        /**
         * Encodes the specified CmdUserLoginReply message, length delimited. Does not implicitly {@link pb.CmdUserLoginReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {pb.ICmdUserLoginReply} message CmdUserLoginReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserLoginReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserLoginReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserLoginReply} CmdUserLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserLoginReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserLoginReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.token = reader.string();
                        break;
                    case 3:
                        message.addr = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserLoginReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserLoginReply} CmdUserLoginReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserLoginReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserLoginReply message.
         * @function verify
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserLoginReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isString(message.token))
                    return "token: string expected";
            if (message.addr != null && message.hasOwnProperty("addr"))
                if (!$util.isString(message.addr))
                    return "addr: string expected";
            return null;
        };

        /**
         * Creates a CmdUserLoginReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserLoginReply} CmdUserLoginReply
         */
        CmdUserLoginReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserLoginReply)
                return object;
            var message = new $root.pb.CmdUserLoginReply();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.token != null)
                message.token = String(object.token);
            if (object.addr != null)
                message.addr = String(object.addr);
            return message;
        };

        /**
         * Creates a plain object from a CmdUserLoginReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserLoginReply
         * @static
         * @param {pb.CmdUserLoginReply} message CmdUserLoginReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserLoginReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.token = "";
                object.addr = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.addr != null && message.hasOwnProperty("addr"))
                object.addr = message.addr;
            return object;
        };

        /**
         * Converts this CmdUserLoginReply to JSON.
         * @function toJSON
         * @memberof pb.CmdUserLoginReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserLoginReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserLoginReply;
    })();

    pb.CmdUserGameLogin = (function () {

        /**
         * Properties of a CmdUserGameLogin.
         * @memberof pb
         * @interface ICmdUserGameLogin
         * @property {number|null} [uid] CmdUserGameLogin uid
         * @property {number|null} [nodeId] CmdUserGameLogin nodeId
         */

        /**
         * Constructs a new CmdUserGameLogin.
         * @memberof pb
         * @classdesc Represents a CmdUserGameLogin.
         * @implements ICmdUserGameLogin
         * @constructor
         * @param {pb.ICmdUserGameLogin=} [properties] Properties to set
         */
        function CmdUserGameLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserGameLogin uid.
         * @member {number} uid
         * @memberof pb.CmdUserGameLogin
         * @instance
         */
        CmdUserGameLogin.prototype.uid = 0;

        /**
         * CmdUserGameLogin nodeId.
         * @member {number} nodeId
         * @memberof pb.CmdUserGameLogin
         * @instance
         */
        CmdUserGameLogin.prototype.nodeId = 0;

        /**
         * Creates a new CmdUserGameLogin instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {pb.ICmdUserGameLogin=} [properties] Properties to set
         * @returns {pb.CmdUserGameLogin} CmdUserGameLogin instance
         */
        CmdUserGameLogin.create = function create(properties) {
            return new CmdUserGameLogin(properties);
        };

        /**
         * Encodes the specified CmdUserGameLogin message. Does not implicitly {@link pb.CmdUserGameLogin.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {pb.ICmdUserGameLogin} message CmdUserGameLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.nodeId != null && Object.hasOwnProperty.call(message, "nodeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nodeId);
            return writer;
        };

        /**
         * Encodes the specified CmdUserGameLogin message, length delimited. Does not implicitly {@link pb.CmdUserGameLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {pb.ICmdUserGameLogin} message CmdUserGameLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserGameLogin message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserGameLogin} CmdUserGameLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserGameLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.nodeId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserGameLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserGameLogin} CmdUserGameLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserGameLogin message.
         * @function verify
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserGameLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                if (!$util.isInteger(message.nodeId))
                    return "nodeId: integer expected";
            return null;
        };

        /**
         * Creates a CmdUserGameLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserGameLogin} CmdUserGameLogin
         */
        CmdUserGameLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserGameLogin)
                return object;
            var message = new $root.pb.CmdUserGameLogin();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.nodeId != null)
                message.nodeId = object.nodeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdUserGameLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserGameLogin
         * @static
         * @param {pb.CmdUserGameLogin} message CmdUserGameLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserGameLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.nodeId = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                object.nodeId = message.nodeId;
            return object;
        };

        /**
         * Converts this CmdUserGameLogin to JSON.
         * @function toJSON
         * @memberof pb.CmdUserGameLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserGameLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserGameLogin;
    })();

    pb.CmdUserGameLogout = (function () {

        /**
         * Properties of a CmdUserGameLogout.
         * @memberof pb
         * @interface ICmdUserGameLogout
         * @property {number|null} [uid] CmdUserGameLogout uid
         */

        /**
         * Constructs a new CmdUserGameLogout.
         * @memberof pb
         * @classdesc Represents a CmdUserGameLogout.
         * @implements ICmdUserGameLogout
         * @constructor
         * @param {pb.ICmdUserGameLogout=} [properties] Properties to set
         */
        function CmdUserGameLogout(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserGameLogout uid.
         * @member {number} uid
         * @memberof pb.CmdUserGameLogout
         * @instance
         */
        CmdUserGameLogout.prototype.uid = 0;

        /**
         * Creates a new CmdUserGameLogout instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {pb.ICmdUserGameLogout=} [properties] Properties to set
         * @returns {pb.CmdUserGameLogout} CmdUserGameLogout instance
         */
        CmdUserGameLogout.create = function create(properties) {
            return new CmdUserGameLogout(properties);
        };

        /**
         * Encodes the specified CmdUserGameLogout message. Does not implicitly {@link pb.CmdUserGameLogout.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {pb.ICmdUserGameLogout} message CmdUserGameLogout message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameLogout.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdUserGameLogout message, length delimited. Does not implicitly {@link pb.CmdUserGameLogout.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {pb.ICmdUserGameLogout} message CmdUserGameLogout message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameLogout.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserGameLogout message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserGameLogout} CmdUserGameLogout
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameLogout.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserGameLogout();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserGameLogout message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserGameLogout} CmdUserGameLogout
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameLogout.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserGameLogout message.
         * @function verify
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserGameLogout.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdUserGameLogout message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserGameLogout} CmdUserGameLogout
         */
        CmdUserGameLogout.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserGameLogout)
                return object;
            var message = new $root.pb.CmdUserGameLogout();
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdUserGameLogout message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserGameLogout
         * @static
         * @param {pb.CmdUserGameLogout} message CmdUserGameLogout
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserGameLogout.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdUserGameLogout to JSON.
         * @function toJSON
         * @memberof pb.CmdUserGameLogout
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserGameLogout.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserGameLogout;
    })();

    pb.CmdUserGameData = (function () {

        /**
         * Properties of a CmdUserGameData.
         * @memberof pb
         * @interface ICmdUserGameData
         * @property {number|null} [uid] CmdUserGameData uid
         */

        /**
         * Constructs a new CmdUserGameData.
         * @memberof pb
         * @classdesc Represents a CmdUserGameData.
         * @implements ICmdUserGameData
         * @constructor
         * @param {pb.ICmdUserGameData=} [properties] Properties to set
         */
        function CmdUserGameData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserGameData uid.
         * @member {number} uid
         * @memberof pb.CmdUserGameData
         * @instance
         */
        CmdUserGameData.prototype.uid = 0;

        /**
         * Creates a new CmdUserGameData instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserGameData
         * @static
         * @param {pb.ICmdUserGameData=} [properties] Properties to set
         * @returns {pb.CmdUserGameData} CmdUserGameData instance
         */
        CmdUserGameData.create = function create(properties) {
            return new CmdUserGameData(properties);
        };

        /**
         * Encodes the specified CmdUserGameData message. Does not implicitly {@link pb.CmdUserGameData.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserGameData
         * @static
         * @param {pb.ICmdUserGameData} message CmdUserGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            return writer;
        };

        /**
         * Encodes the specified CmdUserGameData message, length delimited. Does not implicitly {@link pb.CmdUserGameData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserGameData
         * @static
         * @param {pb.ICmdUserGameData} message CmdUserGameData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserGameData message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserGameData} CmdUserGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserGameData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserGameData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserGameData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserGameData} CmdUserGameData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserGameData message.
         * @function verify
         * @memberof pb.CmdUserGameData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserGameData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            return null;
        };

        /**
         * Creates a CmdUserGameData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserGameData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserGameData} CmdUserGameData
         */
        CmdUserGameData.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserGameData)
                return object;
            var message = new $root.pb.CmdUserGameData();
            if (object.uid != null)
                message.uid = object.uid | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdUserGameData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserGameData
         * @static
         * @param {pb.CmdUserGameData} message CmdUserGameData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserGameData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.uid = 0;
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            return object;
        };

        /**
         * Converts this CmdUserGameData to JSON.
         * @function toJSON
         * @memberof pb.CmdUserGameData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserGameData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserGameData;
    })();

    pb.CmdUserGameDataReply = (function () {

        /**
         * Properties of a CmdUserGameDataReply.
         * @memberof pb
         * @interface ICmdUserGameDataReply
         * @property {pb.IGameData|null} [gd] CmdUserGameDataReply gd
         * @property {number|null} [roomId] CmdUserGameDataReply roomId
         * @property {number|null} [roomAtNode] CmdUserGameDataReply roomAtNode
         */

        /**
         * Constructs a new CmdUserGameDataReply.
         * @memberof pb
         * @classdesc Represents a CmdUserGameDataReply.
         * @implements ICmdUserGameDataReply
         * @constructor
         * @param {pb.ICmdUserGameDataReply=} [properties] Properties to set
         */
        function CmdUserGameDataReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdUserGameDataReply gd.
         * @member {pb.IGameData|null|undefined} gd
         * @memberof pb.CmdUserGameDataReply
         * @instance
         */
        CmdUserGameDataReply.prototype.gd = null;

        /**
         * CmdUserGameDataReply roomId.
         * @member {number} roomId
         * @memberof pb.CmdUserGameDataReply
         * @instance
         */
        CmdUserGameDataReply.prototype.roomId = 0;

        /**
         * CmdUserGameDataReply roomAtNode.
         * @member {number} roomAtNode
         * @memberof pb.CmdUserGameDataReply
         * @instance
         */
        CmdUserGameDataReply.prototype.roomAtNode = 0;

        /**
         * Creates a new CmdUserGameDataReply instance using the specified properties.
         * @function create
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {pb.ICmdUserGameDataReply=} [properties] Properties to set
         * @returns {pb.CmdUserGameDataReply} CmdUserGameDataReply instance
         */
        CmdUserGameDataReply.create = function create(properties) {
            return new CmdUserGameDataReply(properties);
        };

        /**
         * Encodes the specified CmdUserGameDataReply message. Does not implicitly {@link pb.CmdUserGameDataReply.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {pb.ICmdUserGameDataReply} message CmdUserGameDataReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameDataReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gd != null && Object.hasOwnProperty.call(message, "gd"))
                $root.pb.GameData.encode(message.gd, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.roomId != null && Object.hasOwnProperty.call(message, "roomId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomId);
            if (message.roomAtNode != null && Object.hasOwnProperty.call(message, "roomAtNode"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomAtNode);
            return writer;
        };

        /**
         * Encodes the specified CmdUserGameDataReply message, length delimited. Does not implicitly {@link pb.CmdUserGameDataReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {pb.ICmdUserGameDataReply} message CmdUserGameDataReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdUserGameDataReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdUserGameDataReply message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdUserGameDataReply} CmdUserGameDataReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameDataReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdUserGameDataReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.gd = $root.pb.GameData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.int32();
                        break;
                    case 3:
                        message.roomAtNode = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdUserGameDataReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdUserGameDataReply} CmdUserGameDataReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdUserGameDataReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdUserGameDataReply message.
         * @function verify
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdUserGameDataReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gd != null && message.hasOwnProperty("gd")) {
                var error = $root.pb.GameData.verify(message.gd);
                if (error)
                    return "gd." + error;
            }
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.roomAtNode != null && message.hasOwnProperty("roomAtNode"))
                if (!$util.isInteger(message.roomAtNode))
                    return "roomAtNode: integer expected";
            return null;
        };

        /**
         * Creates a CmdUserGameDataReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdUserGameDataReply} CmdUserGameDataReply
         */
        CmdUserGameDataReply.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdUserGameDataReply)
                return object;
            var message = new $root.pb.CmdUserGameDataReply();
            if (object.gd != null) {
                if (typeof object.gd !== "object")
                    throw TypeError(".pb.CmdUserGameDataReply.gd: object expected");
                message.gd = $root.pb.GameData.fromObject(object.gd);
            }
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.roomAtNode != null)
                message.roomAtNode = object.roomAtNode | 0;
            return message;
        };

        /**
         * Creates a plain object from a CmdUserGameDataReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdUserGameDataReply
         * @static
         * @param {pb.CmdUserGameDataReply} message CmdUserGameDataReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdUserGameDataReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gd = null;
                object.roomId = 0;
                object.roomAtNode = 0;
            }
            if (message.gd != null && message.hasOwnProperty("gd"))
                object.gd = $root.pb.GameData.toObject(message.gd, options);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.roomAtNode != null && message.hasOwnProperty("roomAtNode"))
                object.roomAtNode = message.roomAtNode;
            return object;
        };

        /**
         * Converts this CmdUserGameDataReply to JSON.
         * @function toJSON
         * @memberof pb.CmdUserGameDataReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdUserGameDataReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdUserGameDataReply;
    })();

    pb.CmdGameProperties = (function () {

        /**
         * Properties of a CmdGameProperties.
         * @memberof pb
         * @interface ICmdGameProperties
         * @property {number|null} [uid] CmdGameProperties uid
         * @property {Array.<pb.IGamePropertyItem>|null} [properties] CmdGameProperties properties
         * @property {string|null} [memo] CmdGameProperties memo
         * @property {boolean|null} [backbag] CmdGameProperties backbag
         */

        /**
         * Constructs a new CmdGameProperties.
         * @memberof pb
         * @classdesc Represents a CmdGameProperties.
         * @implements ICmdGameProperties
         * @constructor
         * @param {pb.ICmdGameProperties=} [properties] Properties to set
         */
        function CmdGameProperties(properties) {
            this.properties = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdGameProperties uid.
         * @member {number} uid
         * @memberof pb.CmdGameProperties
         * @instance
         */
        CmdGameProperties.prototype.uid = 0;

        /**
         * CmdGameProperties properties.
         * @member {Array.<pb.IGamePropertyItem>} properties
         * @memberof pb.CmdGameProperties
         * @instance
         */
        CmdGameProperties.prototype.properties = $util.emptyArray;

        /**
         * CmdGameProperties memo.
         * @member {string} memo
         * @memberof pb.CmdGameProperties
         * @instance
         */
        CmdGameProperties.prototype.memo = "";

        /**
         * CmdGameProperties backbag.
         * @member {boolean} backbag
         * @memberof pb.CmdGameProperties
         * @instance
         */
        CmdGameProperties.prototype.backbag = false;

        /**
         * Creates a new CmdGameProperties instance using the specified properties.
         * @function create
         * @memberof pb.CmdGameProperties
         * @static
         * @param {pb.ICmdGameProperties=} [properties] Properties to set
         * @returns {pb.CmdGameProperties} CmdGameProperties instance
         */
        CmdGameProperties.create = function create(properties) {
            return new CmdGameProperties(properties);
        };

        /**
         * Encodes the specified CmdGameProperties message. Does not implicitly {@link pb.CmdGameProperties.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdGameProperties
         * @static
         * @param {pb.ICmdGameProperties} message CmdGameProperties message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameProperties.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.properties != null && message.properties.length)
                for (var i = 0; i < message.properties.length; ++i)
                    $root.pb.GamePropertyItem.encode(message.properties[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.memo);
            if (message.backbag != null && Object.hasOwnProperty.call(message, "backbag"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.backbag);
            return writer;
        };

        /**
         * Encodes the specified CmdGameProperties message, length delimited. Does not implicitly {@link pb.CmdGameProperties.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdGameProperties
         * @static
         * @param {pb.ICmdGameProperties} message CmdGameProperties message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdGameProperties.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdGameProperties message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdGameProperties
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdGameProperties} CmdGameProperties
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameProperties.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdGameProperties();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        if (!(message.properties && message.properties.length))
                            message.properties = [];
                        message.properties.push($root.pb.GamePropertyItem.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.memo = reader.string();
                        break;
                    case 4:
                        message.backbag = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdGameProperties message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdGameProperties
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdGameProperties} CmdGameProperties
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdGameProperties.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdGameProperties message.
         * @function verify
         * @memberof pb.CmdGameProperties
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdGameProperties.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.properties != null && message.hasOwnProperty("properties")) {
                if (!Array.isArray(message.properties))
                    return "properties: array expected";
                for (var i = 0; i < message.properties.length; ++i) {
                    var error = $root.pb.GamePropertyItem.verify(message.properties[i]);
                    if (error)
                        return "properties." + error;
                }
            }
            if (message.memo != null && message.hasOwnProperty("memo"))
                if (!$util.isString(message.memo))
                    return "memo: string expected";
            if (message.backbag != null && message.hasOwnProperty("backbag"))
                if (typeof message.backbag !== "boolean")
                    return "backbag: boolean expected";
            return null;
        };

        /**
         * Creates a CmdGameProperties message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdGameProperties
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdGameProperties} CmdGameProperties
         */
        CmdGameProperties.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdGameProperties)
                return object;
            var message = new $root.pb.CmdGameProperties();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.properties) {
                if (!Array.isArray(object.properties))
                    throw TypeError(".pb.CmdGameProperties.properties: array expected");
                message.properties = [];
                for (var i = 0; i < object.properties.length; ++i) {
                    if (typeof object.properties[i] !== "object")
                        throw TypeError(".pb.CmdGameProperties.properties: object expected");
                    message.properties[i] = $root.pb.GamePropertyItem.fromObject(object.properties[i]);
                }
            }
            if (object.memo != null)
                message.memo = String(object.memo);
            if (object.backbag != null)
                message.backbag = Boolean(object.backbag);
            return message;
        };

        /**
         * Creates a plain object from a CmdGameProperties message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdGameProperties
         * @static
         * @param {pb.CmdGameProperties} message CmdGameProperties
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdGameProperties.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.properties = [];
            if (options.defaults) {
                object.uid = 0;
                object.memo = "";
                object.backbag = false;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.properties && message.properties.length) {
                object.properties = [];
                for (var j = 0; j < message.properties.length; ++j)
                    object.properties[j] = $root.pb.GamePropertyItem.toObject(message.properties[j], options);
            }
            if (message.memo != null && message.hasOwnProperty("memo"))
                object.memo = message.memo;
            if (message.backbag != null && message.hasOwnProperty("backbag"))
                object.backbag = message.backbag;
            return object;
        };

        /**
         * Converts this CmdGameProperties to JSON.
         * @function toJSON
         * @memberof pb.CmdGameProperties
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdGameProperties.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdGameProperties;
    })();

    pb.ServerCmd = (function () {

        /**
         * Properties of a ServerCmd.
         * @memberof pb
         * @interface IServerCmd
         * @property {pb.ServerCmdId|null} [id] ServerCmd id
         * @property {Uint8Array|null} [parameters] ServerCmd parameters
         */

        /**
         * Constructs a new ServerCmd.
         * @memberof pb
         * @classdesc Represents a ServerCmd.
         * @implements IServerCmd
         * @constructor
         * @param {pb.IServerCmd=} [properties] Properties to set
         */
        function ServerCmd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServerCmd id.
         * @member {pb.ServerCmdId} id
         * @memberof pb.ServerCmd
         * @instance
         */
        ServerCmd.prototype.id = 0;

        /**
         * ServerCmd parameters.
         * @member {Uint8Array} parameters
         * @memberof pb.ServerCmd
         * @instance
         */
        ServerCmd.prototype.parameters = $util.newBuffer([]);

        /**
         * Creates a new ServerCmd instance using the specified properties.
         * @function create
         * @memberof pb.ServerCmd
         * @static
         * @param {pb.IServerCmd=} [properties] Properties to set
         * @returns {pb.ServerCmd} ServerCmd instance
         */
        ServerCmd.create = function create(properties) {
            return new ServerCmd(properties);
        };

        /**
         * Encodes the specified ServerCmd message. Does not implicitly {@link pb.ServerCmd.verify|verify} messages.
         * @function encode
         * @memberof pb.ServerCmd
         * @static
         * @param {pb.IServerCmd} message ServerCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerCmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.parameters != null && Object.hasOwnProperty.call(message, "parameters"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.parameters);
            return writer;
        };

        /**
         * Encodes the specified ServerCmd message, length delimited. Does not implicitly {@link pb.ServerCmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.ServerCmd
         * @static
         * @param {pb.IServerCmd} message ServerCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerCmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServerCmd message from the specified reader or buffer.
         * @function decode
         * @memberof pb.ServerCmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.ServerCmd} ServerCmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerCmd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.ServerCmd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.parameters = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServerCmd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.ServerCmd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.ServerCmd} ServerCmd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerCmd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServerCmd message.
         * @function verify
         * @memberof pb.ServerCmd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServerCmd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                switch (message.id) {
                    default:
                        return "id: enum value expected";
                    case 0:
                    case 1:
                        break;
                }
            if (message.parameters != null && message.hasOwnProperty("parameters"))
                if (!(message.parameters && typeof message.parameters.length === "number" || $util.isString(message.parameters)))
                    return "parameters: buffer expected";
            return null;
        };

        /**
         * Creates a ServerCmd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.ServerCmd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.ServerCmd} ServerCmd
         */
        ServerCmd.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.ServerCmd)
                return object;
            var message = new $root.pb.ServerCmd();
            switch (object.id) {
                case "ServerCmdId_NULL":
                case 0:
                    message.id = 0;
                    break;
                case "ReloadGameConf":
                case 1:
                    message.id = 1;
                    break;
            }
            if (object.parameters != null)
                if (typeof object.parameters === "string")
                    $util.base64.decode(object.parameters, message.parameters = $util.newBuffer($util.base64.length(object.parameters)), 0);
                else if (object.parameters.length)
                    message.parameters = object.parameters;
            return message;
        };

        /**
         * Creates a plain object from a ServerCmd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.ServerCmd
         * @static
         * @param {pb.ServerCmd} message ServerCmd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServerCmd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = options.enums === String ? "ServerCmdId_NULL" : 0;
                if (options.bytes === String)
                    object.parameters = "";
                else {
                    object.parameters = [];
                    if (options.bytes !== Array)
                        object.parameters = $util.newBuffer(object.parameters);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.enums === String ? $root.pb.ServerCmdId[message.id] : message.id;
            if (message.parameters != null && message.hasOwnProperty("parameters"))
                object.parameters = options.bytes === String ? $util.base64.encode(message.parameters, 0, message.parameters.length) : options.bytes === Array ? Array.prototype.slice.call(message.parameters) : message.parameters;
            return object;
        };

        /**
         * Converts this ServerCmd to JSON.
         * @function toJSON
         * @memberof pb.ServerCmd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServerCmd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ServerCmd;
    })();

    pb.Message = (function () {

        /**
         * Properties of a Message.
         * @memberof pb
         * @interface IMessage
         * @property {pb.MessageId|null} [id] Message id
         * @property {Uint8Array|null} [buf] Message buf
         */

        /**
         * Constructs a new Message.
         * @memberof pb
         * @classdesc Represents a Message.
         * @implements IMessage
         * @constructor
         * @param {pb.IMessage=} [properties] Properties to set
         */
        function Message(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Message id.
         * @member {pb.MessageId} id
         * @memberof pb.Message
         * @instance
         */
        Message.prototype.id = 0;

        /**
         * Message buf.
         * @member {Uint8Array} buf
         * @memberof pb.Message
         * @instance
         */
        Message.prototype.buf = $util.newBuffer([]);

        /**
         * Creates a new Message instance using the specified properties.
         * @function create
         * @memberof pb.Message
         * @static
         * @param {pb.IMessage=} [properties] Properties to set
         * @returns {pb.Message} Message instance
         */
        Message.create = function create(properties) {
            return new Message(properties);
        };

        /**
         * Encodes the specified Message message. Does not implicitly {@link pb.Message.verify|verify} messages.
         * @function encode
         * @memberof pb.Message
         * @static
         * @param {pb.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.buf != null && Object.hasOwnProperty.call(message, "buf"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.buf);
            return writer;
        };

        /**
         * Encodes the specified Message message, length delimited. Does not implicitly {@link pb.Message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Message
         * @static
         * @param {pb.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Message message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.buf = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Message message.
         * @function verify
         * @memberof pb.Message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                switch (message.id) {
                    default:
                        return "id: enum value expected";
                    case 0:
                    case 101:
                    case 103:
                    case 1000:
                    case 1002:
                    case 1004:
                    case 1006:
                    case 1008:
                    case 1010:
                    case 1012:
                    case 1014:
                    case 1016:
                    case 1018:
                    case 1020:
                    case 1022:
                    case 1024:
                    case 1026:
                    case 1028:
                    case 1030:
                    case 1032:
                    case 1034:
                    case 1036:
                    case 1037:
                    case 1100:
                    case 1102:
                    case 1200:
                    case 1202:
                    case 1204:
                    case 2001:
                    case 2002:
                    case 2003:
                    case 2004:
                    case 2005:
                    case 2006:
                    case 2007:
                    case 2008:
                    case 2009:
                    case 2010:
                    case 2011:
                    case 2012:
                    case 2013:
                    case 2014:
                    case 2015:
                    case 2016:
                    case 2017:
                    case 2018:
                    case 3001:
                    case 3002:
                    case 3003:
                    case 3004:
                    case 3005:
                    case 3006:
                    case 3007:
                    case 3008:
                    case 3009:
                    case 3010:
                    case 3011:
                    case 3012:
                    case 3013:
                    case 3014:
                    case 3015:
                    case 3016:
                    case 3017:
                    case 3018:
                    case 3019:
                    case 3020:
                    case 3021:
                    case 3022:
                    case 3023:
                    case 3024:
                    case 3025:
                    case 3026:
                    case 3027:
                    case 3028:
                    case 3029:
                    case 3030:
                    case 3031:
                    case 3032:
                    case 3033:
                    case 3034:
                    case 3035:
                    case 3036:
                    case 3037:
                    case 3038:
                    case 3039:
                    case 3040:
                    case 3041:
                    case 3042:
                    case 3043:
                    case 3044:
                    case 3045:
                    case 3046:
                    case 3047:
                    case 3048:
                    case 3049:
                    case 3050:
                    case 3051:
                    case 3052:
                    case 3053:
                    case 3054:
                    case 3055:
                    case 3056:
                    case 3997:
                    case 3998:
                    case 3999:
                    case 4000:
                    case 4001:
                    case 4002:
                    case 4003:
                    case 4004:
                    case 4005:
                    case 4006:
                    case 4007:
                    case 4008:
                    case 4009:
                    case 4010:
                    case 4011:
                    case 4012:
                    case 4013:
                    case 4014:
                    case 4015:
                    case 4016:
                    case 4017:
                    case 4018:
                    case 4019:
                    case 4020:
                    case 4021:
                    case 4022:
                    case 4023:
                    case 4024:
                    case 4025:
                    case 4026:
                    case 4027:
                    case 4028:
                    case 4029:
                    case 4030:
                    case 4031:
                    case 4032:
                    case 4033:
                    case 4034:
                    case 4035:
                    case 4036:
                    case 4037:
                    case 4038:
                    case 4039:
                    case 4040:
                    case 4041:
                    case 4042:
                    case 4043:
                    case 4044:
                    case 4045:
                    case 4046:
                    case 4047:
                    case 4048:
                    case 4049:
                    case 4050:
                    case 5003:
                    case 5004:
                    case 5005:
                    case 5006:
                    case 5007:
                    case 5008:
                    case 5009:
                    case 5010:
                    case 5200:
                    case 5202:
                    case 5204:
                    case 5206:
                    case 5208:
                    case 5210:
                    case 5212:
                    case 5214:
                    case 5216:
                    case 5218:
                    case 10001:
                    case 10003:
                    case 10005:
                    case 10007:
                    case 10009:
                    case 10011:
                    case 10013:
                    case 10015:
                    case 10017:
                    case 10019:
                    case 10021:
                    case 10023:
                    case 10025:
                    case 10027:
                    case 10028:
                    case 10030:
                    case 10032:
                    case 10034:
                    case 10036:
                        break;
                }
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            return null;
        };

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Message} Message
         */
        Message.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Message)
                return object;
            var message = new $root.pb.Message();
            switch (object.id) {
                case "MessageId_NULL":
                case 0:
                    message.id = 0;
                    break;
                case "Cmd_Save_Stock2Db":
                case 101:
                    message.id = 101;
                    break;
                case "Cmd_Make_StockList":
                case 103:
                    message.id = 103;
                    break;
                case "Sync_S2C_QuoteItem":
                case 1000:
                    message.id = 1000;
                    break;
                case "Sync_S2C_GameProperty":
                case 1002:
                    message.id = 1002;
                    break;
                case "Sync_S2C_GameCounter":
                case 1004:
                    message.id = 1004;
                    break;
                case "Sync_S2C_GameSmxl":
                case 1006:
                    message.id = 1006;
                    break;
                case "Sync_S2C_GameCg":
                case 1008:
                    message.id = 1008;
                    break;
                case "Sync_S2C_GameMncg":
                case 1010:
                    message.id = 1010;
                    break;
                case "Sync_S2C_GameCgds":
                case 1012:
                    message.id = 1012;
                    break;
                case "Sync_S2C_FirstLoginToday":
                case 1014:
                    message.id = 1014;
                    break;
                case "Sync_S2C_GameCg_GD":
                case 1016:
                    message.id = 1016;
                    break;
                case "Sync_S2C_GameTimes":
                case 1018:
                    message.id = 1018;
                    break;
                case "Sync_S2C_StockOrderResult":
                case 1020:
                    message.id = 1020;
                    break;
                case "Sync_S2C_MutipleLogin":
                case 1022:
                    message.id = 1022;
                    break;
                case "Sync_S2C_TaskProgress":
                case 1024:
                    message.id = 1024;
                    break;
                case "Sync_S2C_ActivityConf":
                case 1026:
                    message.id = 1026;
                    break;
                case "Sync_S2C_GameCgdsItem":
                case 1028:
                    message.id = 1028;
                    break;
                case "Sync_S2C_GoldAwardPrompt":
                case 1030:
                    message.id = 1030;
                    break;
                case "Sync_S2C_UnregistryAccount":
                case 1032:
                    message.id = 1032;
                    break;
                case "Sync_S2C_CgdsConf":
                case 1034:
                    message.id = 1034;
                    break;
                case "Sync_S2C_RecommendStock":
                case 1036:
                    message.id = 1036;
                    break;
                case "Sync_S2C_InviterState":
                case 1037:
                    message.id = 1037;
                    break;
                case "Sync_S2C_Broadcast":
                case 1100:
                    message.id = 1100;
                    break;
                case "Sync_S2C_Message":
                case 1102:
                    message.id = 1102;
                    break;
                case "Sync_C2S_GameHeart":
                case 1200:
                    message.id = 1200;
                    break;
                case "Sync_C2S_Message":
                case 1202:
                    message.id = 1202;
                    break;
                case "Sync_C2S_PaymentOk":
                case 1204:
                    message.id = 1204;
                    break;
                case "Req_QuoteSubscribe":
                case 2001:
                    message.id = 2001;
                    break;
                case "Rep_QuoteSubscribe":
                case 2002:
                    message.id = 2002;
                    break;
                case "Req_QuoteQuery":
                case 2003:
                    message.id = 2003;
                    break;
                case "Rep_QuoteQuery":
                case 2004:
                    message.id = 2004;
                    break;
                case "Req_QuoteQueryFuture":
                case 2005:
                    message.id = 2005;
                    break;
                case "Rep_QuoteQueryFuture":
                case 2006:
                    message.id = 2006;
                    break;
                case "Req_IsTradingDay":
                case 2007:
                    message.id = 2007;
                    break;
                case "Rep_IsTradingDay":
                case 2008:
                    message.id = 2008;
                    break;
                case "Req_QueryTradingDay":
                case 2009:
                    message.id = 2009;
                    break;
                case "Rep_QueryTradingDay":
                case 2010:
                    message.id = 2010;
                    break;
                case "Req_QueryAiStockList":
                case 2011:
                    message.id = 2011;
                    break;
                case "Rep_QueryAiStockList":
                case 2012:
                    message.id = 2012;
                    break;
                case "Req_QueryAiSignal":
                case 2013:
                    message.id = 2013;
                    break;
                case "Rep_QueryAiSignal":
                case 2014:
                    message.id = 2014;
                    break;
                case "Req_EditAiStockList":
                case 2015:
                    message.id = 2015;
                    break;
                case "Rep_EditAiStockList":
                case 2016:
                    message.id = 2016;
                    break;
                case "Req_RecommendStock":
                case 2017:
                    message.id = 2017;
                    break;
                case "Rep_RecommendStock":
                case 2018:
                    message.id = 2018;
                    break;
                case "Req_Hall_UploadIcon":
                case 3001:
                    message.id = 3001;
                    break;
                case "Rep_Hall_UploadIcon":
                case 3002:
                    message.id = 3002;
                    break;
                case "Req_Hall_DownloadIcon":
                case 3003:
                    message.id = 3003;
                    break;
                case "Rep_Hall_DownploadIcon":
                case 3004:
                    message.id = 3004;
                    break;
                case "Req_Hall_EditIcon":
                case 3005:
                    message.id = 3005;
                    break;
                case "Rep_Hall_EditIcon":
                case 3006:
                    message.id = 3006;
                    break;
                case "Req_Hall_EditNick":
                case 3007:
                    message.id = 3007;
                    break;
                case "Rep_Hall_EditNick":
                case 3008:
                    message.id = 3008;
                    break;
                case "Req_Hall_EditLocation":
                case 3009:
                    message.id = 3009;
                    break;
                case "Rep_Hall_EditLocation":
                case 3010:
                    message.id = 3010;
                    break;
                case "Req_Hall_EditGender":
                case 3011:
                    message.id = 3011;
                    break;
                case "Rep_Hall_EditGender":
                case 3012:
                    message.id = 3012;
                    break;
                case "Req_Hall_BackBag":
                case 3013:
                    message.id = 3013;
                    break;
                case "Rep_Hall_BackBag":
                case 3014:
                    message.id = 3014;
                    break;
                case "Req_Hall_GetItem":
                case 3015:
                    message.id = 3015;
                    break;
                case "Rep_Hall_GetItem":
                case 3016:
                    message.id = 3016;
                    break;
                case "Req_Hall_EditFavorList":
                case 3017:
                    message.id = 3017;
                    break;
                case "Rep_Hall_EditFavorList":
                case 3018:
                    message.id = 3018;
                    break;
                case "Req_Hall_QueryPlayer":
                case 3019:
                    message.id = 3019;
                    break;
                case "Rep_Hall_QueryPlayer":
                case 3020:
                    message.id = 3020;
                    break;
                case "Req_Hall_SaveStudyProgress":
                case 3021:
                    message.id = 3021;
                    break;
                case "Rep_Hall_SaveStudyProgress":
                case 3022:
                    message.id = 3022;
                    break;
                case "Req_Hall_GetDailyTaskAward":
                case 3023:
                    message.id = 3023;
                    break;
                case "Rep_Hall_GetDailyTaskAward":
                case 3024:
                    message.id = 3024;
                    break;
                case "Req_Hall_UnlockGame":
                case 3025:
                    message.id = 3025;
                    break;
                case "Rep_Hall_UnlockGame":
                case 3026:
                    message.id = 3026;
                    break;
                case "Req_Hall_GetWeeklyAward":
                case 3027:
                    message.id = 3027;
                    break;
                case "Rep_Hall_GetWeeklyAward":
                case 3028:
                    message.id = 3028;
                    break;
                case "Req_Hall_QueryEventLog":
                case 3029:
                    message.id = 3029;
                    break;
                case "Rep_Hall_QueryEventLog":
                case 3030:
                    message.id = 3030;
                    break;
                case "Req_Hall_ShopOrder":
                case 3031:
                    message.id = 3031;
                    break;
                case "Rep_Hall_ShopOrder":
                case 3032:
                    message.id = 3032;
                    break;
                case "Req_Hall_ShopOrderQuery":
                case 3033:
                    message.id = 3033;
                    break;
                case "Rep_Hall_ShopOrderQuery":
                case 3034:
                    message.id = 3034;
                    break;
                case "Req_Hall_MobileBind":
                case 3035:
                    message.id = 3035;
                    break;
                case "Rep_Hall_MobileBind":
                case 3036:
                    message.id = 3036;
                    break;
                case "Req_Hall_ResetGameCounter":
                case 3037:
                    message.id = 3037;
                    break;
                case "Rep_Hall_ResetGameCounter":
                case 3038:
                    message.id = 3038;
                    break;
                case "Req_Hall_GetLevelRanking":
                case 3039:
                    message.id = 3039;
                    break;
                case "Rep_Hall_GetLevelRanking":
                case 3040:
                    message.id = 3040;
                    break;
                case "Req_Hall_GetFameRanking":
                case 3041:
                    message.id = 3041;
                    break;
                case "Rep_Hall_GetFameRanking":
                case 3042:
                    message.id = 3042;
                    break;
                case "Req_Hall_GetFameRankingWeekly":
                case 3043:
                    message.id = 3043;
                    break;
                case "Rep_Hall_GetFameRankingWeekly":
                case 3044:
                    message.id = 3044;
                    break;
                case "Req_Hall_GetActivityLogs":
                case 3045:
                    message.id = 3045;
                    break;
                case "Rep_Hall_GetActivityLogs":
                case 3046:
                    message.id = 3046;
                    break;
                case "Req_Hall_GetDailyAdAward":
                case 3047:
                    message.id = 3047;
                    break;
                case "Rep_Hall_GetDailyAdAward":
                case 3048:
                    message.id = 3048;
                    break;
                case "Req_Hall_Get7Award":
                case 3049:
                    message.id = 3049;
                    break;
                case "Rep_Hall_Get7Award":
                case 3050:
                    message.id = 3050;
                    break;
                case "Req_Hall_GetBrokenAward":
                case 3051:
                    message.id = 3051;
                    break;
                case "Rep_Hall_GetBrokenAward":
                case 3052:
                    message.id = 3052;
                    break;
                case "Req_Hall_Exchange":
                case 3053:
                    message.id = 3053;
                    break;
                case "Rep_Hall_Exchange":
                case 3054:
                    message.id = 3054;
                    break;
                case "Req_Hall_GetInviterAward":
                case 3055:
                    message.id = 3055;
                    break;
                case "Rep_Hall_GetInviterAward":
                case 3056:
                    message.id = 3056;
                    break;
                case "Req_Hall_Unregistry":
                case 3997:
                    message.id = 3997;
                    break;
                case "Rep_Hall_Unregistry":
                case 3998:
                    message.id = 3998;
                    break;
                case "Req_Hall_Logout":
                case 3999:
                    message.id = 3999;
                    break;
                case "Rep_Hall_Logout":
                case 4000:
                    message.id = 4000;
                    break;
                case "Req_Game_Login":
                case 4001:
                    message.id = 4001;
                    break;
                case "Rep_Game_Login":
                case 4002:
                    message.id = 4002;
                    break;
                case "Req_Game_Start":
                case 4003:
                    message.id = 4003;
                    break;
                case "Rep_Game_Start":
                case 4004:
                    message.id = 4004;
                    break;
                case "Req_Game_Over":
                case 4005:
                    message.id = 4005;
                    break;
                case "Rep_Game_Over":
                case 4006:
                    message.id = 4006;
                    break;
                case "Req_Game_QueryGameResult":
                case 4007:
                    message.id = 4007;
                    break;
                case "Rep_Game_QueryGameResult":
                case 4008:
                    message.id = 4008;
                    break;
                case "Req_Game_GetGameOperation":
                case 4009:
                    message.id = 4009;
                    break;
                case "Rep_Game_GetGameOperation":
                case 4010:
                    message.id = 4010;
                    break;
                case "Req_Game_SmxlReport":
                case 4011:
                    message.id = 4011;
                    break;
                case "Rep_Game_SmxlReport":
                case 4012:
                    message.id = 4012;
                    break;
                case "Req_Game_SmxlReset":
                case 4013:
                    message.id = 4013;
                    break;
                case "Rep_Game_SmxlReset":
                case 4014:
                    message.id = 4014;
                    break;
                case "Req_Game_CgsGetConf":
                case 4015:
                    message.id = 4015;
                    break;
                case "Rep_Game_CgsGetConf":
                case 4016:
                    message.id = 4016;
                    break;
                case "Req_Game_CgsGetClearanceRank":
                case 4017:
                    message.id = 4017;
                    break;
                case "Rep_Game_CgsGetClearanceRank":
                case 4018:
                    message.id = 4018;
                    break;
                case "Req_Game_CgsGetStageRank":
                case 4019:
                    message.id = 4019;
                    break;
                case "Rep_Game_CgsGetStageRank":
                case 4020:
                    message.id = 4020;
                    break;
                case "Req_Game_CgsGetSeasonRank":
                case 4021:
                    message.id = 4021;
                    break;
                case "Rep_Game_CgsGetSeasonRank":
                case 4022:
                    message.id = 4022;
                    break;
                case "Req_Game_CgsGetStageAward":
                case 4023:
                    message.id = 4023;
                    break;
                case "Rep_Game_CgsGetStageAward":
                case 4024:
                    message.id = 4024;
                    break;
                case "Req_Game_OrderQuery":
                case 4025:
                    message.id = 4025;
                    break;
                case "Rep_Game_OrderQuery":
                case 4026:
                    message.id = 4026;
                    break;
                case "Req_Game_Order":
                case 4027:
                    message.id = 4027;
                    break;
                case "Rep_Game_Order":
                case 4028:
                    message.id = 4028;
                    break;
                case "Req_Game_OrderCancel":
                case 4029:
                    message.id = 4029;
                    break;
                case "Rep_Game_OrderCancel":
                case 4030:
                    message.id = 4030;
                    break;
                case "Req_Game_MncgExchange":
                case 4031:
                    message.id = 4031;
                    break;
                case "Rep_Game_MncgExchange":
                case 4032:
                    message.id = 4032;
                    break;
                case "Req_Game_MncgEditStockList":
                case 4033:
                    message.id = 4033;
                    break;
                case "Rep_Game_MncgEditStockList":
                case 4034:
                    message.id = 4034;
                    break;
                case "Req_Game_CgdsList":
                case 4035:
                    message.id = 4035;
                    break;
                case "Rep_Game_CgdsList":
                case 4036:
                    message.id = 4036;
                    break;
                case "Req_Game_CgdsReg":
                case 4037:
                    message.id = 4037;
                    break;
                case "Rep_Game_CgdsReg":
                case 4038:
                    message.id = 4038;
                    break;
                case "Req_Game_CgdsRanking":
                case 4039:
                    message.id = 4039;
                    break;
                case "Rep_Game_CgdsRanking":
                case 4040:
                    message.id = 4040;
                    break;
                case "Req_Game_ZsjcBettingList":
                case 4041:
                    message.id = 4041;
                    break;
                case "Rep_Game_ZsjcBettingList":
                case 4042:
                    message.id = 4042;
                    break;
                case "Req_Game_ZsjcBet":
                case 4043:
                    message.id = 4043;
                    break;
                case "Rep_Game_ZsjcBet":
                case 4044:
                    message.id = 4044;
                    break;
                case "Req_Game_ZsjcRanking":
                case 4045:
                    message.id = 4045;
                    break;
                case "Rep_Game_ZsjcRanking":
                case 4046:
                    message.id = 4046;
                    break;
                case "Req_Game_ZsjcPlayerBettingList":
                case 4047:
                    message.id = 4047;
                    break;
                case "Rep_Game_ZsjcPlayerBettingList":
                case 4048:
                    message.id = 4048;
                    break;
                case "Req_Game_ZsjcBettingResultList":
                case 4049:
                    message.id = 4049;
                    break;
                case "Rep_Game_ZsjcBettingResultList":
                case 4050:
                    message.id = 4050;
                    break;
                case "Req_Room_Create":
                case 5003:
                    message.id = 5003;
                    break;
                case "Rep_Room_Create":
                case 5004:
                    message.id = 5004;
                    break;
                case "Req_Room_Enter":
                case 5005:
                    message.id = 5005;
                    break;
                case "Rep_Room_Enter":
                case 5006:
                    message.id = 5006;
                    break;
                case "Req_Room_Leave":
                case 5007:
                    message.id = 5007;
                    break;
                case "Rep_Room_Leave":
                case 5008:
                    message.id = 5008;
                    break;
                case "Req_Room_Ready":
                case 5009:
                    message.id = 5009;
                    break;
                case "Rep_Room_Ready":
                case 5010:
                    message.id = 5010;
                    break;
                case "Sync_Room_Enter":
                case 5200:
                    message.id = 5200;
                    break;
                case "Sync_Room_Leave":
                case 5202:
                    message.id = 5202;
                    break;
                case "Sync_Room_Enter_Self":
                case 5204:
                    message.id = 5204;
                    break;
                case "Sync_Room_Leave_Self":
                case 5206:
                    message.id = 5206;
                    break;
                case "Sync_Room_LostConn":
                case 5208:
                    message.id = 5208;
                    break;
                case "Sync_Room_ReConn":
                case 5210:
                    message.id = 5210;
                    break;
                case "Sync_Room_Ready":
                case 5212:
                    message.id = 5212;
                    break;
                case "Sync_Room_GameStatus":
                case 5214:
                    message.id = 5214;
                    break;
                case "Sync_Room_GameOp":
                case 5216:
                    message.id = 5216;
                    break;
                case "Sync_Room_GameResult":
                case 5218:
                    message.id = 5218;
                    break;
                case "S2S_HeartBeat":
                case 10001:
                    message.id = 10001;
                    break;
                case "S2S_Update_PlayerProperty":
                case 10003:
                    message.id = 10003;
                    break;
                case "S2S_Update_PlayerGameCounter":
                case 10005:
                    message.id = 10005;
                    break;
                case "S2S_OrderCancel":
                case 10007:
                    message.id = 10007;
                    break;
                case "S2S_Sync_Cgds":
                case 10009:
                    message.id = 10009;
                    break;
                case "S2S_Set_CgdsTitle":
                case 10011:
                    message.id = 10011;
                    break;
                case "S2S_Set_CgdsLogo":
                case 10013:
                    message.id = 10013;
                    break;
                case "S2S_Set_CgdsUrl":
                case 10015:
                    message.id = 10015;
                    break;
                case "S2S_Set_CgdsConf":
                case 10017:
                    message.id = 10017;
                    break;
                case "S2S_Set_CgdsAward":
                case 10019:
                    message.id = 10019;
                    break;
                case "S2S_Open_Cgds":
                case 10021:
                    message.id = 10021;
                    break;
                case "S2S_Close_Cgds":
                case 10023:
                    message.id = 10023;
                    break;
                case "S2S_Reload_Cgds":
                case 10025:
                    message.id = 10025;
                    break;
                case "S2S_Reload_GameConf":
                case 10027:
                    message.id = 10027;
                    break;
                case "S2S_Sync_ZsjcBetting":
                case 10028:
                    message.id = 10028;
                    break;
                case "S2S_Sync_ZsjcState":
                case 10030:
                    message.id = 10030;
                    break;
                case "S2S_Update_DailyTaskProgress":
                case 10032:
                    message.id = 10032;
                    break;
                case "S2S_Sync_Pay":
                case 10034:
                    message.id = 10034;
                    break;
                case "S2S_Sync_PaymentQuery":
                case 10036:
                    message.id = 10036;
                    break;
            }
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            return message;
        };

        /**
         * Creates a plain object from a Message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Message
         * @static
         * @param {pb.Message} message Message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = options.enums === String ? "MessageId_NULL" : 0;
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.enums === String ? $root.pb.MessageId[message.id] : message.id;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            return object;
        };

        /**
         * Converts this Message to JSON.
         * @function toJSON
         * @memberof pb.Message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Message;
    })();

    pb.Room = (function () {

        /**
         * Properties of a Room.
         * @memberof pb
         * @interface IRoom
         * @property {pb.SyncAct|null} [act] Room act
         * @property {number|null} [id] Room id
         * @property {pb.GameType|null} [game] Room game
         * @property {number|null} [max] Room max
         * @property {number|null} [cur] Room cur
         * @property {number|null} [node] Room node
         */

        /**
         * Constructs a new Room.
         * @memberof pb
         * @classdesc Represents a Room.
         * @implements IRoom
         * @constructor
         * @param {pb.IRoom=} [properties] Properties to set
         */
        function Room(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Room act.
         * @member {pb.SyncAct} act
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.act = 0;

        /**
         * Room id.
         * @member {number} id
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.id = 0;

        /**
         * Room game.
         * @member {pb.GameType} game
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.game = 0;

        /**
         * Room max.
         * @member {number} max
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.max = 0;

        /**
         * Room cur.
         * @member {number} cur
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.cur = 0;

        /**
         * Room node.
         * @member {number} node
         * @memberof pb.Room
         * @instance
         */
        Room.prototype.node = 0;

        /**
         * Creates a new Room instance using the specified properties.
         * @function create
         * @memberof pb.Room
         * @static
         * @param {pb.IRoom=} [properties] Properties to set
         * @returns {pb.Room} Room instance
         */
        Room.create = function create(properties) {
            return new Room(properties);
        };

        /**
         * Encodes the specified Room message. Does not implicitly {@link pb.Room.verify|verify} messages.
         * @function encode
         * @memberof pb.Room
         * @static
         * @param {pb.IRoom} message Room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Room.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.act != null && Object.hasOwnProperty.call(message, "act"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.act);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.game);
            if (message.max != null && Object.hasOwnProperty.call(message, "max"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.max);
            if (message.cur != null && Object.hasOwnProperty.call(message, "cur"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cur);
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.node);
            return writer;
        };

        /**
         * Encodes the specified Room message, length delimited. Does not implicitly {@link pb.Room.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.Room
         * @static
         * @param {pb.IRoom} message Room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Room.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Room message from the specified reader or buffer.
         * @function decode
         * @memberof pb.Room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.Room} Room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Room.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.Room();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.act = reader.int32();
                        break;
                    case 2:
                        message.id = reader.int32();
                        break;
                    case 3:
                        message.game = reader.int32();
                        break;
                    case 4:
                        message.max = reader.int32();
                        break;
                    case 5:
                        message.cur = reader.int32();
                        break;
                    case 6:
                        message.node = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a Room message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.Room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.Room} Room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Room.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Room message.
         * @function verify
         * @memberof pb.Room
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Room.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.act != null && message.hasOwnProperty("act"))
                switch (message.act) {
                    default:
                        return "act: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.game != null && message.hasOwnProperty("game"))
                switch (message.game) {
                    default:
                        return "game: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 10:
                    case 11:
                    case 6:
                    case 16:
                    case 1:
                    case 2:
                    case 9:
                    case 15:
                    case 12:
                    case 13:
                    case 7:
                    case 8:
                    case 30:
                        break;
                }
            if (message.max != null && message.hasOwnProperty("max"))
                if (!$util.isInteger(message.max))
                    return "max: integer expected";
            if (message.cur != null && message.hasOwnProperty("cur"))
                if (!$util.isInteger(message.cur))
                    return "cur: integer expected";
            if (message.node != null && message.hasOwnProperty("node"))
                if (!$util.isInteger(message.node))
                    return "node: integer expected";
            return null;
        };

        /**
         * Creates a Room message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.Room
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.Room} Room
         */
        Room.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.Room)
                return object;
            var message = new $root.pb.Room();
            switch (object.act) {
                case "SyncAct_NULL":
                case 0:
                    message.act = 0;
                    break;
                case "Set":
                case 1:
                    message.act = 1;
                    break;
                case "Del":
                case 2:
                    message.act = 2;
                    break;
            }
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.game) {
                case "GameType_NULL":
                case 0:
                    message.game = 0;
                    break;
                case "ShuangMang":
                case 3:
                    message.game = 3;
                    break;
                case "DingXiang":
                case 4:
                    message.game = 4;
                    break;
                case "FenShi":
                case 5:
                    message.game = 5;
                    break;
                case "ZhiBiao":
                case 10:
                    message.game = 10;
                    break;
                case "TiaoJianDan":
                case 11:
                    message.game = 11;
                    break;
                case "QiHuo":
                case 6:
                    message.game = 6;
                    break;
                case "TiaoZhan":
                case 16:
                    message.game = 16;
                    break;
                case "JJ_PK":
                case 1:
                    message.game = 1;
                    break;
                case "JJ_DuoKong":
                case 2:
                    message.game = 2;
                    break;
                case "JJ_ChuangGuan":
                case 9:
                    message.game = 9;
                    break;
                case "JJ_QiHuo":
                case 15:
                    message.game = 15;
                    break;
                case "MoNiChaoGu":
                case 12:
                    message.game = 12;
                    break;
                case "ChaoGuDaSai":
                case 13:
                    message.game = 13;
                    break;
                case "GeGuJingChai":
                case 7:
                    message.game = 7;
                    break;
                case "DaPanJingChai":
                case 8:
                    message.game = 8;
                    break;
                case "MaxGameType":
                case 30:
                    message.game = 30;
                    break;
            }
            if (object.max != null)
                message.max = object.max | 0;
            if (object.cur != null)
                message.cur = object.cur | 0;
            if (object.node != null)
                message.node = object.node | 0;
            return message;
        };

        /**
         * Creates a plain object from a Room message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.Room
         * @static
         * @param {pb.Room} message Room
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Room.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.act = options.enums === String ? "SyncAct_NULL" : 0;
                object.id = 0;
                object.game = options.enums === String ? "GameType_NULL" : 0;
                object.max = 0;
                object.cur = 0;
                object.node = 0;
            }
            if (message.act != null && message.hasOwnProperty("act"))
                object.act = options.enums === String ? $root.pb.SyncAct[message.act] : message.act;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = options.enums === String ? $root.pb.GameType[message.game] : message.game;
            if (message.max != null && message.hasOwnProperty("max"))
                object.max = message.max;
            if (message.cur != null && message.hasOwnProperty("cur"))
                object.cur = message.cur;
            if (message.node != null && message.hasOwnProperty("node"))
                object.node = message.node;
            return object;
        };

        /**
         * Converts this Room to JSON.
         * @function toJSON
         * @memberof pb.Room
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Room;
    })();

    pb.RoomList = (function () {

        /**
         * Properties of a RoomList.
         * @memberof pb
         * @interface IRoomList
         * @property {Array.<pb.IRoom>|null} [items] RoomList items
         */

        /**
         * Constructs a new RoomList.
         * @memberof pb
         * @classdesc Represents a RoomList.
         * @implements IRoomList
         * @constructor
         * @param {pb.IRoomList=} [properties] Properties to set
         */
        function RoomList(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomList items.
         * @member {Array.<pb.IRoom>} items
         * @memberof pb.RoomList
         * @instance
         */
        RoomList.prototype.items = $util.emptyArray;

        /**
         * Creates a new RoomList instance using the specified properties.
         * @function create
         * @memberof pb.RoomList
         * @static
         * @param {pb.IRoomList=} [properties] Properties to set
         * @returns {pb.RoomList} RoomList instance
         */
        RoomList.create = function create(properties) {
            return new RoomList(properties);
        };

        /**
         * Encodes the specified RoomList message. Does not implicitly {@link pb.RoomList.verify|verify} messages.
         * @function encode
         * @memberof pb.RoomList
         * @static
         * @param {pb.IRoomList} message RoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.pb.Room.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RoomList message, length delimited. Does not implicitly {@link pb.RoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.RoomList
         * @static
         * @param {pb.IRoomList} message RoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomList message from the specified reader or buffer.
         * @function decode
         * @memberof pb.RoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.RoomList} RoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.RoomList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.Room.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.RoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.RoomList} RoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomList message.
         * @function verify
         * @memberof pb.RoomList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.pb.Room.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RoomList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.RoomList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.RoomList} RoomList
         */
        RoomList.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.RoomList)
                return object;
            var message = new $root.pb.RoomList();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".pb.RoomList.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".pb.RoomList.items: object expected");
                    message.items[i] = $root.pb.Room.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RoomList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.RoomList
         * @static
         * @param {pb.RoomList} message RoomList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.pb.Room.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this RoomList to JSON.
         * @function toJSON
         * @memberof pb.RoomList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomList;
    })();

    pb.PlayerNode = (function () {

        /**
         * Properties of a PlayerNode.
         * @memberof pb
         * @interface IPlayerNode
         * @property {number|null} [uid] PlayerNode uid
         * @property {number|null} [nodeId] PlayerNode nodeId
         */

        /**
         * Constructs a new PlayerNode.
         * @memberof pb
         * @classdesc Represents a PlayerNode.
         * @implements IPlayerNode
         * @constructor
         * @param {pb.IPlayerNode=} [properties] Properties to set
         */
        function PlayerNode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlayerNode uid.
         * @member {number} uid
         * @memberof pb.PlayerNode
         * @instance
         */
        PlayerNode.prototype.uid = 0;

        /**
         * PlayerNode nodeId.
         * @member {number} nodeId
         * @memberof pb.PlayerNode
         * @instance
         */
        PlayerNode.prototype.nodeId = 0;

        /**
         * Creates a new PlayerNode instance using the specified properties.
         * @function create
         * @memberof pb.PlayerNode
         * @static
         * @param {pb.IPlayerNode=} [properties] Properties to set
         * @returns {pb.PlayerNode} PlayerNode instance
         */
        PlayerNode.create = function create(properties) {
            return new PlayerNode(properties);
        };

        /**
         * Encodes the specified PlayerNode message. Does not implicitly {@link pb.PlayerNode.verify|verify} messages.
         * @function encode
         * @memberof pb.PlayerNode
         * @static
         * @param {pb.IPlayerNode} message PlayerNode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerNode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
            if (message.nodeId != null && Object.hasOwnProperty.call(message, "nodeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nodeId);
            return writer;
        };

        /**
         * Encodes the specified PlayerNode message, length delimited. Does not implicitly {@link pb.PlayerNode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.PlayerNode
         * @static
         * @param {pb.IPlayerNode} message PlayerNode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlayerNode message from the specified reader or buffer.
         * @function decode
         * @memberof pb.PlayerNode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.PlayerNode} PlayerNode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.PlayerNode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.nodeId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a PlayerNode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.PlayerNode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.PlayerNode} PlayerNode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlayerNode message.
         * @function verify
         * @memberof pb.PlayerNode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                if (!$util.isInteger(message.nodeId))
                    return "nodeId: integer expected";
            return null;
        };

        /**
         * Creates a PlayerNode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.PlayerNode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.PlayerNode} PlayerNode
         */
        PlayerNode.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.PlayerNode)
                return object;
            var message = new $root.pb.PlayerNode();
            if (object.uid != null)
                message.uid = object.uid | 0;
            if (object.nodeId != null)
                message.nodeId = object.nodeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a PlayerNode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.PlayerNode
         * @static
         * @param {pb.PlayerNode} message PlayerNode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerNode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.nodeId = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                object.nodeId = message.nodeId;
            return object;
        };

        /**
         * Converts this PlayerNode to JSON.
         * @function toJSON
         * @memberof pb.PlayerNode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerNode;
    })();

    pb.BroadcastMsg = (function () {

        /**
         * Properties of a BroadcastMsg.
         * @memberof pb
         * @interface IBroadcastMsg
         * @property {pb.MessageId|null} [id] BroadcastMsg id
         * @property {Uint8Array|null} [buf] BroadcastMsg buf
         * @property {Array.<number>|null} [uids] BroadcastMsg uids
         */

        /**
         * Constructs a new BroadcastMsg.
         * @memberof pb
         * @classdesc Represents a BroadcastMsg.
         * @implements IBroadcastMsg
         * @constructor
         * @param {pb.IBroadcastMsg=} [properties] Properties to set
         */
        function BroadcastMsg(properties) {
            this.uids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BroadcastMsg id.
         * @member {pb.MessageId} id
         * @memberof pb.BroadcastMsg
         * @instance
         */
        BroadcastMsg.prototype.id = 0;

        /**
         * BroadcastMsg buf.
         * @member {Uint8Array} buf
         * @memberof pb.BroadcastMsg
         * @instance
         */
        BroadcastMsg.prototype.buf = $util.newBuffer([]);

        /**
         * BroadcastMsg uids.
         * @member {Array.<number>} uids
         * @memberof pb.BroadcastMsg
         * @instance
         */
        BroadcastMsg.prototype.uids = $util.emptyArray;

        /**
         * Creates a new BroadcastMsg instance using the specified properties.
         * @function create
         * @memberof pb.BroadcastMsg
         * @static
         * @param {pb.IBroadcastMsg=} [properties] Properties to set
         * @returns {pb.BroadcastMsg} BroadcastMsg instance
         */
        BroadcastMsg.create = function create(properties) {
            return new BroadcastMsg(properties);
        };

        /**
         * Encodes the specified BroadcastMsg message. Does not implicitly {@link pb.BroadcastMsg.verify|verify} messages.
         * @function encode
         * @memberof pb.BroadcastMsg
         * @static
         * @param {pb.IBroadcastMsg} message BroadcastMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BroadcastMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.buf != null && Object.hasOwnProperty.call(message, "buf"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.buf);
            if (message.uids != null && message.uids.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.uids.length; ++i)
                    writer.int32(message.uids[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified BroadcastMsg message, length delimited. Does not implicitly {@link pb.BroadcastMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.BroadcastMsg
         * @static
         * @param {pb.IBroadcastMsg} message BroadcastMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BroadcastMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BroadcastMsg message from the specified reader or buffer.
         * @function decode
         * @memberof pb.BroadcastMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.BroadcastMsg} BroadcastMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BroadcastMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.BroadcastMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.buf = reader.bytes();
                        break;
                    case 3:
                        if (!(message.uids && message.uids.length))
                            message.uids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.uids.push(reader.int32());
                        } else
                            message.uids.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a BroadcastMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.BroadcastMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.BroadcastMsg} BroadcastMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BroadcastMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BroadcastMsg message.
         * @function verify
         * @memberof pb.BroadcastMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BroadcastMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                switch (message.id) {
                    default:
                        return "id: enum value expected";
                    case 0:
                    case 101:
                    case 103:
                    case 1000:
                    case 1002:
                    case 1004:
                    case 1006:
                    case 1008:
                    case 1010:
                    case 1012:
                    case 1014:
                    case 1016:
                    case 1018:
                    case 1020:
                    case 1022:
                    case 1024:
                    case 1026:
                    case 1028:
                    case 1030:
                    case 1032:
                    case 1034:
                    case 1036:
                    case 1037:
                    case 1100:
                    case 1102:
                    case 1200:
                    case 1202:
                    case 1204:
                    case 2001:
                    case 2002:
                    case 2003:
                    case 2004:
                    case 2005:
                    case 2006:
                    case 2007:
                    case 2008:
                    case 2009:
                    case 2010:
                    case 2011:
                    case 2012:
                    case 2013:
                    case 2014:
                    case 2015:
                    case 2016:
                    case 2017:
                    case 2018:
                    case 3001:
                    case 3002:
                    case 3003:
                    case 3004:
                    case 3005:
                    case 3006:
                    case 3007:
                    case 3008:
                    case 3009:
                    case 3010:
                    case 3011:
                    case 3012:
                    case 3013:
                    case 3014:
                    case 3015:
                    case 3016:
                    case 3017:
                    case 3018:
                    case 3019:
                    case 3020:
                    case 3021:
                    case 3022:
                    case 3023:
                    case 3024:
                    case 3025:
                    case 3026:
                    case 3027:
                    case 3028:
                    case 3029:
                    case 3030:
                    case 3031:
                    case 3032:
                    case 3033:
                    case 3034:
                    case 3035:
                    case 3036:
                    case 3037:
                    case 3038:
                    case 3039:
                    case 3040:
                    case 3041:
                    case 3042:
                    case 3043:
                    case 3044:
                    case 3045:
                    case 3046:
                    case 3047:
                    case 3048:
                    case 3049:
                    case 3050:
                    case 3051:
                    case 3052:
                    case 3053:
                    case 3054:
                    case 3055:
                    case 3056:
                    case 3997:
                    case 3998:
                    case 3999:
                    case 4000:
                    case 4001:
                    case 4002:
                    case 4003:
                    case 4004:
                    case 4005:
                    case 4006:
                    case 4007:
                    case 4008:
                    case 4009:
                    case 4010:
                    case 4011:
                    case 4012:
                    case 4013:
                    case 4014:
                    case 4015:
                    case 4016:
                    case 4017:
                    case 4018:
                    case 4019:
                    case 4020:
                    case 4021:
                    case 4022:
                    case 4023:
                    case 4024:
                    case 4025:
                    case 4026:
                    case 4027:
                    case 4028:
                    case 4029:
                    case 4030:
                    case 4031:
                    case 4032:
                    case 4033:
                    case 4034:
                    case 4035:
                    case 4036:
                    case 4037:
                    case 4038:
                    case 4039:
                    case 4040:
                    case 4041:
                    case 4042:
                    case 4043:
                    case 4044:
                    case 4045:
                    case 4046:
                    case 4047:
                    case 4048:
                    case 4049:
                    case 4050:
                    case 5003:
                    case 5004:
                    case 5005:
                    case 5006:
                    case 5007:
                    case 5008:
                    case 5009:
                    case 5010:
                    case 5200:
                    case 5202:
                    case 5204:
                    case 5206:
                    case 5208:
                    case 5210:
                    case 5212:
                    case 5214:
                    case 5216:
                    case 5218:
                    case 10001:
                    case 10003:
                    case 10005:
                    case 10007:
                    case 10009:
                    case 10011:
                    case 10013:
                    case 10015:
                    case 10017:
                    case 10019:
                    case 10021:
                    case 10023:
                    case 10025:
                    case 10027:
                    case 10028:
                    case 10030:
                    case 10032:
                    case 10034:
                    case 10036:
                        break;
                }
            if (message.buf != null && message.hasOwnProperty("buf"))
                if (!(message.buf && typeof message.buf.length === "number" || $util.isString(message.buf)))
                    return "buf: buffer expected";
            if (message.uids != null && message.hasOwnProperty("uids")) {
                if (!Array.isArray(message.uids))
                    return "uids: array expected";
                for (var i = 0; i < message.uids.length; ++i)
                    if (!$util.isInteger(message.uids[i]))
                        return "uids: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a BroadcastMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.BroadcastMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.BroadcastMsg} BroadcastMsg
         */
        BroadcastMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.BroadcastMsg)
                return object;
            var message = new $root.pb.BroadcastMsg();
            switch (object.id) {
                case "MessageId_NULL":
                case 0:
                    message.id = 0;
                    break;
                case "Cmd_Save_Stock2Db":
                case 101:
                    message.id = 101;
                    break;
                case "Cmd_Make_StockList":
                case 103:
                    message.id = 103;
                    break;
                case "Sync_S2C_QuoteItem":
                case 1000:
                    message.id = 1000;
                    break;
                case "Sync_S2C_GameProperty":
                case 1002:
                    message.id = 1002;
                    break;
                case "Sync_S2C_GameCounter":
                case 1004:
                    message.id = 1004;
                    break;
                case "Sync_S2C_GameSmxl":
                case 1006:
                    message.id = 1006;
                    break;
                case "Sync_S2C_GameCg":
                case 1008:
                    message.id = 1008;
                    break;
                case "Sync_S2C_GameMncg":
                case 1010:
                    message.id = 1010;
                    break;
                case "Sync_S2C_GameCgds":
                case 1012:
                    message.id = 1012;
                    break;
                case "Sync_S2C_FirstLoginToday":
                case 1014:
                    message.id = 1014;
                    break;
                case "Sync_S2C_GameCg_GD":
                case 1016:
                    message.id = 1016;
                    break;
                case "Sync_S2C_GameTimes":
                case 1018:
                    message.id = 1018;
                    break;
                case "Sync_S2C_StockOrderResult":
                case 1020:
                    message.id = 1020;
                    break;
                case "Sync_S2C_MutipleLogin":
                case 1022:
                    message.id = 1022;
                    break;
                case "Sync_S2C_TaskProgress":
                case 1024:
                    message.id = 1024;
                    break;
                case "Sync_S2C_ActivityConf":
                case 1026:
                    message.id = 1026;
                    break;
                case "Sync_S2C_GameCgdsItem":
                case 1028:
                    message.id = 1028;
                    break;
                case "Sync_S2C_GoldAwardPrompt":
                case 1030:
                    message.id = 1030;
                    break;
                case "Sync_S2C_UnregistryAccount":
                case 1032:
                    message.id = 1032;
                    break;
                case "Sync_S2C_CgdsConf":
                case 1034:
                    message.id = 1034;
                    break;
                case "Sync_S2C_RecommendStock":
                case 1036:
                    message.id = 1036;
                    break;
                case "Sync_S2C_InviterState":
                case 1037:
                    message.id = 1037;
                    break;
                case "Sync_S2C_Broadcast":
                case 1100:
                    message.id = 1100;
                    break;
                case "Sync_S2C_Message":
                case 1102:
                    message.id = 1102;
                    break;
                case "Sync_C2S_GameHeart":
                case 1200:
                    message.id = 1200;
                    break;
                case "Sync_C2S_Message":
                case 1202:
                    message.id = 1202;
                    break;
                case "Sync_C2S_PaymentOk":
                case 1204:
                    message.id = 1204;
                    break;
                case "Req_QuoteSubscribe":
                case 2001:
                    message.id = 2001;
                    break;
                case "Rep_QuoteSubscribe":
                case 2002:
                    message.id = 2002;
                    break;
                case "Req_QuoteQuery":
                case 2003:
                    message.id = 2003;
                    break;
                case "Rep_QuoteQuery":
                case 2004:
                    message.id = 2004;
                    break;
                case "Req_QuoteQueryFuture":
                case 2005:
                    message.id = 2005;
                    break;
                case "Rep_QuoteQueryFuture":
                case 2006:
                    message.id = 2006;
                    break;
                case "Req_IsTradingDay":
                case 2007:
                    message.id = 2007;
                    break;
                case "Rep_IsTradingDay":
                case 2008:
                    message.id = 2008;
                    break;
                case "Req_QueryTradingDay":
                case 2009:
                    message.id = 2009;
                    break;
                case "Rep_QueryTradingDay":
                case 2010:
                    message.id = 2010;
                    break;
                case "Req_QueryAiStockList":
                case 2011:
                    message.id = 2011;
                    break;
                case "Rep_QueryAiStockList":
                case 2012:
                    message.id = 2012;
                    break;
                case "Req_QueryAiSignal":
                case 2013:
                    message.id = 2013;
                    break;
                case "Rep_QueryAiSignal":
                case 2014:
                    message.id = 2014;
                    break;
                case "Req_EditAiStockList":
                case 2015:
                    message.id = 2015;
                    break;
                case "Rep_EditAiStockList":
                case 2016:
                    message.id = 2016;
                    break;
                case "Req_RecommendStock":
                case 2017:
                    message.id = 2017;
                    break;
                case "Rep_RecommendStock":
                case 2018:
                    message.id = 2018;
                    break;
                case "Req_Hall_UploadIcon":
                case 3001:
                    message.id = 3001;
                    break;
                case "Rep_Hall_UploadIcon":
                case 3002:
                    message.id = 3002;
                    break;
                case "Req_Hall_DownloadIcon":
                case 3003:
                    message.id = 3003;
                    break;
                case "Rep_Hall_DownploadIcon":
                case 3004:
                    message.id = 3004;
                    break;
                case "Req_Hall_EditIcon":
                case 3005:
                    message.id = 3005;
                    break;
                case "Rep_Hall_EditIcon":
                case 3006:
                    message.id = 3006;
                    break;
                case "Req_Hall_EditNick":
                case 3007:
                    message.id = 3007;
                    break;
                case "Rep_Hall_EditNick":
                case 3008:
                    message.id = 3008;
                    break;
                case "Req_Hall_EditLocation":
                case 3009:
                    message.id = 3009;
                    break;
                case "Rep_Hall_EditLocation":
                case 3010:
                    message.id = 3010;
                    break;
                case "Req_Hall_EditGender":
                case 3011:
                    message.id = 3011;
                    break;
                case "Rep_Hall_EditGender":
                case 3012:
                    message.id = 3012;
                    break;
                case "Req_Hall_BackBag":
                case 3013:
                    message.id = 3013;
                    break;
                case "Rep_Hall_BackBag":
                case 3014:
                    message.id = 3014;
                    break;
                case "Req_Hall_GetItem":
                case 3015:
                    message.id = 3015;
                    break;
                case "Rep_Hall_GetItem":
                case 3016:
                    message.id = 3016;
                    break;
                case "Req_Hall_EditFavorList":
                case 3017:
                    message.id = 3017;
                    break;
                case "Rep_Hall_EditFavorList":
                case 3018:
                    message.id = 3018;
                    break;
                case "Req_Hall_QueryPlayer":
                case 3019:
                    message.id = 3019;
                    break;
                case "Rep_Hall_QueryPlayer":
                case 3020:
                    message.id = 3020;
                    break;
                case "Req_Hall_SaveStudyProgress":
                case 3021:
                    message.id = 3021;
                    break;
                case "Rep_Hall_SaveStudyProgress":
                case 3022:
                    message.id = 3022;
                    break;
                case "Req_Hall_GetDailyTaskAward":
                case 3023:
                    message.id = 3023;
                    break;
                case "Rep_Hall_GetDailyTaskAward":
                case 3024:
                    message.id = 3024;
                    break;
                case "Req_Hall_UnlockGame":
                case 3025:
                    message.id = 3025;
                    break;
                case "Rep_Hall_UnlockGame":
                case 3026:
                    message.id = 3026;
                    break;
                case "Req_Hall_GetWeeklyAward":
                case 3027:
                    message.id = 3027;
                    break;
                case "Rep_Hall_GetWeeklyAward":
                case 3028:
                    message.id = 3028;
                    break;
                case "Req_Hall_QueryEventLog":
                case 3029:
                    message.id = 3029;
                    break;
                case "Rep_Hall_QueryEventLog":
                case 3030:
                    message.id = 3030;
                    break;
                case "Req_Hall_ShopOrder":
                case 3031:
                    message.id = 3031;
                    break;
                case "Rep_Hall_ShopOrder":
                case 3032:
                    message.id = 3032;
                    break;
                case "Req_Hall_ShopOrderQuery":
                case 3033:
                    message.id = 3033;
                    break;
                case "Rep_Hall_ShopOrderQuery":
                case 3034:
                    message.id = 3034;
                    break;
                case "Req_Hall_MobileBind":
                case 3035:
                    message.id = 3035;
                    break;
                case "Rep_Hall_MobileBind":
                case 3036:
                    message.id = 3036;
                    break;
                case "Req_Hall_ResetGameCounter":
                case 3037:
                    message.id = 3037;
                    break;
                case "Rep_Hall_ResetGameCounter":
                case 3038:
                    message.id = 3038;
                    break;
                case "Req_Hall_GetLevelRanking":
                case 3039:
                    message.id = 3039;
                    break;
                case "Rep_Hall_GetLevelRanking":
                case 3040:
                    message.id = 3040;
                    break;
                case "Req_Hall_GetFameRanking":
                case 3041:
                    message.id = 3041;
                    break;
                case "Rep_Hall_GetFameRanking":
                case 3042:
                    message.id = 3042;
                    break;
                case "Req_Hall_GetFameRankingWeekly":
                case 3043:
                    message.id = 3043;
                    break;
                case "Rep_Hall_GetFameRankingWeekly":
                case 3044:
                    message.id = 3044;
                    break;
                case "Req_Hall_GetActivityLogs":
                case 3045:
                    message.id = 3045;
                    break;
                case "Rep_Hall_GetActivityLogs":
                case 3046:
                    message.id = 3046;
                    break;
                case "Req_Hall_GetDailyAdAward":
                case 3047:
                    message.id = 3047;
                    break;
                case "Rep_Hall_GetDailyAdAward":
                case 3048:
                    message.id = 3048;
                    break;
                case "Req_Hall_Get7Award":
                case 3049:
                    message.id = 3049;
                    break;
                case "Rep_Hall_Get7Award":
                case 3050:
                    message.id = 3050;
                    break;
                case "Req_Hall_GetBrokenAward":
                case 3051:
                    message.id = 3051;
                    break;
                case "Rep_Hall_GetBrokenAward":
                case 3052:
                    message.id = 3052;
                    break;
                case "Req_Hall_Exchange":
                case 3053:
                    message.id = 3053;
                    break;
                case "Rep_Hall_Exchange":
                case 3054:
                    message.id = 3054;
                    break;
                case "Req_Hall_GetInviterAward":
                case 3055:
                    message.id = 3055;
                    break;
                case "Rep_Hall_GetInviterAward":
                case 3056:
                    message.id = 3056;
                    break;
                case "Req_Hall_Unregistry":
                case 3997:
                    message.id = 3997;
                    break;
                case "Rep_Hall_Unregistry":
                case 3998:
                    message.id = 3998;
                    break;
                case "Req_Hall_Logout":
                case 3999:
                    message.id = 3999;
                    break;
                case "Rep_Hall_Logout":
                case 4000:
                    message.id = 4000;
                    break;
                case "Req_Game_Login":
                case 4001:
                    message.id = 4001;
                    break;
                case "Rep_Game_Login":
                case 4002:
                    message.id = 4002;
                    break;
                case "Req_Game_Start":
                case 4003:
                    message.id = 4003;
                    break;
                case "Rep_Game_Start":
                case 4004:
                    message.id = 4004;
                    break;
                case "Req_Game_Over":
                case 4005:
                    message.id = 4005;
                    break;
                case "Rep_Game_Over":
                case 4006:
                    message.id = 4006;
                    break;
                case "Req_Game_QueryGameResult":
                case 4007:
                    message.id = 4007;
                    break;
                case "Rep_Game_QueryGameResult":
                case 4008:
                    message.id = 4008;
                    break;
                case "Req_Game_GetGameOperation":
                case 4009:
                    message.id = 4009;
                    break;
                case "Rep_Game_GetGameOperation":
                case 4010:
                    message.id = 4010;
                    break;
                case "Req_Game_SmxlReport":
                case 4011:
                    message.id = 4011;
                    break;
                case "Rep_Game_SmxlReport":
                case 4012:
                    message.id = 4012;
                    break;
                case "Req_Game_SmxlReset":
                case 4013:
                    message.id = 4013;
                    break;
                case "Rep_Game_SmxlReset":
                case 4014:
                    message.id = 4014;
                    break;
                case "Req_Game_CgsGetConf":
                case 4015:
                    message.id = 4015;
                    break;
                case "Rep_Game_CgsGetConf":
                case 4016:
                    message.id = 4016;
                    break;
                case "Req_Game_CgsGetClearanceRank":
                case 4017:
                    message.id = 4017;
                    break;
                case "Rep_Game_CgsGetClearanceRank":
                case 4018:
                    message.id = 4018;
                    break;
                case "Req_Game_CgsGetStageRank":
                case 4019:
                    message.id = 4019;
                    break;
                case "Rep_Game_CgsGetStageRank":
                case 4020:
                    message.id = 4020;
                    break;
                case "Req_Game_CgsGetSeasonRank":
                case 4021:
                    message.id = 4021;
                    break;
                case "Rep_Game_CgsGetSeasonRank":
                case 4022:
                    message.id = 4022;
                    break;
                case "Req_Game_CgsGetStageAward":
                case 4023:
                    message.id = 4023;
                    break;
                case "Rep_Game_CgsGetStageAward":
                case 4024:
                    message.id = 4024;
                    break;
                case "Req_Game_OrderQuery":
                case 4025:
                    message.id = 4025;
                    break;
                case "Rep_Game_OrderQuery":
                case 4026:
                    message.id = 4026;
                    break;
                case "Req_Game_Order":
                case 4027:
                    message.id = 4027;
                    break;
                case "Rep_Game_Order":
                case 4028:
                    message.id = 4028;
                    break;
                case "Req_Game_OrderCancel":
                case 4029:
                    message.id = 4029;
                    break;
                case "Rep_Game_OrderCancel":
                case 4030:
                    message.id = 4030;
                    break;
                case "Req_Game_MncgExchange":
                case 4031:
                    message.id = 4031;
                    break;
                case "Rep_Game_MncgExchange":
                case 4032:
                    message.id = 4032;
                    break;
                case "Req_Game_MncgEditStockList":
                case 4033:
                    message.id = 4033;
                    break;
                case "Rep_Game_MncgEditStockList":
                case 4034:
                    message.id = 4034;
                    break;
                case "Req_Game_CgdsList":
                case 4035:
                    message.id = 4035;
                    break;
                case "Rep_Game_CgdsList":
                case 4036:
                    message.id = 4036;
                    break;
                case "Req_Game_CgdsReg":
                case 4037:
                    message.id = 4037;
                    break;
                case "Rep_Game_CgdsReg":
                case 4038:
                    message.id = 4038;
                    break;
                case "Req_Game_CgdsRanking":
                case 4039:
                    message.id = 4039;
                    break;
                case "Rep_Game_CgdsRanking":
                case 4040:
                    message.id = 4040;
                    break;
                case "Req_Game_ZsjcBettingList":
                case 4041:
                    message.id = 4041;
                    break;
                case "Rep_Game_ZsjcBettingList":
                case 4042:
                    message.id = 4042;
                    break;
                case "Req_Game_ZsjcBet":
                case 4043:
                    message.id = 4043;
                    break;
                case "Rep_Game_ZsjcBet":
                case 4044:
                    message.id = 4044;
                    break;
                case "Req_Game_ZsjcRanking":
                case 4045:
                    message.id = 4045;
                    break;
                case "Rep_Game_ZsjcRanking":
                case 4046:
                    message.id = 4046;
                    break;
                case "Req_Game_ZsjcPlayerBettingList":
                case 4047:
                    message.id = 4047;
                    break;
                case "Rep_Game_ZsjcPlayerBettingList":
                case 4048:
                    message.id = 4048;
                    break;
                case "Req_Game_ZsjcBettingResultList":
                case 4049:
                    message.id = 4049;
                    break;
                case "Rep_Game_ZsjcBettingResultList":
                case 4050:
                    message.id = 4050;
                    break;
                case "Req_Room_Create":
                case 5003:
                    message.id = 5003;
                    break;
                case "Rep_Room_Create":
                case 5004:
                    message.id = 5004;
                    break;
                case "Req_Room_Enter":
                case 5005:
                    message.id = 5005;
                    break;
                case "Rep_Room_Enter":
                case 5006:
                    message.id = 5006;
                    break;
                case "Req_Room_Leave":
                case 5007:
                    message.id = 5007;
                    break;
                case "Rep_Room_Leave":
                case 5008:
                    message.id = 5008;
                    break;
                case "Req_Room_Ready":
                case 5009:
                    message.id = 5009;
                    break;
                case "Rep_Room_Ready":
                case 5010:
                    message.id = 5010;
                    break;
                case "Sync_Room_Enter":
                case 5200:
                    message.id = 5200;
                    break;
                case "Sync_Room_Leave":
                case 5202:
                    message.id = 5202;
                    break;
                case "Sync_Room_Enter_Self":
                case 5204:
                    message.id = 5204;
                    break;
                case "Sync_Room_Leave_Self":
                case 5206:
                    message.id = 5206;
                    break;
                case "Sync_Room_LostConn":
                case 5208:
                    message.id = 5208;
                    break;
                case "Sync_Room_ReConn":
                case 5210:
                    message.id = 5210;
                    break;
                case "Sync_Room_Ready":
                case 5212:
                    message.id = 5212;
                    break;
                case "Sync_Room_GameStatus":
                case 5214:
                    message.id = 5214;
                    break;
                case "Sync_Room_GameOp":
                case 5216:
                    message.id = 5216;
                    break;
                case "Sync_Room_GameResult":
                case 5218:
                    message.id = 5218;
                    break;
                case "S2S_HeartBeat":
                case 10001:
                    message.id = 10001;
                    break;
                case "S2S_Update_PlayerProperty":
                case 10003:
                    message.id = 10003;
                    break;
                case "S2S_Update_PlayerGameCounter":
                case 10005:
                    message.id = 10005;
                    break;
                case "S2S_OrderCancel":
                case 10007:
                    message.id = 10007;
                    break;
                case "S2S_Sync_Cgds":
                case 10009:
                    message.id = 10009;
                    break;
                case "S2S_Set_CgdsTitle":
                case 10011:
                    message.id = 10011;
                    break;
                case "S2S_Set_CgdsLogo":
                case 10013:
                    message.id = 10013;
                    break;
                case "S2S_Set_CgdsUrl":
                case 10015:
                    message.id = 10015;
                    break;
                case "S2S_Set_CgdsConf":
                case 10017:
                    message.id = 10017;
                    break;
                case "S2S_Set_CgdsAward":
                case 10019:
                    message.id = 10019;
                    break;
                case "S2S_Open_Cgds":
                case 10021:
                    message.id = 10021;
                    break;
                case "S2S_Close_Cgds":
                case 10023:
                    message.id = 10023;
                    break;
                case "S2S_Reload_Cgds":
                case 10025:
                    message.id = 10025;
                    break;
                case "S2S_Reload_GameConf":
                case 10027:
                    message.id = 10027;
                    break;
                case "S2S_Sync_ZsjcBetting":
                case 10028:
                    message.id = 10028;
                    break;
                case "S2S_Sync_ZsjcState":
                case 10030:
                    message.id = 10030;
                    break;
                case "S2S_Update_DailyTaskProgress":
                case 10032:
                    message.id = 10032;
                    break;
                case "S2S_Sync_Pay":
                case 10034:
                    message.id = 10034;
                    break;
                case "S2S_Sync_PaymentQuery":
                case 10036:
                    message.id = 10036;
                    break;
            }
            if (object.buf != null)
                if (typeof object.buf === "string")
                    $util.base64.decode(object.buf, message.buf = $util.newBuffer($util.base64.length(object.buf)), 0);
                else if (object.buf.length)
                    message.buf = object.buf;
            if (object.uids) {
                if (!Array.isArray(object.uids))
                    throw TypeError(".pb.BroadcastMsg.uids: array expected");
                message.uids = [];
                for (var i = 0; i < object.uids.length; ++i)
                    message.uids[i] = object.uids[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a BroadcastMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.BroadcastMsg
         * @static
         * @param {pb.BroadcastMsg} message BroadcastMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BroadcastMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.uids = [];
            if (options.defaults) {
                object.id = options.enums === String ? "MessageId_NULL" : 0;
                if (options.bytes === String)
                    object.buf = "";
                else {
                    object.buf = [];
                    if (options.bytes !== Array)
                        object.buf = $util.newBuffer(object.buf);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.enums === String ? $root.pb.MessageId[message.id] : message.id;
            if (message.buf != null && message.hasOwnProperty("buf"))
                object.buf = options.bytes === String ? $util.base64.encode(message.buf, 0, message.buf.length) : options.bytes === Array ? Array.prototype.slice.call(message.buf) : message.buf;
            if (message.uids && message.uids.length) {
                object.uids = [];
                for (var j = 0; j < message.uids.length; ++j)
                    object.uids[j] = message.uids[j];
            }
            return object;
        };

        /**
         * Converts this BroadcastMsg to JSON.
         * @function toJSON
         * @memberof pb.BroadcastMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BroadcastMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BroadcastMsg;
    })();

    pb.CmdCgsConf = (function () {

        /**
         * Properties of a CmdCgsConf.
         * @memberof pb
         * @interface ICmdCgsConf
         * @property {number|null} [id] CmdCgsConf id
         * @property {string|null} [awardJson] CmdCgsConf awardJson
         */

        /**
         * Constructs a new CmdCgsConf.
         * @memberof pb
         * @classdesc Represents a CmdCgsConf.
         * @implements ICmdCgsConf
         * @constructor
         * @param {pb.ICmdCgsConf=} [properties] Properties to set
         */
        function CmdCgsConf(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CmdCgsConf id.
         * @member {number} id
         * @memberof pb.CmdCgsConf
         * @instance
         */
        CmdCgsConf.prototype.id = 0;

        /**
         * CmdCgsConf awardJson.
         * @member {string} awardJson
         * @memberof pb.CmdCgsConf
         * @instance
         */
        CmdCgsConf.prototype.awardJson = "";

        /**
         * Creates a new CmdCgsConf instance using the specified properties.
         * @function create
         * @memberof pb.CmdCgsConf
         * @static
         * @param {pb.ICmdCgsConf=} [properties] Properties to set
         * @returns {pb.CmdCgsConf} CmdCgsConf instance
         */
        CmdCgsConf.create = function create(properties) {
            return new CmdCgsConf(properties);
        };

        /**
         * Encodes the specified CmdCgsConf message. Does not implicitly {@link pb.CmdCgsConf.verify|verify} messages.
         * @function encode
         * @memberof pb.CmdCgsConf
         * @static
         * @param {pb.ICmdCgsConf} message CmdCgsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsConf.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.awardJson != null && Object.hasOwnProperty.call(message, "awardJson"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.awardJson);
            return writer;
        };

        /**
         * Encodes the specified CmdCgsConf message, length delimited. Does not implicitly {@link pb.CmdCgsConf.verify|verify} messages.
         * @function encodeDelimited
         * @memberof pb.CmdCgsConf
         * @static
         * @param {pb.ICmdCgsConf} message CmdCgsConf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CmdCgsConf.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CmdCgsConf message from the specified reader or buffer.
         * @function decode
         * @memberof pb.CmdCgsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {pb.CmdCgsConf} CmdCgsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsConf.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.CmdCgsConf();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int32();
                        break;
                    case 2:
                        message.awardJson = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                }
            }
            return message;
        };

        /**
         * Decodes a CmdCgsConf message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof pb.CmdCgsConf
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {pb.CmdCgsConf} CmdCgsConf
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CmdCgsConf.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CmdCgsConf message.
         * @function verify
         * @memberof pb.CmdCgsConf
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CmdCgsConf.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.awardJson != null && message.hasOwnProperty("awardJson"))
                if (!$util.isString(message.awardJson))
                    return "awardJson: string expected";
            return null;
        };

        /**
         * Creates a CmdCgsConf message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof pb.CmdCgsConf
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {pb.CmdCgsConf} CmdCgsConf
         */
        CmdCgsConf.fromObject = function fromObject(object) {
            if (object instanceof $root.pb.CmdCgsConf)
                return object;
            var message = new $root.pb.CmdCgsConf();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.awardJson != null)
                message.awardJson = String(object.awardJson);
            return message;
        };

        /**
         * Creates a plain object from a CmdCgsConf message. Also converts values to other types if specified.
         * @function toObject
         * @memberof pb.CmdCgsConf
         * @static
         * @param {pb.CmdCgsConf} message CmdCgsConf
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CmdCgsConf.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.awardJson = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.awardJson != null && message.hasOwnProperty("awardJson"))
                object.awardJson = message.awardJson;
            return object;
        };

        /**
         * Converts this CmdCgsConf to JSON.
         * @function toJSON
         * @memberof pb.CmdCgsConf
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CmdCgsConf.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CmdCgsConf;
    })();

    pb.MasterService = (function () {

        /**
         * Constructs a new MasterService service.
         * @memberof pb
         * @classdesc Represents a MasterService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function MasterService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (MasterService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MasterService;

        /**
         * Creates new MasterService service using the specified rpc implementation.
         * @function create
         * @memberof pb.MasterService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {MasterService} RPC service. Useful where requests and/or responses are streamed.
         */
        MasterService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link pb.MasterService#newUid}.
         * @memberof pb.MasterService
         * @typedef NewUidCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdNewUidReply} [response] CmdNewUidReply
         */

        /**
         * Calls NewUid.
         * @function newUid
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @param {pb.MasterService.NewUidCallback} callback Node-style callback called with the error, if any, and CmdNewUidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.newUid = function newUid(request, callback) {
            return this.rpcCall(newUid, $root.pb.VoidRequest, $root.pb.CmdNewUidReply, request, callback);
        }, "name", { value: "NewUid" });

        /**
         * Calls NewUid.
         * @function newUid
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @returns {Promise<pb.CmdNewUidReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#getGateAddr}.
         * @memberof pb.MasterService
         * @typedef GetGateAddrCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdGateAddrReply} [response] CmdGateAddrReply
         */

        /**
         * Calls GetGateAddr.
         * @function getGateAddr
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdGateAddr} request CmdGateAddr message or plain object
         * @param {pb.MasterService.GetGateAddrCallback} callback Node-style callback called with the error, if any, and CmdGateAddrReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.getGateAddr = function getGateAddr(request, callback) {
            return this.rpcCall(getGateAddr, $root.pb.CmdGateAddr, $root.pb.CmdGateAddrReply, request, callback);
        }, "name", { value: "GetGateAddr" });

        /**
         * Calls GetGateAddr.
         * @function getGateAddr
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdGateAddr} request CmdGateAddr message or plain object
         * @returns {Promise<pb.CmdGateAddrReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#userLogin}.
         * @memberof pb.MasterService
         * @typedef UserLoginCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdUserLoginReply} [response] CmdUserLoginReply
         */

        /**
         * Calls UserLogin.
         * @function userLogin
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserLogin} request CmdUserLogin message or plain object
         * @param {pb.MasterService.UserLoginCallback} callback Node-style callback called with the error, if any, and CmdUserLoginReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.userLogin = function userLogin(request, callback) {
            return this.rpcCall(userLogin, $root.pb.CmdUserLogin, $root.pb.CmdUserLoginReply, request, callback);
        }, "name", { value: "UserLogin" });

        /**
         * Calls UserLogin.
         * @function userLogin
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserLogin} request CmdUserLogin message or plain object
         * @returns {Promise<pb.CmdUserLoginReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#userGameLogin}.
         * @memberof pb.MasterService
         * @typedef UserGameLoginCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.VoidReply} [response] VoidReply
         */

        /**
         * Calls UserGameLogin.
         * @function userGameLogin
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserGameLogin} request CmdUserGameLogin message or plain object
         * @param {pb.MasterService.UserGameLoginCallback} callback Node-style callback called with the error, if any, and VoidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.userGameLogin = function userGameLogin(request, callback) {
            return this.rpcCall(userGameLogin, $root.pb.CmdUserGameLogin, $root.pb.VoidReply, request, callback);
        }, "name", { value: "UserGameLogin" });

        /**
         * Calls UserGameLogin.
         * @function userGameLogin
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserGameLogin} request CmdUserGameLogin message or plain object
         * @returns {Promise<pb.VoidReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#userGameLogout}.
         * @memberof pb.MasterService
         * @typedef UserGameLogoutCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.VoidReply} [response] VoidReply
         */

        /**
         * Calls UserGameLogout.
         * @function userGameLogout
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserGameLogout} request CmdUserGameLogout message or plain object
         * @param {pb.MasterService.UserGameLogoutCallback} callback Node-style callback called with the error, if any, and VoidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.userGameLogout = function userGameLogout(request, callback) {
            return this.rpcCall(userGameLogout, $root.pb.CmdUserGameLogout, $root.pb.VoidReply, request, callback);
        }, "name", { value: "UserGameLogout" });

        /**
         * Calls UserGameLogout.
         * @function userGameLogout
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdUserGameLogout} request CmdUserGameLogout message or plain object
         * @returns {Promise<pb.VoidReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#newRoomId}.
         * @memberof pb.MasterService
         * @typedef NewRoomIdCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdNewRoomIdReply} [response] CmdNewRoomIdReply
         */

        /**
         * Calls NewRoomId.
         * @function newRoomId
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @param {pb.MasterService.NewRoomIdCallback} callback Node-style callback called with the error, if any, and CmdNewRoomIdReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.newRoomId = function newRoomId(request, callback) {
            return this.rpcCall(newRoomId, $root.pb.VoidRequest, $root.pb.CmdNewRoomIdReply, request, callback);
        }, "name", { value: "NewRoomId" });

        /**
         * Calls NewRoomId.
         * @function newRoomId
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @returns {Promise<pb.CmdNewRoomIdReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#syncRooms}.
         * @memberof pb.MasterService
         * @typedef SyncRoomsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.VoidReply} [response] VoidReply
         */

        /**
         * Calls SyncRooms.
         * @function syncRooms
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IRoomList} request RoomList message or plain object
         * @param {pb.MasterService.SyncRoomsCallback} callback Node-style callback called with the error, if any, and VoidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.syncRooms = function syncRooms(request, callback) {
            return this.rpcCall(syncRooms, $root.pb.RoomList, $root.pb.VoidReply, request, callback);
        }, "name", { value: "SyncRooms" });

        /**
         * Calls SyncRooms.
         * @function syncRooms
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IRoomList} request RoomList message or plain object
         * @returns {Promise<pb.VoidReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#enterRoom}.
         * @memberof pb.MasterService
         * @typedef EnterRoomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdRoomEnterReply} [response] CmdRoomEnterReply
         */

        /**
         * Calls EnterRoom.
         * @function enterRoom
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdRoomEnter} request CmdRoomEnter message or plain object
         * @param {pb.MasterService.EnterRoomCallback} callback Node-style callback called with the error, if any, and CmdRoomEnterReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.enterRoom = function enterRoom(request, callback) {
            return this.rpcCall(enterRoom, $root.pb.CmdRoomEnter, $root.pb.CmdRoomEnterReply, request, callback);
        }, "name", { value: "EnterRoom" });

        /**
         * Calls EnterRoom.
         * @function enterRoom
         * @memberof pb.MasterService
         * @instance
         * @param {pb.ICmdRoomEnter} request CmdRoomEnter message or plain object
         * @returns {Promise<pb.CmdRoomEnterReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.MasterService#heartBeat}.
         * @memberof pb.MasterService
         * @typedef HeartBeatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.VoidReply} [response] VoidReply
         */

        /**
         * Calls HeartBeat.
         * @function heartBeat
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @param {pb.MasterService.HeartBeatCallback} callback Node-style callback called with the error, if any, and VoidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(MasterService.prototype.heartBeat = function heartBeat(request, callback) {
            return this.rpcCall(heartBeat, $root.pb.VoidRequest, $root.pb.VoidReply, request, callback);
        }, "name", { value: "HeartBeat" });

        /**
         * Calls HeartBeat.
         * @function heartBeat
         * @memberof pb.MasterService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @returns {Promise<pb.VoidReply>} Promise
         * @variation 2
         */

        return MasterService;
    })();

    pb.GameService = (function () {

        /**
         * Constructs a new GameService service.
         * @memberof pb
         * @classdesc Represents a GameService
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function GameService(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (GameService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = GameService;

        /**
         * Creates new GameService service using the specified rpc implementation.
         * @function create
         * @memberof pb.GameService
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {GameService} RPC service. Useful where requests and/or responses are streamed.
         */
        GameService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link pb.GameService#getGameData}.
         * @memberof pb.GameService
         * @typedef GetGameDataCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdUserGameDataReply} [response] CmdUserGameDataReply
         */

        /**
         * Calls GetGameData.
         * @function getGameData
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdUserGameData} request CmdUserGameData message or plain object
         * @param {pb.GameService.GetGameDataCallback} callback Node-style callback called with the error, if any, and CmdUserGameDataReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.getGameData = function getGameData(request, callback) {
            return this.rpcCall(getGameData, $root.pb.CmdUserGameData, $root.pb.CmdUserGameDataReply, request, callback);
        }, "name", { value: "GetGameData" });

        /**
         * Calls GetGameData.
         * @function getGameData
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdUserGameData} request CmdUserGameData message or plain object
         * @returns {Promise<pb.CmdUserGameDataReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#addGameProperties}.
         * @memberof pb.GameService
         * @typedef AddGamePropertiesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls AddGameProperties.
         * @function addGameProperties
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdGameProperties} request CmdGameProperties message or plain object
         * @param {pb.GameService.AddGamePropertiesCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.addGameProperties = function addGameProperties(request, callback) {
            return this.rpcCall(addGameProperties, $root.pb.CmdGameProperties, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "AddGameProperties" });

        /**
         * Calls AddGameProperties.
         * @function addGameProperties
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdGameProperties} request CmdGameProperties message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#resetGameProperties}.
         * @memberof pb.GameService
         * @typedef ResetGamePropertiesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls ResetGameProperties.
         * @function resetGameProperties
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdGameProperties} request CmdGameProperties message or plain object
         * @param {pb.GameService.ResetGamePropertiesCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.resetGameProperties = function resetGameProperties(request, callback) {
            return this.rpcCall(resetGameProperties, $root.pb.CmdGameProperties, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "ResetGameProperties" });

        /**
         * Calls ResetGameProperties.
         * @function resetGameProperties
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdGameProperties} request CmdGameProperties message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#openCgs}.
         * @memberof pb.GameService
         * @typedef OpenCgsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls OpenCgs.
         * @function openCgs
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @param {pb.GameService.OpenCgsCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.openCgs = function openCgs(request, callback) {
            return this.rpcCall(openCgs, $root.pb.CmdCgsConf, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "OpenCgs" });

        /**
         * Calls OpenCgs.
         * @function openCgs
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#closeCgs}.
         * @memberof pb.GameService
         * @typedef CloseCgsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls CloseCgs.
         * @function closeCgs
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @param {pb.GameService.CloseCgsCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.closeCgs = function closeCgs(request, callback) {
            return this.rpcCall(closeCgs, $root.pb.CmdCgsConf, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "CloseCgs" });

        /**
         * Calls CloseCgs.
         * @function closeCgs
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#setCgsAward}.
         * @memberof pb.GameService
         * @typedef SetCgsAwardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls SetCgsAward.
         * @function setCgsAward
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @param {pb.GameService.SetCgsAwardCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.setCgsAward = function setCgsAward(request, callback) {
            return this.rpcCall(setCgsAward, $root.pb.CmdCgsConf, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "SetCgsAward" });

        /**
         * Calls SetCgsAward.
         * @function setCgsAward
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdCgsConf} request CmdCgsConf message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#execute}.
         * @memberof pb.GameService
         * @typedef ExecuteCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.ErrorInfo} [response] ErrorInfo
         */

        /**
         * Calls Execute.
         * @function execute
         * @memberof pb.GameService
         * @instance
         * @param {pb.IServerCmd} request ServerCmd message or plain object
         * @param {pb.GameService.ExecuteCallback} callback Node-style callback called with the error, if any, and ErrorInfo
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.execute = function execute(request, callback) {
            return this.rpcCall(execute, $root.pb.ServerCmd, $root.pb.ErrorInfo, request, callback);
        }, "name", { value: "Execute" });

        /**
         * Calls Execute.
         * @function execute
         * @memberof pb.GameService
         * @instance
         * @param {pb.IServerCmd} request ServerCmd message or plain object
         * @returns {Promise<pb.ErrorInfo>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#process}.
         * @memberof pb.GameService
         * @typedef ProcessCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.Message} [response] Message
         */

        /**
         * Calls Process.
         * @function process
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @param {pb.GameService.ProcessCallback} callback Node-style callback called with the error, if any, and Message
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.process = function process(request, callback) {
            return this.rpcCall(process, $root.pb.Message, $root.pb.Message, request, callback);
        }, "name", { value: "Process" });

        /**
         * Calls Process.
         * @function process
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @returns {Promise<pb.Message>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#sendMessage}.
         * @memberof pb.GameService
         * @typedef SendMessageCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.VoidReply} [response] VoidReply
         */

        /**
         * Calls SendMessage.
         * @function sendMessage
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @param {pb.GameService.SendMessageCallback} callback Node-style callback called with the error, if any, and VoidReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.sendMessage = function sendMessage(request, callback) {
            return this.rpcCall(sendMessage, $root.pb.Message, $root.pb.VoidReply, request, callback);
        }, "name", { value: "SendMessage" });

        /**
         * Calls SendMessage.
         * @function sendMessage
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @returns {Promise<pb.VoidReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#syncRooms}.
         * @memberof pb.GameService
         * @typedef SyncRoomsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.RoomList} [response] RoomList
         */

        /**
         * Calls SyncRooms.
         * @function syncRooms
         * @memberof pb.GameService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @param {pb.GameService.SyncRoomsCallback} callback Node-style callback called with the error, if any, and RoomList
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.syncRooms = function syncRooms(request, callback) {
            return this.rpcCall(syncRooms, $root.pb.VoidRequest, $root.pb.RoomList, request, callback);
        }, "name", { value: "SyncRooms" });

        /**
         * Calls SyncRooms.
         * @function syncRooms
         * @memberof pb.GameService
         * @instance
         * @param {pb.IVoidRequest} request VoidRequest message or plain object
         * @returns {Promise<pb.RoomList>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#forwardRoomMsg}.
         * @memberof pb.GameService
         * @typedef ForwardRoomMsgCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.Message} [response] Message
         */

        /**
         * Calls ForwardRoomMsg.
         * @function forwardRoomMsg
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @param {pb.GameService.ForwardRoomMsgCallback} callback Node-style callback called with the error, if any, and Message
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.forwardRoomMsg = function forwardRoomMsg(request, callback) {
            return this.rpcCall(forwardRoomMsg, $root.pb.Message, $root.pb.Message, request, callback);
        }, "name", { value: "ForwardRoomMsg" });

        /**
         * Calls ForwardRoomMsg.
         * @function forwardRoomMsg
         * @memberof pb.GameService
         * @instance
         * @param {pb.IMessage} request Message message or plain object
         * @returns {Promise<pb.Message>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#createRoom}.
         * @memberof pb.GameService
         * @typedef CreateRoomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdRoomCreateReply} [response] CmdRoomCreateReply
         */

        /**
         * Calls CreateRoom.
         * @function createRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomCreate} request CmdRoomCreate message or plain object
         * @param {pb.GameService.CreateRoomCallback} callback Node-style callback called with the error, if any, and CmdRoomCreateReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.createRoom = function createRoom(request, callback) {
            return this.rpcCall(createRoom, $root.pb.CmdRoomCreate, $root.pb.CmdRoomCreateReply, request, callback);
        }, "name", { value: "CreateRoom" });

        /**
         * Calls CreateRoom.
         * @function createRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomCreate} request CmdRoomCreate message or plain object
         * @returns {Promise<pb.CmdRoomCreateReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#enterRoom}.
         * @memberof pb.GameService
         * @typedef EnterRoomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdRoomEnterReply} [response] CmdRoomEnterReply
         */

        /**
         * Calls EnterRoom.
         * @function enterRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomEnter} request CmdRoomEnter message or plain object
         * @param {pb.GameService.EnterRoomCallback} callback Node-style callback called with the error, if any, and CmdRoomEnterReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.enterRoom = function enterRoom(request, callback) {
            return this.rpcCall(enterRoom, $root.pb.CmdRoomEnter, $root.pb.CmdRoomEnterReply, request, callback);
        }, "name", { value: "EnterRoom" });

        /**
         * Calls EnterRoom.
         * @function enterRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomEnter} request CmdRoomEnter message or plain object
         * @returns {Promise<pb.CmdRoomEnterReply>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link pb.GameService#leaveRoom}.
         * @memberof pb.GameService
         * @typedef LeaveRoomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {pb.CmdRoomLeaveReply} [response] CmdRoomLeaveReply
         */

        /**
         * Calls LeaveRoom.
         * @function leaveRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomLeave} request CmdRoomLeave message or plain object
         * @param {pb.GameService.LeaveRoomCallback} callback Node-style callback called with the error, if any, and CmdRoomLeaveReply
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(GameService.prototype.leaveRoom = function leaveRoom(request, callback) {
            return this.rpcCall(leaveRoom, $root.pb.CmdRoomLeave, $root.pb.CmdRoomLeaveReply, request, callback);
        }, "name", { value: "LeaveRoom" });

        /**
         * Calls LeaveRoom.
         * @function leaveRoom
         * @memberof pb.GameService
         * @instance
         * @param {pb.ICmdRoomLeave} request CmdRoomLeave message or plain object
         * @returns {Promise<pb.CmdRoomLeaveReply>} Promise
         * @variation 2
         */

        return GameService;
    })();

    return pb;
})();

module.exports = $root;
