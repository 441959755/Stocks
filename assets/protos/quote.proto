// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pb;
option go_package = ".;pb";




import "common.proto";


// 行情K线类型
enum KType {
    KType_NULL = 0;

	// 实时行情
	Real = 1;	// 实时（包含当前这一分钟的分时行情和买卖5档委托，随行情源每隔n秒同步一次）

	// 历史行情
	Min   = 2;	// 分时：任何时间（时间格式：时间戳，精确到秒
	MinToday= 3;// 分时：当天的（时间格式：HHMMSS
	Min5  = 4;	// 5分钟（时间格式：时间戳，精确到秒
	Min15 = 5;	// 15分（时间格式：时间戳，精确到秒
	Min30 = 6;	// 30分（时间格式：时间戳，精确到秒
	Min60 = 7;	// 60分（时间格式：时间戳，精确到秒

	Day  = 10;  // 日K（时间格式：YYYYMMDD
	Day7 = 11;  // 周K
	Day30 = 12; // 月K
}

// 行情K线波形
enum KStyle {
    Random = 0;	// 随机行情
	Wave = 1;	// 震荡行情
	Up = 2;		// 单边向上行情
	Down = 3;	// 单边向下行情
}



// 查询股票行情
message CmdQuoteQuery {
	KType ktype = 1;   	// K线类型（目前只有分时和日K）
	uint32 code = 2;    // 股票代码（0表示忽略和随机）
	int64 from = 3;    	// 开始时间戳（不能为0，查询日K行情的格式为：YYYYMMDD；查询分时行情的格式为：HHMMSS）
    int32 total = 4;   	// K线条数（0表示忽略该参数；如果total和to都不为0，则优先使用条数作为查询条件；一次性查询最大条数为2000条）
	int64 to = 5;      	// 结束时间戳（0表示忽略该参数；格式同from）
	KStyle kstyle = 6;	// 行情样式（如：单边向下、震荡）
	int32 reserve = 7;	// 行情预留根数，针对from往前偏移根数，然后读取total指定的根数返回（针对非today的分时、日K和周K有效）
}
message QuoteItem {
	uint32 code = 1;        // 股票代码
	KType ktype = 2;     	// K线类型
	int64 timestamp = 3;    // 时间戳
	
	double price = 4;       // 当前价
	uint64 volume = 5;      // 成交量
	double amount = 6;      // 成交额
	uint64 count = 7;		// 成交笔数
	double open = 8;        // 开盘价
	double close = 9;       // 收盘价（意义说明：对于日K为当日收盘价，对于分时为昨日收盘价）
	double high = 10;       // 最高价
	double low = 11;        // 最低价

	repeated double ask5Price  = 12;// 申买五档价
	repeated uint64 ask5Volume = 13;// 申买五档量
	repeated double bid5Price  = 14;// 申卖五档价
	repeated uint64 bid5Volume = 15;// 申卖五档量
}
message Quotes {
	repeated QuoteItem items = 1;
}

// 订阅行情 or 取消订阅行情
message QuoteSubscribeItem {
	string code = 1;    // 股票代码
	bool flag = 2;      // 订阅标记（true：订阅，false：取消）
}
message CmdQuoteSubscribe {
	repeated QuoteSubscribeItem items = 1;
}

// 查询是否为交易日
message CmdTradingDay {
	int32 date = 1;	// YYYYMMDD
	int32 n = 2;	// 前后n个交易日
}
message CmdTradingDayReply {
	bool is_trading_day = 1;
	repeated int32 days = 2;	// 查询某个日期前后的交易日
}

// 获取推荐股票列表
message CmdRecommendStock {
	int64 from = 1;    	// 推荐开始时间戳（from和to不能同时为0，查询日K行情的格式为：YYYYMMDD；）
    int32 total = 2;   	// 天数（0表示忽略该参数；如果total和to都不为0，则优先使用天数作为查询条件；一次性查询最大天数为256天）
	int64 to = 3;      	// 推荐结束时间戳（0表示忽略该参数；格式同from）
}
message RecommendStockItem {
	int64 ts = 1;					// 推荐日期
	repeated uint32 code_list = 2;	// 推荐股票代码清单
}
message CmdRecommendStockReply {
	repeated RecommendStockItem items = 1;
}

// 查询期货行情
message CmdQuoteQueryFuture {
	KType ktype = 1;   	// K线类型
	uint32 code = 2;    // 合约代码（2000000表示忽略和随机）
	int64 from = 3;    	// 开始时间戳（不能为0，查询日K行情的格式为：YYYYMMDD，查询分时行情的格式为：时间戳，精确到秒）
    int32 total = 4;   	// K线条数（0表示忽略该参数；如果total和to都不为0，则优先使用条数作为查询条件；一次性查询最大条数为2000条）
	int64 to = 5;      	// 结束时间戳（0表示忽略该参数；格式同from）
	int32 reserve = 6;	// 行情预留根数，针对from往前偏移根数，然后读取total指定的根数返回（针对5分钟、日K和周K有效）
}
message QuoteItemFuture {
	uint32 code = 1;        // 合约代码
	KType ktype = 2;     	// K线类型
	int64 timestamp = 3;    // 时间戳
	
	double open = 4;        // 开盘价
	double close = 5;       // 收盘价
	double high = 6;       	// 最高价
	double low = 7;        	// 最低价

	uint64 volume = 8;      // 成交量
	uint64 ccl_hold = 9;	// CCL.持仓量
}
message QuotesFuture {
	repeated QuoteItemFuture items = 1;
}



// AI选股相关
// 查询AI股票列表：前三个字段为空时，则返回最新更新的前100个信号的股票（包括买卖信号，如果只显示买入信号，需要客户端过滤掉卖出信号）
message CmdQueryAiStockList {
	int32 rank_from = 1;   		// 收益排行起始位置
	int64 ts_update_from=2; 	// 信号更新时间戳起始位置：精确到秒
	int32 total = 3;			// 查询条数
	repeated int32 codes = 4;	// 按照股票代码查询
}
message AiStockItem {
	uint32 code = 1;			// 股票代码
	string name = 2;			// 股票名称
	string industry = 3;		// 板块
	int64 ts_updated = 4;		// 更新时间戳：精确到秒
	int32 profit_ranking = 5;	// 盈利率排行
	double profit_rate = 6;		// 盈利率
	double last_ask_price = 7;	// 最近一次建议买入价格(要么没有，要么买卖价成对出现)
	double last_bid_price = 8;	// 最近一次建议卖出价格(要么没有，要么买卖价成对出现)
	double cur_ask_price = 9;	// 当前建议买入价格
	double today_signal = 10;	// 今日信号
	int64 cur_ask_ts = 11;		// 当前买入信号时间
	int64 last_bid_ts = 12;		// 最近一次建议卖出信号时间
	int64 last_ask_ts = 13;		// 最近一次建议买入信号时间
}
message CmdQueryAiStockListReply {
	repeated AiStockItem items = 2;
}
// 查询某支股票的AI信号
message CmdQueryAiSignal {
	uint32 code = 1;		// 股票代码
}
message AiSignalItem {
	int64 ts = 1;			// 时间戳：YYYYMMDD
	double flag = 2;		// 买卖信号：-1为买，0为中，1为卖
	double price = 3;		// 当前价格
	double ma10 = 4;		// 10日均线
	double ma30 = 5;		// 30日均线
}
message CmdQueryAiSignalReply {
	uint32 code = 1;					// 股票代码
	string industry = 2;				// 板块
	repeated AiSignalItem signals = 3;	// 信号
}




// GRPC
service QuotesService {
  rpc QuotesQuery (CmdQuoteQuery) returns (Quotes) {}
  rpc QuotesSubscribe (CmdQuoteSubscribe) returns (ErrorInfo) {}
  rpc IsTradingDay (CmdTradingDay) returns (CmdTradingDayReply) {}
  rpc QueryTradingDay (CmdTradingDay) returns (CmdTradingDayReply) {}
  rpc QueryAiStockList (CmdQueryAiStockList) returns (CmdQueryAiStockListReply) {}
  rpc QueryAiSignal (CmdQueryAiSignal) returns (CmdQueryAiSignalReply) {}
}

service QuotesFutureService {
  rpc QuotesQuery (CmdQuoteQueryFuture) returns (QuotesFuture) {}
}